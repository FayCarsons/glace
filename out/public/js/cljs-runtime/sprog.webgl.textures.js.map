{"version":3,"sources":["sprog/webgl/textures.cljs"],"mappings":"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","names":["js/sprog","js/sprog.webgl","js/sprog.webgl.textures","js/sprog.webgl.textures.framebuffer-map-atom","sprog.webgl.textures/framebuffer-map-atom","cljs.core.atom","sprog.webgl.textures/get-framebuffer","gl","textures","temp__5802__auto__","framebuffer","G__43832","fexpr__43831","cljs.core/deref","seq__43833","cljs.core/seq","chunk__43834","count__43835","i__43836","vec__43846","cljs.core.nth","temp__5804__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__43858","cljs.core/first","cljs.core/next","texture","index","cljs.core.map","cljs.core/list","cljs.core.range","cljs.core/vector?","cljs.core/second","cljs.core.swap_BANG_","cljs.core/assoc","sprog.webgl.textures/target-screen!","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","sprog.webgl.textures/target-textures!","seq43869","G__43870","self__5751__auto__","p1__43868#","sprog.webgl.textures/set-tex-parameters","p__43883","vec__43884","seq43876","G__43877","G__43878","G__43879","G__43880","filter-mode","wrap-mode","three-d?","texture-target","gl-filter-mode","fexpr__43890","vec__43891","wrap-mode->gl-enum","mode","G__43894","cljs.core/Keyword","gl-wrap-s","gl-wrap-t","gl-wrap-r","cljs.core/coll?","cljs.core.repeat","sprog.webgl.textures/create-tex","p__43914","vec__43915","map__43918","cljs.core/--destructure-map","cljs.core.get","seq43905","G__43906","G__43907","G__43908","texture-type","resolution","channels","data","cljs.core._EQ_","tex","internal-format","G__43930","fexpr__43929","fexpr__43934","format","G__43940","fexpr__43939","fexpr__43941","webgl-type","fexpr__43947","vec__43948","width","height","depth","vec__43955","sprog.webgl.textures.set_tex_parameters","or__5043__auto__","sprog.webgl.textures/delete-tex","seq43961","G__43962","seq__43963","chunk__43964","count__43965","i__43966","cljs.core.filter","cljs.core/identity","cljs.core/flatten","sprog.webgl.textures/tex-data-array","size","sprog.webgl.textures.target_textures_BANG_","vec__43979","x","y","cljs.core.into","array","G__43982","js/Error","js/Uint8Array","js/Uint16Array","js/Uint32Array","G__43985","sprog.webgl.textures/copy-html-image-data!","element-or-id","element","js/document","sprog.webgl.textures/html-image-tex","p__43989","vec__43990","map__43993","seq43986","G__43987","G__43988","sprog.webgl.textures/create-webcam-video-element","p__43996","vec__43997","map__44000","seq43994","G__43995","callback","brightness","media-constraints","cljs.core/clj->js","video","js/document.createElement","js/navigator.mediaDevices.getUserMedia","media-stream","e","sprog.webgl.textures/max-tex-size"],"sourcesContent":["(ns sprog.webgl.textures)\n\n(defonce framebuffer-map-atom (atom {}))\n\n(defn get-framebuffer [gl textures]\n  (if-let [framebuffer (@framebuffer-map-atom [gl textures])]\n    framebuffer\n    (let [framebuffer (.createFramebuffer gl)]\n      (.bindFramebuffer gl gl.FRAMEBUFFER framebuffer)\n      (doseq [[texture index] (map list textures (range))]\n        (if (vector? texture)\n          (.framebufferTextureLayer gl\n                                    gl.FRAMEBUFFER\n                                    (+ gl.COLOR_ATTACHMENT0 index)\n                                    (first texture)\n                                    0\n                                    (second texture))\n          (.framebufferTexture2D gl\n                                 gl.FRAMEBUFFER\n                                 (+ gl.COLOR_ATTACHMENT0 index)\n                                 gl.TEXTURE_2D\n                                 texture\n                                 0)))\n      (swap! framebuffer-map-atom assoc [gl textures] framebuffer)\n      framebuffer)))\n\n(defn target-screen! [gl]\n  (.bindFramebuffer gl gl.FRAMEBUFFER nil))\n\n(defn target-textures! [gl & textures]\n  (.bindFramebuffer gl gl.FRAMEBUFFER (get-framebuffer gl textures))\n  (.drawBuffers gl (map #(+ gl.COLOR_ATTACHMENT0 %)\n                        (range (count textures)))))\n\n(defn set-tex-parameters [gl texture filter-mode wrap-mode & [three-d?]]\n  (let [texture-target (if three-d? gl.TEXTURE_3D gl.TEXTURE_2D)]\n    (.bindTexture gl texture-target texture)\n    (let [gl-filter-mode ({:linear gl.LINEAR\n                           :nearest gl.NEAREST}\n                          filter-mode)]\n      (.texParameteri gl\n                      texture-target\n                      gl.TEXTURE_MIN_FILTER\n                      gl-filter-mode)\n      (.texParameteri gl\n                      texture-target\n                      gl.TEXTURE_MAG_FILTER\n                      gl-filter-mode))\n    (let [wrap-mode->gl-enum (fn [mode]\n                               (case mode\n                                 :clamp gl.CLAMP_TO_EDGE\n                                 :repeat gl.REPEAT\n                                 :mirror gl.MIRRORED_REPEAT\n                                 mode))\n          [gl-wrap-s gl-wrap-t gl-wrap-r]\n          (if (coll? wrap-mode)\n            (map wrap-mode->gl-enum wrap-mode)\n            (repeat (wrap-mode->gl-enum wrap-mode)))]\n      (.texParameteri gl\n                      texture-target\n                      gl.TEXTURE_WRAP_S\n                      gl-wrap-s)\n      (.texParameteri gl\n                      texture-target\n                      gl.TEXTURE_WRAP_T\n                      gl-wrap-t)\n      (when three-d?\n        (.texParameteri gl\n                        texture-target\n                        gl.TEXTURE_WRAP_R\n                        gl-wrap-r)))))\n\n(defn create-tex [gl\n                  texture-type\n                  resolution\n                  & [{:keys [wrap-mode\n                             filter-mode\n                             channels\n                             data]\n                      :or {wrap-mode :repeat\n                           channels 4}}]]\n  (let [three-d? (and (not (number? resolution))\n                      (= (count resolution) 3))\n        texture-target (if three-d? gl.TEXTURE_3D gl.TEXTURE_2D)\n        tex (.createTexture gl texture-target)]\n    (.bindTexture gl texture-target tex)\n    (let [internal-format (({:f8 [gl.R8 gl.RG8 gl.RGB8 gl.RGBA]\n                             :u16 [gl.R16UI gl.RG16UI gl.RGB16UI gl.RGBA16UI]\n                             :u32 [gl.R32UI gl.RG32UI gl.RGB32UI gl.RGBA32UI]}\n                            texture-type)\n                           (dec channels))\n          format (({:f8 [gl.RED gl.RG gl.RGB gl.RGBA]\n                    :u16 [gl.RED_INTEGER\n                          gl.RG_INTEGER\n                          gl.RGB_INTEGER\n                          gl.RGBA_INTEGER]\n                    :u32 [gl.RED_INTEGER\n                          gl.RG_INTEGER\n                          gl.RGB_INTEGER\n                          gl.RGBA_INTEGER]}\n                   texture-type)\n                  (dec channels))\n          webgl-type ({:f8 gl.UNSIGNED_BYTE\n                       :u16 gl.UNSIGNED_SHORT\n                       :u32 gl.UNSIGNED_INT}\n                      texture-type)]\n      (if three-d?\n        (let [[width height depth] resolution]\n          (.texImage3D gl\n                       gl.TEXTURE_3D\n                       0\n                       internal-format\n                       width\n                       height\n                       depth\n                       0\n                       format\n                       webgl-type\n                       data))\n        (let [[width height] (if (number? resolution)\n                               [resolution resolution]\n                               resolution)]\n          (.texImage2D gl\n                       gl.TEXTURE_2D\n                       0\n                       internal-format\n                       width\n                       height\n                       0\n                       format\n                       webgl-type\n                       data))))\n    (set-tex-parameters gl\n                        tex\n                        (or filter-mode\n                            (if (= texture-type :f8)\n                              :linear\n                              :nearest))\n                        wrap-mode\n                        three-d?)\n    (.bindTexture gl texture-target nil)\n    tex))\n\n(defn delete-tex [gl & textures]\n  (doseq [tex (filter identity (flatten textures))]\n    (.deleteTexture gl tex)))\n\n(defn tex-data-array [gl texture texture-type size]\n  (target-textures! gl texture)\n  (let [[x y width height]\n        (cond\n          (number? size) [0 0 size size]\n          (= (count size) 2) (into [0 0] size)\n          (= (count size) 4) size)\n        array (case texture-type\n                :f8 (js/Uint8Array. (* width height 4))\n                :u16 (js/Uint16Array. (* width height 4))\n                :u32 (js/Uint32Array. (* width height 4)))]\n    (case texture-type\n      :f8\n      (.readPixels gl x y width height gl.RGBA gl.UNSIGNED_BYTE array)\n      :u16\n      (.readPixels gl x y width height gl.RGBA_INTEGER gl.UNSIGNED_SHORT array)\n      :u32\n      (.readPixels gl x y width height gl.RGBA_INTEGER gl.UNSIGNED_INT array))\n    array))\n\n(defn copy-html-image-data! [gl tex element-or-id]\n  (let [element (if (string? element-or-id)\n                  (.getElementById js/document element-or-id)\n                  element-or-id)]\n    (.bindTexture gl gl.TEXTURE_2D tex)\n    (.texImage2D gl\n                 gl.TEXTURE_2D\n                 0\n                 gl.RGBA\n                 gl.RGBA\n                 gl.UNSIGNED_BYTE\n                 element)))\n\n(defn html-image-tex [gl element-or-id & [{:keys [wrap-mode\n                                                  filter-mode]\n                                           :or {wrap-mode :repeat\n                                                filter-mode :linear}}]]\n  (let [texture (.createTexture gl)]\n    (.bindTexture gl gl.TEXTURE_2D texture)\n    (set-tex-parameters gl texture filter-mode wrap-mode)\n    (copy-html-image-data! gl texture element-or-id)\n    texture))\n\n(defn create-webcam-video-element [callback & [{:keys [width \n                                                       height \n                                                       brightness]\n                                                :or {width 1024\n                                                     height 1024\n                                                     brightness 2}}]]\n  (let [media-constraints (clj->js {:audio false\n                                    :video {:width width\n                                            :height height\n                                            :brightness {:ideal brightness}}})\n        video (js/document.createElement \"video\")]\n    (.then (js/navigator.mediaDevices.getUserMedia media-constraints)\n           (fn [media-stream]\n             (set! video.srcObject media-stream)\n             (.setAttribute video \"playsinline\" true)\n             (set! video.onloadedmetadata\n                   (fn [e]\n                     (.play video)\n                     (callback video)))))))\n\n(defn max-tex-size [gl]\n  (.getParameter gl gl.MAX_TEXTURE_SIZE))\n"]}