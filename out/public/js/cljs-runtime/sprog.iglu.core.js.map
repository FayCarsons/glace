{"version":3,"sources":["sprog/iglu/core.cljc"],"mappings":"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","names":["var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","sprog.iglu.core/combine-chunks","seq31122","self__5752__auto__","cljs.core/seq","chunks","merged-functions","cljs.core.apply","cljs.core.partial","cljs.core/merge-with","cljs.core/merge","cljs.core.map","G__31123","cljs.core.assoc","sprog.iglu.core/apply-macros","p__31127","p__31128","map__31129","cljs.core/--destructure-map","cljs.core.get","vec__31130","cljs.core.nth","seq31124","G__31125","cljs.core/first","cljs.core/next","self__5751__auto__","macros","shader","exclude-defaults?","cljs.core.atom","new-shader","cljs.core/deref","cljs.core.concat","cljs.core/List","clojure.walk/prewalk","subexp","cljs.core/seq?","f","macro-fn","or__5043__auto__","sprog.iglu.macros/default-macros","macro-result","cljs.core/rest","cljs.core/map?","cljs.core.swap_BANG_","cljs.core/conj","cljs.core._EQ_","sprog.iglu.core.apply_macros","sprog.iglu.core/gensym-replace","replacements","expression","clojure.walk/prewalk-replace","cljs.core.into","k","cljs.core.gensym","cljs.core.symbol","p__31133","map__31134","sprog.iglu.core/preprocess","constants","G__31135","G__31139","sprog.iglu.core/iglu->glsl","args-arr__5791__auto__","argseq__5792__auto__","seq31137","G__31138","sprog.iglu.parse/parse","sprog.iglu.glsl/parsed-iglu->glsl","first-chunk","other-chunks","sprog.iglu.core.iglu__GT_glsl","cljs.core/cons"],"sourcesContent":["(ns sprog.iglu.core\n  (:require [sprog.util :as u]\n            [clojure.walk :refer [prewalk\n                                  prewalk-replace]]\n            [sprog.iglu.glsl :refer [clj-name->glsl-name\n                                     parsed-iglu->glsl]]\n            [sprog.iglu.parse :refer [parse]]\n            [sprog.iglu.macros :refer [default-macros]]))\n\n(defn combine-chunks [& chunks]\n  (let [merged-functions (apply (partial merge-with merge) (map :functions chunks))]\n    (cond-> (apply (partial merge-with merge) chunks)\n      merged-functions (assoc :functions merged-functions))))\n\n(defn apply-macros [{:keys [macros] :as shader} & [exclude-defaults?]]\n  (let [chunks (atom nil)\n        new-shader\n        (apply combine-chunks\n               (concat\n                (list (prewalk\n                       (fn [subexp]\n                         (if (seq? subexp)\n                           (let [f (first subexp)\n                                 macro-fn (or (when macros\n                                                (macros f))\n                                              (when-not exclude-defaults?\n                                                (default-macros f)))]\n                             (if macro-fn\n                               (let [macro-result (apply macro-fn\n                                                         (rest subexp))]\n                                 (if (map? macro-result)\n                                   (do (swap! chunks\n                                              conj\n                                              (:chunk macro-result))\n                                       (:expression macro-result))\n                                   macro-result))\n                               subexp))\n                           subexp))\n                       shader))\n                @chunks))]\n    (if (= new-shader shader)\n      new-shader\n      (apply-macros new-shader exclude-defaults?))))\n\n(defn gensym-replace [replacements expression]\n  (prewalk-replace\n   (into {}\n         (map (fn [k]\n                [k (gensym (symbol k))])\n              replacements))\n   expression))\n\n(defn preprocess [{:keys [constants] :as shader}]\n  (-> shader\n      (cond->> constants (prewalk-replace constants))\n      apply-macros))\n\n(defn iglu->glsl\n  ([shader] (->> shader\n                 preprocess\n                 parse\n                 parsed-iglu->glsl))\n  ([first-chunk & other-chunks]\n   (iglu->glsl (apply combine-chunks (cons first-chunk other-chunks)))))\n"]}