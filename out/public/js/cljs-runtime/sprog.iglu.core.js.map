{"version":3,"sources":["sprog/iglu/core.cljc"],"mappings":"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","names":["var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","sprog.iglu.core/combine-chunks","seq30920","self__5752__auto__","cljs.core/seq","chunks","merged-functions","cljs.core.apply","cljs.core.partial","cljs.core/merge-with","cljs.core/merge","cljs.core.map","G__30921","cljs.core.assoc","sprog.iglu.core/apply-macros","p__30924","p__30925","map__30926","cljs.core/--destructure-map","cljs.core.get","vec__30927","cljs.core.nth","seq30922","G__30923","cljs.core/first","cljs.core/next","self__5751__auto__","macros","shader","exclude-defaults?","cljs.core.atom","new-shader","cljs.core/deref","cljs.core.concat","cljs.core/List","clojure.walk/prewalk","subexp","cljs.core/seq?","f","macro-fn","or__5043__auto__","sprog.iglu.macros/default-macros","macro-result","cljs.core/rest","cljs.core/map?","cljs.core.swap_BANG_","cljs.core/conj","cljs.core._EQ_","sprog.iglu.core.apply_macros","p__30930","map__30931","sprog.iglu.core/preprocess","constants","G__30932","clojure.walk/prewalk-replace","G__30936","sprog.iglu.core/iglu->glsl","args-arr__5791__auto__","argseq__5792__auto__","seq30934","G__30935","sprog.iglu.parse/parse","sprog.iglu.glsl/parsed-iglu->glsl","first-chunk","other-chunks","sprog.iglu.core.iglu__GT_glsl","cljs.core/cons","sprog.iglu.core/inline-float-uniforms","seq30938","G__30939","numerical-param-names","param-uniform-names","cljs.core/hash-map","p1__30937#","cljs.core.mapcat","sprog.iglu.glsl/clj-name->glsl-name","cljs.core/zipmap","cljs.core/vals","cljs.core.repeat"],"sourcesContent":["(ns sprog.iglu.core\n  (:require [sprog.util :as u]\n            [clojure.walk :refer [prewalk\n                                  prewalk-replace]]\n            [sprog.iglu.glsl :refer [clj-name->glsl-name\n                                     parsed-iglu->glsl]]\n            [sprog.iglu.parse :refer [parse]]\n            [sprog.iglu.macros :refer [default-macros]]))\n\n(defn combine-chunks [& chunks]\n  (let [merged-functions (apply (partial merge-with merge) (map :functions chunks))]\n    (cond-> (apply (partial merge-with merge) chunks)\n      merged-functions (assoc :functions merged-functions))))\n\n(defn apply-macros [{:keys [macros] :as shader} & [exclude-defaults?]]\n  (let [chunks (atom nil)\n        new-shader\n        (apply combine-chunks\n               (concat\n                (list (prewalk\n                       (fn [subexp]\n                         (if (seq? subexp)\n                           (let [f (first subexp)\n                                 macro-fn (or (when macros\n                                                (macros f))\n                                              (when-not exclude-defaults?\n                                                (default-macros f)))]\n                             (if macro-fn\n                               (let [macro-result (apply macro-fn\n                                                         (rest subexp))]\n                                 (if (map? macro-result)\n                                   (do (swap! chunks\n                                              conj\n                                              (:chunk macro-result))\n                                       (:expression macro-result))\n                                   macro-result))\n                               subexp))\n                           subexp))\n                       shader))\n                @chunks))]\n    (if (= new-shader shader)\n      new-shader\n      (apply-macros new-shader exclude-defaults?))))\n\n(defn preprocess [{:keys [constants] :as shader}]\n  (-> shader\n      (cond->> constants (prewalk-replace constants))\n      #_(update :macros (partial merge default-macros))\n      apply-macros))\n\n(defn iglu->glsl\n  ([shader] (->> shader\n                 preprocess\n                 parse\n                 parsed-iglu->glsl))\n  ([first-chunk & other-chunks]\n   (iglu->glsl (apply combine-chunks (cons first-chunk other-chunks)))))\n\n(defn inline-float-uniforms [numerical-param-names & chunks]\n  (let [param-uniform-names\n        (apply hash-map\n               (mapcat #(list % (clj-name->glsl-name %))\n                       numerical-param-names))]\n    (prewalk-replace param-uniform-names\n                     (apply combine-chunks\n                            (concat chunks\n                                    (list\n                                     {:uniforms\n                                      (zipmap (vals param-uniform-names)\n                                              (repeat 'float))}))))))\n"]}