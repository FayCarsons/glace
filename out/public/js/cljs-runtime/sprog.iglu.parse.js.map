{"version":3,"sources":["sprog/iglu/parse.cljc"],"mappings":"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","names":["sprog.iglu.parse/int-literal?","x","and__5041__auto__","cljs.core/re-matches","cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/symbol?","cljs.spec.alpha/cat-impl","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","i__14744__auto__","v__14745__auto__","cljs.core.nth","cljs.core/map?","G__30927","cljs.core/string?","G__30935","G__30937","cljs.core/int?","G__30938","sprog.iglu.parse/fn-name?","cljs.core/Symbol","cljs.spec.alpha/rep-impl","cljs.core/number?","cljs.core/boolean?","cljs.spec.alpha/and-spec-impl","cljs.core/vector?","cljs.spec.alpha/rep+impl","cljs.spec.alpha.spec_impl","G__30939","cljs.core/coll?","G__30940","G__30945","G__30946","G__30949","G__30952","G__30953","cljs.spec.alpha/map-spec-impl","G__30954","sprog.iglu.parse/parse","content","parsed-content","cljs.spec.alpha/conform","cljs.core._EQ_","cljs.core.ex_info","expound.alpha.expound_str"],"sourcesContent":["(ns sprog.iglu.parse\n  (:require [clojure.spec.alpha :as s]\n            [expound.alpha :as expound]))\n\n(defn int-literal? [x]\n  (and (string? x)\n       (re-matches #\"[0-9]+\" x)))\n\n(s/def ::type (s/or\n               :type-name symbol?\n               :array (s/cat :type-name symbol? :size int-literal?)))\n(s/def ::declarations (s/map-of symbol? ::type))\n\n(s/def ::version string?)\n(s/def ::precision (s/map-of symbol? symbol?))\n(s/def ::layout (s/map-of symbol? int?))\n(s/def ::qualifiers (s/map-of symbol? string?))\n(s/def ::uniforms ::declarations)\n(s/def ::attributes ::declarations)\n(s/def ::varyings ::declarations)\n(s/def ::inputs ::declarations)\n(s/def ::outputs ::declarations)\n\n(defn fn-name? [x]\n  (or (symbol? x)\n      (number? x)\n      (string? x)))\n\n(s/def ::expression (s/cat\n                     :fn-name fn-name?\n                     :args (s/* ::subexpression)))\n(s/def ::subexpression\n  (s/or\n   :number number?\n   :int-literal int-literal?\n   :bool boolean?\n   :symbol symbol?\n   :string string?\n   :array-literal (s/and vector?\n                         (s/cat :type-name symbol?\n                                :array-length (s/or :int-literal int-literal?\n                                                    :number number?)\n                                :values (s/and vector?\n                                               (s/* ::subexpression))))\n   :accessor (s/and vector?\n                    (s/cat :array-name symbol?\n                           :array-index ::subexpression))\n   :expression ::expression))\n\n(s/def ::body (s/+ (s/spec ::subexpression)))\n(s/def ::signature (s/cat :in (s/coll-of ::type) :out ::type))\n(s/def ::function (s/cat :args (s/coll-of symbol?) :body ::body))\n(s/def ::functions (s/map-of symbol?\n                             (s/map-of ::signature\n                                       ::function\n                                       :conform-keys true)))\n(s/def ::structs (s/map-of symbol?\n                          (s/and vector?\n                                 (s/coll-of ::subexpression))))\n(s/def ::defines (s/map-of ::subexpression\n                           ::subexpression\n                           :conform-keys true))\n(s/def ::main ::body)\n\n(s/def ::shader (s/keys :opt-un [::version\n                                 ::precision\n                                 ::qualifiers\n                                 ::layout\n                                 ::uniforms\n                                 ::attributes\n                                 ::varyings\n                                 ::inputs\n                                 ::outputs\n                                 ::main\n                                 ::functions\n                                 ::structs\n                                 ::defines]))\n\n(defn parse [content]\n  (let [parsed-content (s/conform ::shader content)]\n    (if (= parsed-content ::s/invalid)\n      (throw (ex-info (expound/expound-str ::shader content) {}))\n      parsed-content)))\n"]}