{"version":3,"sources":["sprog/iglu/parse.cljc"],"mappings":"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","names":["sprog.iglu.parse/int-literal?","x","and__5041__auto__","cljs.core/re-matches","cljs.spec.alpha/def-impl","cljs.spec.alpha/or-spec-impl","cljs.core/symbol?","cljs.spec.alpha/cat-impl","cljs.core/int?","cljs.spec.alpha.every_impl","cljs.spec.alpha.tuple_impl","i__14744__auto__","v__14745__auto__","cljs.core.nth","cljs.core/map?","G__44180","cljs.core/string?","G__44182","G__44184","G__44186","sprog.iglu.parse/fn-name?","cljs.core/Symbol","cljs.spec.alpha/rep-impl","cljs.core/number?","cljs.spec.alpha/and-spec-impl","cljs.core/vector?","cljs.spec.alpha/rep+impl","cljs.spec.alpha.spec_impl","G__44204","cljs.core/coll?","G__44207","G__44209","G__44211","G__44216","G__44217","cljs.spec.alpha/map-spec-impl","G__44220","sprog.iglu.parse/parse","content","parsed-content","cljs.spec.alpha/conform","cljs.core._EQ_","cljs.core.ex_info","expound.alpha.expound_str"],"sourcesContent":["(ns sprog.iglu.parse\n  (:require [clojure.spec.alpha :as s]\n            [expound.alpha :as expound]))\n\n(defn int-literal? [x]\n  (and (string? x)\n       (re-matches #\"[0-9]+\" x)))\n\n(s/def ::type (s/or\n               :type-name symbol?\n               :array (s/cat :type-name symbol? :size int?)))\n(s/def ::declarations (s/map-of symbol? ::type))\n\n(s/def ::version string?)\n(s/def ::precision (s/map-of symbol? symbol?))\n(s/def ::layout (s/map-of symbol? int?))\n(s/def ::qualifiers (s/map-of symbol? string?))\n(s/def ::uniforms ::declarations)\n(s/def ::attributes ::declarations)\n(s/def ::varyings ::declarations)\n(s/def ::inputs ::declarations)\n(s/def ::outputs ::declarations)\n\n(defn fn-name? [x]\n  (or (symbol? x)\n      (number? x)\n      (string? x)))\n\n(s/def ::expression (s/cat\n                     :fn-name fn-name?\n                     :args (s/* ::subexpression)))\n(s/def ::subexpression\n  (s/or\n   :number number?\n   :int-literal int-literal?\n   :symbol symbol?\n   :string string?\n   :array-literal (s/and vector?\n                         (s/cat :type-name symbol?\n                                :array-length (s/or :int-literal int-literal?\n                                                    :number number?)\n                                :values (s/and vector?\n                                               (s/* ::subexpression))))\n   :accessor (s/and vector?\n                    (s/cat :array-name symbol?\n                           :array-index (s/or :int-literal int-literal?\n                                              :number number?)))\n   :expression ::expression))\n\n(s/def ::body (s/+ (s/spec ::subexpression)))\n(s/def ::signature (s/cat :in (s/coll-of ::type) :out ::type))\n(s/def ::function (s/cat :args (s/coll-of symbol?) :body ::body))\n(s/def ::functions (s/map-of symbol?\n                             (s/map-of ::signature\n                                       ::function\n                                       :conform-keys true)))\n(s/def ::structs (s/map-of symbol?\n                          (s/and vector?\n                                 (s/coll-of ::subexpression))))\n(s/def ::main ::body)\n\n(s/def ::shader (s/keys :opt-un [::version\n                                 ::precision\n                                 ::qualifiers\n                                 ::layout\n                                 ::uniforms\n                                 ::attributes\n                                 ::varyings\n                                 ::inputs\n                                 ::outputs\n                                 ::main\n                                 ::functions\n                                 ::structs]))\n\n(defn parse [content]\n  (let [parsed-content (s/conform ::shader content)]\n    (if (= parsed-content ::s/invalid)\n      (throw (ex-info (expound/expound-str ::shader content) {}))\n      parsed-content)))\n"]}