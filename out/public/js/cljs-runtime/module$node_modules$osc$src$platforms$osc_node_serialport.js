shadow$provide.module$node_modules$osc$src$platforms$osc_node_serialport=function(global,require,module,exports){var osc=osc||require("module$node_modules$osc$src$osc"),SerialPort=require("module$node_modules$serialport$dist$index");osc.supportsSerial=!0;osc.SerialPort=function(options){this.on("open",this.listen.bind(this));osc.SLIPPort.call(this,options);this.options.bitrate=this.options.bitrate||9600;(this.serialPort=options.serialPort)&&this.emit("open",this.serialPort)};global=osc.SerialPort.prototype=
Object.create(osc.SLIPPort.prototype);global.constructor=osc.SerialPort;global.open=function(){if(this.serialPort)this.once("close",this.open.bind(this)),this.close();else{var that=this;this.serialPort=new SerialPort(this.options.devicePath,{baudRate:this.options.bitrate,autoOpen:!1});this.serialPort.on("error",function(err){that.emit("error",err)});this.serialPort.on("open",function(){that.emit("open",that.serialPort)});this.serialPort.open()}};global.listen=function(){var that=this;this.serialPort.on("data",
function(data){that.emit("data",data,void 0)});this.serialPort.on("close",function(){that.emit("close")});that.emit("ready")};global.sendRaw=function(encoded){this.serialPort&&this.serialPort.isOpen?this.serialPort.write(encoded):osc.fireClosedPortSendError(this)};global.close=function(){this.serialPort&&this.serialPort.close()}}
//# sourceMappingURL=module$node_modules$osc$src$platforms$osc_node_serialport.js.map
