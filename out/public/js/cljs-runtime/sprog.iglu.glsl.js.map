{"version":3,"sources":["sprog/iglu/glsl.cljc"],"mappings":"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","names":["sprog.iglu.glsl/parse-int","s","js/parseInt","sprog.iglu.glsl/num->glsl-str","num","cljs.core.apply","cljs.core/str","cljs.core/reverse","p1__44237#","cljs.core/some","cljs.core.not_EQ_","cljs.core/first","cljs.core/iterate","cljs.core/rest","sprog.iglu.glsl/clj-name->glsl-name","clj-name","cljs.core.symbol","clojure.string/replace","G__44239","cljs.core/Keyword","cljs.core.subs","p__44243","vec__44244","cljs.core.nth","sprog.iglu.glsl/parse-type","k","v","G__44247","js/Error","js/sprog","js/sprog.iglu","js/sprog.iglu.glsl","js/sprog.iglu.glsl.->function-call","method-table__5639__auto__","cljs.core.atom","prefer-table__5640__auto__","method-cache__5641__auto__","cached-hierarchy__5642__auto__","hierarchy__5643__auto__","cljs.core.get","fexpr__44255","cljs.core/MultiFn","sprog.iglu.glsl/->function-call","fn-name","args","cljs.core._EQ_","sprog.iglu.parse/int-literal?","fexpr__44256","fexpr__44258","fexpr__44259","fexpr__44260","clojure.string/starts-with?","js/sprog.iglu.glsl.->subexpression","fexpr__44262","sprog.iglu.glsl/->subexpression","val","js/sprog.iglu.glsl.->statement","fexpr__44264","sprog.iglu.glsl/->statement","_","cljs.core.map","cljs.core/count","cljs.core.ex_info","vec__44269","sym","G__44276","vec__44277","vec__44280","type","vec__44284","cljs.core.conj","vec__44292","condition","true-case","false-case","clojure.string.join","cljs.core.mapv","p__44335","vec__44336","expression","map__44341","cljs.core/--destructure-map","p__44345","vec__44346","map__44349","ret","p__44351","vec__44352","map__44355","array-name","array-index","vec__44365","array-index-type","array-index-value","G__44368","p__44370","vec__44371","number","p__44377","vec__44379","literal","p__44384","vec__44387","symbol","p__44390","vec__44391","string","p__44398","vec__44399","map__44402","type-name","array-length","values","vec__44423","G__44426","cljs.core.interleave","cljs.core.repeat","p__44434","vec__44439","sprog.iglu.glsl/->precision","precision","p__44450","vec__44451","sprog.iglu.glsl/->uniform","name","p__44466","vec__44471","sprog.iglu.glsl/->attribute","p__44487","vec__44488","sprog.iglu.glsl/->varying","p__44492","vec__44493","sprog.iglu.glsl/->inout","in-or-out","qualifiers","qualifier","sprog.iglu.glsl/->in","name-type-pair","sprog.iglu.glsl/->out","p__44504","vec__44505","sprog.iglu.glsl/->struct","fields","p__44516","vec__44517","field-name","field-type","cljs.core.partition","p__44520","vec__44522","sprog.iglu.glsl/->function","signature-function-map","p__44526","vec__44527","map__44530","signature","body","map__44531","in","out","cljs.core/seq","cljs.core.into","body-lines","cljs.core/vec","cljs.core/butlast","cljs.core/last","sprog.iglu.glsl/indent","level","line","sprog.iglu.glsl/stringify","lines","clojure.string/ends-with?","cljs.core/second","cljs.core.reduce","cljs.core.partial","cljs.core.drop","sprog.iglu.glsl/inner-symbols","form","p1__44607#","clojure.walk/walk","cljs.core/coll?","cljs.core/map?","G__44608","cljs.core/vals","cljs.core/Symbol","clojure.set/union","sprog.iglu.glsl/sort-expressions","expressions","dependencies","remaining-names","cljs.core/set","cljs.core/keys","sorted-expressions","cljs.core/empty?","next-expression-name","p1__44609#","clojure.set.intersection","cljs.core.disj","sprog.iglu.glsl/sort-fns","functions","p__44613","vec__44614","fn-content","p1__44610#","sprog.iglu.glsl/sort-structs","structs","p__44617","vec__44618","struct-name","struct-content","sprog.iglu.glsl/layout-qualifiers","layout","p__44621","vec__44622","location","p__44625","map__44626","sprog.iglu.glsl/parsed-iglu->glsl","version","uniforms","attributes","varyings","inputs","outputs","main","parsed-iglu","full-functions","G__44627","cljs.core.assoc","full-qualifiers","cljs.core.merge","G__44628","cljs.core.mapcat"],"sourcesContent":["(ns sprog.iglu.glsl\n  (:require [sprog.util :as u]\n            [clojure.string\n             :refer [join\n                     starts-with?\n                     ends-with?\n                     replace]\n             :rename {replace string-replace}]\n            [clojure.walk :refer [walk]]\n            [clojure.set :refer [union\n                                 intersection]]\n            [sprog.iglu.parse :refer [int-literal?]]))\n\n(defn parse-int [s]\n  #?(:clj (Integer/parseInt s))\n  #?(:cljs (js/parseInt s)))\n\n(defn num->glsl-str [num]\n  (apply str\n         (reverse\n          (some #(when (not= (first %) \\0)\n                   %)\n                (iterate rest\n                         (reverse\n                          #?(:clj (format \"%.20f\" num)\n                             :cljs (.toFixed num 20))))))))\n\n(defn clj-name->glsl-name [clj-name]\n  (symbol\n   (string-replace\n    (cond-> (str clj-name)\n      (keyword? clj-name) (subs 1))\n    \"-\"\n    \"_\")))\n\n(defn- parse-type [[k v]]\n  (case k\n    :type-name v\n    :array (str (:type-name v) \"[\" (:size v) \"]\")))\n\n;; multimethods\n\n(defmulti ->function-call\n  (fn [fn-name args]\n    (cond\n      (= 'do fn-name) ::do-block\n      (number? fn-name) ::number\n      (int-literal? fn-name) ::int-literal\n      ('#{? if} fn-name) ::inline-conditional\n      ('#{+ - * / % < > <= >= == != || && \"^^\"} fn-name) ::operator\n      (= '= fn-name) ::assignment\n      ('#{+= -= *= \"/=\"} fn-name) ::augment\n      (#{\"if\" \"else if\" \"switch\" \"for\" \"while\"} fn-name) ::block-with-expression\n      (string? fn-name) ::block\n      (-> fn-name str (starts-with? \"=\")) ::local-assignment\n      (-> fn-name str (starts-with? \".\")) ::property\n      :else fn-name)))\n\n(defmulti ->subexpression\n  (fn [val] (first val)))\n\n(defmulti ->statement\n  (fn [val] (first val)))\n\n;; ->function-call\n\n(defmethod ->function-call ::do-block [_ args]\n  (map ->statement args))\n\n(defmethod ->function-call ::augment [fn-name args]\n  (when-not (= 2 (count args))\n    (throw (ex-info (str fn-name \" requires 2 args\") {})))\n  (let [[sym val] args]\n    (str (->subexpression sym) \" \" fn-name \" \" (->subexpression val))))\n\n(defmethod ->function-call ::assignment [fn-name args]\n  (case (count args)\n    2 (let [[sym val] args]\n        (str (->subexpression sym) \" = \" (->subexpression val)))\n    3 (let [[type sym val] args]\n        (str\n         (->subexpression type)\n         \" \"\n         (->subexpression sym)\n         \" = \"\n         (->subexpression val)))\n    (throw (ex-info (str fn-name \" requires 2 args\") {}))))\n\n(defmethod ->function-call ::local-assignment [fn-name args]\n  (when-not (= 2 (count args))\n    (throw (ex-info (str fn-name \" requires 2 args\") {})))\n  (let [[sym val] args]\n    (str\n     (-> fn-name str (subs 1))\n     \" \"\n     (->subexpression sym)\n     \" = \"\n     (->subexpression val))))\n\n(defmethod ->function-call ::block-with-expression [fn-name args]\n  (when (< (count args) 1)\n    (throw (ex-info (str fn-name \" requires 1 arg\") {})))\n  (conj (map ->statement (rest args))\n        (str fn-name \" \" (->subexpression (first args)))\n        :block))\n\n(defmethod ->function-call ::block [fn-name args]\n  (when (< (count args) 1)\n    (throw (ex-info (str fn-name \" requires 1 arg\") {})))\n  (conj (map ->statement args) \n        fn-name\n        :block))\n\n(defmethod ->function-call ::inline-conditional [fn-name args]\n  (when-not (= 3 (count args))\n    (throw (ex-info (str fn-name \" requires 3 args\") {})))\n  (let [[condition true-case false-case] args]\n    (str\n     (->subexpression condition)\n     \" ? \" (->subexpression true-case)\n     \" : \" (->subexpression false-case))))\n\n(defmethod ->function-call ::operator [fn-name args]\n  (join (str \" \" fn-name \" \") (mapv ->subexpression args)))\n\n(defmethod ->function-call ::property [fn-name args]\n  (when (not= (count args) 1)\n    (throw (ex-info (str fn-name \" requires exactly one arg\") {})))\n  (str (-> args first ->subexpression) \".\" (-> fn-name str (subs 1))))\n\n(defmethod ->function-call ::number [fn-name args]\n  (when (not= (count args) 1)\n    (throw (ex-info (str fn-name \" requires exactly one arg\") {})))\n  (str (->subexpression (first args)) \"[\" fn-name \"]\"))\n\n(defmethod ->function-call ::int-literal [fn-name args]\n  (when (not= (count args) 1)\n    (throw (ex-info (str fn-name \" requires exactly one arg\") {})))\n  (str (->subexpression (first args)) \"[\" fn-name \"]\"))\n\n(defmethod ->function-call :default [fn-name args]\n  (str (clj-name->glsl-name fn-name)\n       \"(\"\n       (join \", \" (mapv ->subexpression args))\n       \")\"))\n\n;; ->statement\n\n(defmethod ->statement :expression [[_ expression]]\n  (let [{:keys [fn-name args]} expression]\n    (->function-call fn-name args)))\n\n(defmethod ->statement :default [val]\n  (->subexpression val))\n\n;; ->expression\n\n(defmethod ->subexpression :expression [[_ expression]]\n  (let [{:keys [fn-name args]} expression\n        ret (->function-call fn-name args)]\n    (if (string? ret)\n      (str \"(\" ret \")\")\n      ret)))\n\n(defmethod ->subexpression :accessor [[_ {:keys [array-name array-index]}]]\n  (str array-name\n       \"[\"\n       (let [[array-index-type array-index-value] array-index]\n         (case array-index-type\n           :int-literal (->subexpression array-index)\n           :number (str array-index-value)))\n       \"]\"))\n\n(defmethod ->subexpression :number [[_ number]]\n  (num->glsl-str number))\n\n(defmethod ->subexpression :int-literal [[_ literal]]\n  (parse-int (str literal)))\n\n(defmethod ->subexpression :symbol [[_ symbol]]\n  (clj-name->glsl-name symbol))\n\n(defmethod ->subexpression :string [[_ string]]\n  string)\n\n(defmethod ->subexpression :array-literal [[_ {:keys [type-name \n                                                      array-length \n                                                      values]}]]\n  (str type-name\n       \"[\"\n       (let [[array-index-type array-index-value] array-length]\n         (case array-index-type\n           :int-literal (->subexpression array-length)\n           :number (str array-index-value)))\n       \"](\"\n       (apply str\n              (rest (interleave (repeat \", \")\n                                (map ->subexpression values))))\n       \")\"))\n\n;; var definitions\n\n(defn ->precision [[type precision]]\n  (str \"precision \" precision \" \" type))\n\n(defn ->uniform [[name type]]\n  (str \"uniform \" (parse-type type) \" \" (clj-name->glsl-name name)))\n\n(defn ->attribute [[name type]]\n  (str \"attribute \" (parse-type type) \" \" (clj-name->glsl-name name)))\n\n(defn ->varying [[name type]]\n  (str \"varying \" (parse-type type) \" \" (clj-name->glsl-name name)))\n\n(defn ->inout [in-or-out qualifiers [name type]]\n  (str (when qualifiers\n         (let [qualifier (qualifiers name)]\n           (when qualifier (str qualifier \" \"))))\n       in-or-out\n       \" \"\n       (parse-type type)\n       \" \"\n       (clj-name->glsl-name name)))\n\n(defn ->in [qualifiers name-type-pair]\n  (->inout \"in\" qualifiers name-type-pair))\n\n(defn ->out [qualifiers name-type-pair]\n  (->inout \"out\" qualifiers name-type-pair))\n\n(defn ->struct [[name fields]]\n  (str \"struct \"\n       name\n       \" {\\n\"\n       (apply str\n              (map (fn [[field-name field-type]]\n                     (str \"  \" field-type \" \" field-name \";\\n\"))\n                   (partition 2 (map ->subexpression fields))))\n       \"}\"))\n\n(defn ->function [[name signature-function-map]]\n  (map (fn [[signature {:keys [args body]}]]\n         (let [{:keys [in out]} signature]\n           (when (not= (count in) (count args))\n             (throw (ex-info\n                     (str \"Function has args signature of a different \"\n                          \"length than its args definition\")\n                     {:fn name\n                      :signature in\n                      :definition args})))\n           (let [signature (str (parse-type out)\n                                \" \"\n                                (clj-name->glsl-name name)\n                                \"(\"\n                                (join \", \"\n                                      (mapv (fn [type name]\n                                              (str (parse-type type)\n                                                   \" \"\n                                                   (clj-name->glsl-name name)))\n                                            in args))\n                                \")\")]\n             (conj (seq (into [signature]\n                              (let [body-lines (mapv ->statement body)]\n                                (if (= '[:type-name void] out)\n                                  body-lines\n                                  (conj\n                                   (vec (butlast body-lines))\n                                   (str \"return \" (last body-lines)))))))\n                   :block))))\n       signature-function-map))\n\n;; compiler fn\n\n(defn indent [level line]\n  (str (join (repeat (* level 2) \" \"))\n       line))\n\n(defn stringify [level lines line]\n  (cond\n    (string? line)\n    (conj lines\n          (if (or (starts-with? line \"#\")\n                  (ends-with? line \";\"))\n            line\n            (str (indent level line) \";\")))\n    (= :block (first line))\n    (-> lines\n        (conj (indent level (second line)))\n        (conj (indent level \"{\"))\n        (into (reduce (partial stringify (inc level)) [] (drop 2 line)))\n        (conj (indent level \"}\")))\n    :else\n    (into lines (reduce (partial stringify level) [] line))))\n\n(defn inner-symbols [form]\n  (walk (fn [s]\n          (if (coll? s)\n            (if (map? s)\n              (inner-symbols (vals s))\n              (inner-symbols s))\n            (if (symbol? s)\n              #{s}\n              #{})))\n        #(apply union %)\n        form))\n\n(defn sort-expressions [expressions dependencies]\n  (loop [remaining-names (set (keys expressions))\n         sorted-expressions []]\n    (if (empty? remaining-names)\n      (seq sorted-expressions)\n      (let [next-expression-name (some #(when (empty?\n                                               (intersection remaining-names\n                                                             (dependencies %)))\n                                          %)\n                                       remaining-names)]\n        (if next-expression-name\n          (recur (disj remaining-names next-expression-name)\n                 (conj sorted-expressions \n                       [next-expression-name\n                        (expressions next-expression-name)]))\n          (throw (ex-info \"Cyclic dependency detected\"\n                          {:functions (str remaining-names)})))))))\n\n(defn sort-fns [functions]\n  (sort-expressions\n   functions\n   (into {}\n         (mapv (fn [[fn-name fn-content]]\n                 [fn-name\n                  (intersection (set (keys functions))\n                                (apply union\n                                       (map #(inner-symbols\n                                              (:body (second %)))\n                                            fn-content)))])\n               functions))))\n\n(defn sort-structs [structs]\n  (sort-expressions\n   structs\n   (into {}\n         (mapv (fn [[struct-name struct-content]]\n                 [struct-name\n                  (intersection\n                   (set (keys structs))\n                   (inner-symbols struct-content))])\n               structs))))\n\n(defn layout-qualifiers [layout]\n  (into {}\n        (map (fn [[name location]]\n               [name\n                (str \"layout(location = \"\n                     location\n                     \")\")])\n             layout)))\n\n(defn parsed-iglu->glsl [{:keys [version\n                                 precision\n                                 uniforms\n                                 structs\n                                 attributes\n                                 varyings\n                                 inputs\n                                 outputs\n                                 qualifiers\n                                 layout\n                                 main\n                                 functions]\n                          :as parsed-iglu}]\n  (let [full-functions (cond-> functions\n                         main (assoc 'main {{:in [] :out '[:type-name void]}\n                                            {:args [] :body main}}))\n        full-qualifiers (merge qualifiers (layout-qualifiers layout))]\n    (->> (into (cond-> []\n                 version (conj (str \"#version \" version))\n                 precision (into (mapv ->precision precision))\n                 uniforms (into (mapv ->uniform uniforms))\n                 attributes (into (mapv ->attribute attributes))\n                 varyings (into (mapv ->varying varyings))\n                 inputs (into (mapv (partial ->in full-qualifiers) inputs))\n                 outputs (into (mapv (partial ->out full-qualifiers) outputs))\n                 structs (into (mapv ->struct (sort-structs structs))))\n               (vec (mapcat ->function (sort-fns full-functions))))\n         (reduce (partial stringify 0) [])\n         (join \\newline))))\n"]}