{"version":3,"sources":["sprog/iglu/glsl.cljc"],"mappings":"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","names":["sprog.iglu.glsl/parse-int","s","js/parseInt","sprog.iglu.glsl/num->glsl-str","num","cljs.core.apply","cljs.core/str","cljs.core/reverse","p1__30954#","cljs.core/some","cljs.core.not_EQ_","cljs.core/first","cljs.core/iterate","cljs.core/rest","sprog.iglu.glsl/multichar-escape","escape-pairs","escaped-str","remaining-str","cljs.core/empty?","temp__5802__auto__","vec__30966","cljs.core.nth","new-escaped-str","new-remaining-str","p__30962","vec__30963","replace-str","replacement-str","cljs.core/count","cljs.core._EQ_","cljs.core.subs","sprog.iglu.glsl/clj-name->glsl-name","clj-name","cljs.core.symbol","G__30969","cljs.core/Keyword","p__30970","vec__30971","sprog.iglu.glsl/parse-type","k","v","G__30974","js/Error","js/sprog","js/sprog.iglu","js/sprog.iglu.glsl","js/sprog.iglu.glsl.->function-call","method-table__5639__auto__","cljs.core.atom","prefer-table__5640__auto__","method-cache__5641__auto__","cached-hierarchy__5642__auto__","hierarchy__5643__auto__","cljs.core.get","fexpr__30975","cljs.core/MultiFn","sprog.iglu.glsl/->function-call","fn-name","args","sprog.iglu.parse/int-literal?","fexpr__30976","fexpr__30977","fexpr__30978","fexpr__30979","clojure.string/starts-with?","js/sprog.iglu.glsl.->subexpression","fexpr__30980","sprog.iglu.glsl/->subexpression","val","js/sprog.iglu.glsl.->statement","fexpr__30981","sprog.iglu.glsl/->statement","_","cljs.core.map","cljs.core.ex_info","vec__30982","sym","G__30985","vec__30986","vec__30989","type","vec__30992","cljs.core.conj","vec__30995","condition","true-case","false-case","clojure.string.join","cljs.core.mapv","p__31000","vec__31001","expression","map__31004","cljs.core/--destructure-map","p__31007","vec__31008","map__31011","ret","p__31014","vec__31015","map__31018","array-name","array-index","p__31019","vec__31020","number","p__31023","vec__31024","literal","p__31029","vec__31030","symbol","p__31033","vec__31034","bool","p__31039","vec__31040","string","p__31043","vec__31044","map__31047","type-name","array-length","values","vec__31055","array-index-type","array-index-value","G__31058","cljs.core.interleave","cljs.core.repeat","p__31061","vec__31062","sprog.iglu.glsl/->precision","precision","p__31065","vec__31067","sprog.iglu.glsl/->uniform","name","p__31073","vec__31074","sprog.iglu.glsl/->attribute","p__31085","vec__31086","sprog.iglu.glsl/->varying","p__31089","vec__31090","sprog.iglu.glsl/->inout","in-or-out","qualifiers","qualifier","sprog.iglu.glsl/->in","name-type-pair","sprog.iglu.glsl/->out","p__31096","vec__31097","sprog.iglu.glsl/->struct","fields","p__31104","vec__31105","field-name","field-type","cljs.core.partition","sprog.iglu.glsl/strip-outer-parentheses","cljs.core/butlast","p__31109","vec__31110","sprog.iglu.glsl/->define","signature","body","p__31113","vec__31117","sprog.iglu.glsl/->function","signature-function-map","p__31120","vec__31121","map__31124","map__31128","in","out","cljs.core/seq","cljs.core.into","body-lines","cljs.core/vec","cljs.core/last","sprog.iglu.glsl/indent","level","line","sprog.iglu.glsl/stringify","lines","clojure.string/ends-with?","cljs.core/second","cljs.core.reduce","cljs.core.partial","cljs.core.drop","sprog.iglu.glsl/inner-symbols","form","p1__31138#","clojure.walk/walk","cljs.core/coll?","cljs.core/map?","G__31139","cljs.core/vals","cljs.core/Symbol","clojure.set/union","sprog.iglu.glsl/sort-expressions","expressions","dependencies","remaining-names","cljs.core/set","cljs.core/keys","sorted-expressions","next-expression-name","p1__31140#","clojure.set.intersection","cljs.core.disj","sprog.iglu.glsl/sort-fns","functions","p__31146","vec__31147","fn-content","p1__31145#","sprog.iglu.glsl/sort-structs","structs","p__31150","vec__31151","struct-name","struct-content","sprog.iglu.glsl/layout-qualifiers","layout","p__31154","vec__31155","location","p__31158","map__31159","sprog.iglu.glsl/parsed-iglu->glsl","version","uniforms","defines","attributes","varyings","inputs","outputs","main","parsed-iglu","full-functions","G__31160","cljs.core.assoc","full-qualifiers","cljs.core.merge","G__31161","cljs.core.mapcat"],"sourcesContent":["(ns sprog.iglu.glsl\n  (:require [sprog.util :as u]\n            [clojure.string\n             :refer [escape\n                     join\n                     starts-with?\n                     ends-with?\n                     replace]\n             :rename {replace string-replace}]\n            [clojure.walk :refer [walk]]\n            [clojure.set :refer [union\n                                 intersection]]\n            [sprog.iglu.parse :refer [int-literal?]]))\n\n(defn parse-int [s]\n  #?(:clj (Integer/parseInt s))\n  #?(:cljs (js/parseInt s)))\n\n(defn num->glsl-str [num]\n  (apply str\n         (reverse\n          (some #(when (not= (first %) \\0)\n                   %)\n                (iterate rest\n                         (reverse\n                          #?(:clj (format \"%.20f\" num)\n                             :cljs (.toFixed num 20))))))))\n\n(defn multichar-escape [s escape-pairs]\n  (loop [escaped-str \"\"\n         remaining-str s]\n    (if (empty? remaining-str)\n      escaped-str\n      (if-let [[new-escaped-str new-remaining-str]\n               (some (fn [[replace-str replacement-str]]\n                       (when (and (>= (count remaining-str)\n                                      (count replace-str))\n                                  (= (subs remaining-str 0 (count replace-str))\n                                     replace-str))\n                         [(str escaped-str replacement-str)\n                          (subs remaining-str (count replace-str))]))\n                     escape-pairs)]\n        (recur new-escaped-str new-remaining-str)\n        (recur (str escaped-str (first remaining-str))\n               (subs remaining-str 1))))))\n\n(defn clj-name->glsl-name [clj-name]\n  (symbol\n   (multichar-escape (cond-> (str clj-name)\n                       (keyword? clj-name) (subs 1))\n                     [[\"->\" \"ARROW\"]\n                      [\"-\" \"_\"]\n                      [\"?\" \"QUESTION_MARK\"]])))\n\n(defn- parse-type [[k v]]\n  (case k\n    :type-name v\n    :array (str (:type-name v) \"[\" (:size v) \"]\")))\n\n;; multimethods\n\n(defmulti ->function-call\n  (fn [fn-name args]\n    (cond\n      (= 'do fn-name) ::do-block\n      (number? fn-name) ::number\n      (int-literal? fn-name) ::int-literal\n      ('#{? if} fn-name) ::inline-conditional\n      ('#{+ - * / % < > <= >= == != || && \"^^\" \"^\" \"^=\" >> <<} fn-name) ::operator\n      (= '= fn-name) ::assignment\n      ('#{+= -= *= \"/=\"} fn-name) ::augment\n      (#{\"if\" \"else if\" \"switch\" \"for\" \"while\"} fn-name) ::block-with-expression\n      (string? fn-name) ::block\n      (-> fn-name str (starts-with? \"=\")) ::local-assignment\n      (-> fn-name str (starts-with? \".\")) ::property\n      :else fn-name)))\n\n(defmulti ->subexpression\n  (fn [val] (first val)))\n\n(defmulti ->statement\n  (fn [val] (first val)))\n\n;; ->function-call\n\n(defmethod ->function-call ::do-block [_ args]\n  (map ->statement args))\n\n(defmethod ->function-call ::augment [fn-name args]\n  (when-not (= 2 (count args))\n    (throw (ex-info (str fn-name \" requires 2 args\") {})))\n  (let [[sym val] args]\n    (str (->subexpression sym) \" \" fn-name \" \" (->subexpression val))))\n\n(defmethod ->function-call ::assignment [fn-name args]\n  (case (count args)\n    2 (let [[sym val] args]\n        (str (->subexpression sym) \" = \" (->subexpression val)))\n    3 (let [[type sym val] args]\n        (str\n         (->subexpression type)\n         \" \"\n         (->subexpression sym)\n         \" = \"\n         (->subexpression val)))\n    (throw (ex-info (str fn-name \" requires 2 args\") {}))))\n\n(defmethod ->function-call ::local-assignment [fn-name args]\n  (when-not (= 2 (count args))\n    (throw (ex-info (str fn-name \" requires 2 args\") {})))\n  (let [[sym val] args]\n    (str\n     (-> fn-name str (subs 1))\n     \" \"\n     (->subexpression sym)\n     \" = \"\n     (->subexpression val))))\n\n(defmethod ->function-call ::block-with-expression [fn-name args]\n  (when (< (count args) 1)\n    (throw (ex-info (str fn-name \" requires 1 arg\") {})))\n  (conj (map ->statement (rest args))\n        (str fn-name \" (\" (->subexpression (first args)) \")\")\n        :block))\n\n(defmethod ->function-call ::block [fn-name args]\n  (when (< (count args) 1)\n    (throw (ex-info (str fn-name \" requires 1 arg\") {})))\n  (conj (map ->statement args) \n        fn-name\n        :block))\n\n(defmethod ->function-call ::inline-conditional [fn-name args]\n  (when-not (= 3 (count args))\n    (throw (ex-info (str fn-name \" requires 3 args\") {})))\n  (let [[condition true-case false-case] args]\n    (str\n     (->subexpression condition)\n     \" ? \" (->subexpression true-case)\n     \" : \" (->subexpression false-case))))\n\n(defmethod ->function-call ::operator [fn-name args]\n  (cond \n    (and (= 1 (count args)) (= fn-name '-))\n    (str \"-\" (->subexpression (first args)))\n    \n    (and (= 1 (count args)) (= fn-name '/))\n    (str \"1./\" (->subexpression (first args)))\n    \n    :else (join (str \" \" fn-name \" \") (mapv ->subexpression args))))\n\n(defmethod ->function-call ::property [fn-name args]\n  (when (not= (count args) 1)\n    (throw (ex-info (str fn-name \" requires exactly one arg\") {})))\n  (str (-> args first ->subexpression) \".\" (-> fn-name str (subs 1))))\n\n(defmethod ->function-call ::number [fn-name args]\n  (when (not= (count args) 1)\n    (throw (ex-info (str fn-name \" requires exactly one arg\") {})))\n  (str (->subexpression (first args)) \"[\" fn-name \"]\"))\n\n(defmethod ->function-call ::int-literal [fn-name args]\n  (when (not= (count args) 1)\n    (throw (ex-info (str fn-name \" requires exactly one arg\") {})))\n  (str (->subexpression (first args)) \"[\" fn-name \"]\"))\n\n(defmethod ->function-call :default [fn-name args]\n  (str (clj-name->glsl-name fn-name)\n       \"(\"\n       (join \", \" (mapv ->subexpression args))\n       \")\"))\n\n;; ->statement\n\n(defmethod ->statement :expression [[_ expression]]\n  (let [{:keys [fn-name args]} expression]\n    (->function-call fn-name args)))\n\n(defmethod ->statement :default [val]\n  (->subexpression val))\n\n;; ->expression\n\n(defmethod ->subexpression :expression [[_ expression]]\n  (let [{:keys [fn-name args]} expression\n        ret (->function-call fn-name args)]\n    (if (string? ret)\n      (str \"(\" ret \")\")\n      ret)))\n\n(defmethod ->subexpression :accessor [[_ {:keys [array-name array-index]}]]\n  (str (clj-name->glsl-name array-name)\n       \"[\"\n       (->subexpression array-index)\n       \"]\"))\n\n(defmethod ->subexpression :number [[_ number]]\n  (num->glsl-str number))\n\n(defmethod ->subexpression :int-literal [[_ literal]]\n  (parse-int (str literal)))\n\n(defmethod ->subexpression :symbol [[_ symbol]]\n  (clj-name->glsl-name symbol))\n\n(defmethod ->subexpression :bool [[_ bool]]\n  (str bool))\n\n(defmethod ->subexpression :string [[_ string]]\n  string)\n\n(defmethod ->subexpression :array-literal [[_ {:keys [type-name \n                                                      array-length \n                                                      values]}]]\n  (str type-name\n       \"[\"\n       (let [[array-index-type array-index-value] array-length]\n         (case array-index-type\n           :int-literal (->subexpression array-length)\n           :number (str array-index-value)))\n       \"](\"\n       (apply str\n              (rest (interleave (repeat \", \")\n                                (map ->subexpression values))))\n       \")\"))\n\n;; var definitions\n\n(defn ->precision [[type precision]]\n  (str \"precision \" precision \" \" type))\n\n(defn ->uniform [[name type]]\n  (str \"uniform \" (parse-type type) \" \" (clj-name->glsl-name name)))\n\n(defn ->attribute [[name type]]\n  (str \"attribute \" (parse-type type) \" \" (clj-name->glsl-name name)))\n\n(defn ->varying [[name type]]\n  (str \"varying \" (parse-type type) \" \" (clj-name->glsl-name name)))\n\n(defn ->inout [in-or-out qualifiers [name type]]\n  (str (when qualifiers\n         (let [qualifier (qualifiers name)]\n           (when qualifier (str qualifier \" \"))))\n       in-or-out\n       \" \"\n       (parse-type type)\n       \" \"\n       (clj-name->glsl-name name)))\n\n(defn ->in [qualifiers name-type-pair]\n  (->inout \"in\" qualifiers name-type-pair))\n\n(defn ->out [qualifiers name-type-pair]\n  (->inout \"out\" qualifiers name-type-pair))\n\n(defn ->struct [[name fields]]\n  (str \"struct \"\n       name\n       \" {\\n\"\n       (apply str\n              (map (fn [[field-name field-type]]\n                     (str \"  \" field-type \" \" field-name \";\\n\"))\n                   (partition 2 (map ->subexpression fields))))\n       \"}\"))\n\n(defn strip-outer-parentheses [s]\n  (if (= \"(\" (first s))\n    (apply str (rest (butlast s)))\n    s))\n\n(defn ->define [[signature body]]\n  (str \"#define \"\n       (strip-outer-parentheses (->subexpression signature))\n       \" \"\n       (strip-outer-parentheses (->subexpression body))))\n\n(defn ->function [[name signature-function-map]]\n  (map (fn [[signature {:keys [args body]}]]\n         (let [{:keys [in out]} signature]\n           (when (not= (count in) (count args))\n             (throw (ex-info\n                     (str \"Function has args signature of a different \"\n                          \"length than its args definition\")\n                     {:fn name\n                      :signature in\n                      :definition args})))\n           (let [signature (str (parse-type out)\n                                \" \"\n                                (clj-name->glsl-name name)\n                                \"(\"\n                                (join \", \"\n                                      (mapv (fn [type name]\n                                              (str (parse-type type)\n                                                   \" \"\n                                                   (clj-name->glsl-name name)))\n                                            in args))\n                                \")\")]\n             (conj (seq (into [signature]\n                              (let [body-lines (mapv ->statement body)]\n                                (if (= '[:type-name void] out)\n                                  body-lines\n                                  (conj\n                                   (vec (butlast body-lines))\n                                   (str \"return \" (last body-lines)))))))\n                   :block))))\n       signature-function-map))\n\n;; compiler fn\n\n(defn indent [level line]\n  (str (join (repeat (* level 2) \" \"))\n       line))\n\n(defn stringify [level lines line]\n  (cond\n    (string? line)\n    (conj lines\n          (if (or (starts-with? line \"#\")\n                  (ends-with? line \";\"))\n            line\n            (str (indent level line) \";\")))\n    (= :block (first line))\n    (-> lines\n        (conj (indent level (second line)))\n        (conj (indent level \"{\"))\n        (into (reduce (partial stringify (inc level)) [] (drop 2 line)))\n        (conj (indent level \"}\")))\n    :else\n    (into lines (reduce (partial stringify level) [] line))))\n\n(defn inner-symbols [form]\n  (walk (fn [s]\n          (if (coll? s)\n            (if (map? s)\n              (inner-symbols (vals s))\n              (inner-symbols s))\n            (if (symbol? s)\n              #{s}\n              #{})))\n        #(apply union %)\n        form))\n\n(defn sort-expressions [expressions dependencies]\n  (loop [remaining-names (set (keys expressions))\n         sorted-expressions []]\n    (if (empty? remaining-names)\n      (seq sorted-expressions)\n      (let [next-expression-name (some #(when (empty?\n                                               (intersection remaining-names\n                                                             (dependencies %)))\n                                          %)\n                                       remaining-names)]\n        (if next-expression-name\n          (recur (disj remaining-names next-expression-name)\n                 (conj sorted-expressions \n                       [next-expression-name\n                        (expressions next-expression-name)]))\n          (throw (ex-info \"Cyclic dependency detected\"\n                          {:functions (str remaining-names)})))))))\n\n(defn sort-fns [functions]\n  (sort-expressions\n   functions\n   (into {}\n         (mapv (fn [[fn-name fn-content]]\n                 [fn-name\n                  (intersection (set (keys functions))\n                                (apply union\n                                       (map #(inner-symbols\n                                              (:body (second %)))\n                                            fn-content)))])\n               functions))))\n\n(defn sort-structs [structs]\n  (sort-expressions\n   structs\n   (into {}\n         (mapv (fn [[struct-name struct-content]]\n                 [struct-name\n                  (intersection\n                   (set (keys structs))\n                   (inner-symbols struct-content))])\n               structs))))\n\n(defn layout-qualifiers [layout]\n  (into {}\n        (map (fn [[name location]]\n               [name\n                (str \"layout(location = \"\n                     location\n                     \")\")])\n             layout)))\n\n(defn parsed-iglu->glsl [{:keys [version\n                                 precision\n                                 uniforms\n                                 structs\n                                 defines\n                                 attributes\n                                 varyings\n                                 inputs\n                                 outputs\n                                 qualifiers\n                                 layout\n                                 main\n                                 functions]\n                          :as parsed-iglu}]\n  (let [full-functions (cond-> functions\n                         main (assoc 'main {{:in [] :out '[:type-name void]}\n                                            {:args [] :body main}}))\n        full-qualifiers (merge qualifiers (layout-qualifiers layout))]\n    (->> (into (cond-> []\n                 version (conj (str \"#version \" version))\n                 precision (into (mapv ->precision precision))\n                 uniforms (into (mapv ->uniform uniforms))\n                 attributes (into (mapv ->attribute attributes))\n                 varyings (into (mapv ->varying varyings))\n                 inputs (into (mapv (partial ->in full-qualifiers) inputs))\n                 outputs (into (mapv (partial ->out full-qualifiers) outputs))\n                 structs (into (mapv ->struct (sort-structs structs)))\n                 defines (into (mapv ->define defines)))\n               (vec (mapcat ->function (sort-fns full-functions))))\n         (reduce (partial stringify 0) [])\n         (join \\newline))))\n"]}