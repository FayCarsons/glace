{"version":3,"sources":["sprog/util.cljc"],"mappings":"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","names":["sprog.util/now","js/Date.now","sprog.util/startup-time","sprog.util/seconds-since-startup","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","sprog.util/log","seq42688","self__5752__auto__","cljs.core/seq","vals","seq__42690","chunk__42691","count__42692","i__42693","temp__5804__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","val","js/console.log","cljs.core/last","sprog.util/log-tables","seq42699","tables","seq__42700","chunk__42701","count__42702","i__42703","table","js/console.table","cljs.core/clj->js","sprog.util/pretty-log","seq42708","seq__42709","chunk__42710","count__42711","i__42712","cljs.pprint.pprint","G__42717","sprog.util/scale","js/Error","p1__42715#","from-min","from-max","to-min","to-max","value","sprog.util.scale","sprog.util/prange","p__42726","vec__42727","cljs.core.nth","seq42723","G__42724","self__5751__auto__","n","open?","p1__42722#","cljs.core.map","cljs.core.range","G__42734","sprog.util/clamp","p1__42730#","bottom","top","x__5131__auto__","y__5132__auto__","x__5128__auto__","y__5129__auto__","min","max","sprog.util.clamp","sprog.util/sigmoid","cljs.core//","p1__42738#","cljs.core.comp","cljs.core/inc","Math/exp","cljs.core/-","sprog.util/TAU","Math/PI"],"sourcesContent":["(ns sprog.util\n  #?(:clj (:require [clojure.walk :refer [prewalk-replace\n                                          prewalk]]\n                    [clojure.pprint :refer [pprint]]))\n  #?(:cljs (:require [cljs.pprint :refer [pprint]]))\n  #?(:cljs (:require-macros [sprog.util])))\n\n(defn now []\n  #?(:cljs (js/Date.now)\n     :clj (System/currentTimeMillis)))\n\n(def startup-time (now))\n(defn seconds-since-startup [] (/ (- (now) startup-time) 1000))\n\n(defn log [& vals]\n  (doseq [val vals]\n    #?(:cljs (js/console.log (str val))\n       :clj (prn val)))\n  (last vals))\n\n(defn log-tables [& tables]\n  (doseq [table tables]\n    #?(:cljs (js/console.table (clj->js table))\n       :clj (prn tables)))\n  (last tables))\n\n(defn pretty-log [& vals]\n  (doseq [val vals]\n         #?(:cljs (pprint val)\n            :clj (pprint val)))\n  (last vals))\n\n(defn scale\n  ([from-min from-max to-min to-max value]\n   (+ (* (/ (- value from-min)\n            (- from-max from-min))\n         (- to-max to-min))\n      to-min))\n  ([from-min from-max to-min to-max]\n   #(+ (* (/ (- % from-min)\n             (- from-max from-min))\n          (- to-max to-min))\n       to-min))\n  ([to-min to-max value]\n   (scale 0 1 to-min to-max value))\n  ([to-min to-max]\n   (scale 0 1 to-min to-max)))\n\n(defn prange [n & [open?]]\n  (map #(/ %\n           (if open?\n             n\n             (dec n)))\n       (range n)))\n\n(defn clamp\n  ([bottom top value] (min top (max bottom value)))\n  ([min max] #(clamp min max %))\n  ([value] (clamp 0 1 value)))\n\n(def sigmoid (comp / inc #(Math/exp %) -))\n\n(def TAU (* Math/PI 2))\n\n#?(:clj\n   (defmacro gen\n     ([exp]\n      `(repeatedly (fn [] ~exp)))\n     ([number exp]\n      `(repeatedly ~number (fn [] ~exp)))))\n\n#?(:clj\n   (defmacro genv\n     ([exp]\n      `(vec (repeatedly (fn [] ~exp))))\n     ([number exp]\n      `(vec (repeatedly ~number (fn [] ~exp))))))\n\n#?(:clj\n   (defmacro unquotable [& expressions]\n     (let [quote-replacement (gensym 'IGLU_REPLACED_QUOTE)]\n       (letfn [(inline-unquotes\n                [form]\n                (let [replacement-map-atom (atom {})\n                      inlined-replacements-form\n                      (doall\n                       (prewalk\n                        (fn [subform]\n                          (if (and (list? subform)\n                                   (= (first subform)\n                                      'clojure.core/unquote))\n                            (let [replacement-binding (keyword (gensym))]\n                              (swap! replacement-map-atom\n                                     assoc\n                                     replacement-binding\n                                     (second subform))\n                              replacement-binding)\n                            subform))\n                        form))]\n                  (list 'clojure.walk/prewalk-replace\n                        @replacement-map-atom\n                        (list `quote\n                              (replace-quotes inlined-replacements-form)))))\n               (replace-quotes\n                [form]\n                (if (and (list? form)\n                         (= (first form)\n                            quote-replacement))\n                  (let [subform (second form)]\n                    (if (coll? subform)\n                      (inline-unquotes subform)\n                      (list `quote subform)))\n                  form))]\n         (->> expressions\n              (prewalk-replace {`quote quote-replacement})\n              (prewalk replace-quotes)\n              (cons 'do))))))\n"]}