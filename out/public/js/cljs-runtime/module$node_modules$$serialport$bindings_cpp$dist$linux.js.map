{
"version":3,
"file":"module$node_modules$$serialport$bindings_cpp$dist$linux.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/@serialport/bindings-cpp/dist/linux.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$serialport$bindings_cpp$dist$linux\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LinuxPortBinding = exports.LinuxBinding = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst linux_list_1 = require(\"./linux-list\");\nconst poller_1 = require(\"./poller\");\nconst unix_read_1 = require(\"./unix-read\");\nconst unix_write_1 = require(\"./unix-write\");\nconst load_bindings_1 = require(\"./load-bindings\");\nconst debug = (0, debug_1.default)('serialport/bindings-cpp');\nexports.LinuxBinding = {\n    list() {\n        debug('list');\n        return (0, linux_list_1.linuxList)();\n    },\n    async open(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        if (!options.path) {\n            throw new TypeError('\"path\" is not a valid port');\n        }\n        if (!options.baudRate) {\n            throw new TypeError('\"baudRate\" is not a valid baudRate');\n        }\n        debug('open');\n        const openOptions = Object.assign({ vmin: 1, vtime: 0, dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);\n        const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);\n        this.fd = fd;\n        return new LinuxPortBinding(fd, openOptions);\n    },\n};\n/**\n * The linux binding layer\n */\nclass LinuxPortBinding {\n    constructor(fd, openOptions) {\n        this.fd = fd;\n        this.openOptions = openOptions;\n        this.poller = new poller_1.Poller(fd);\n        this.writeOperation = null;\n    }\n    get isOpen() {\n        return this.fd !== null;\n    }\n    async close() {\n        debug('close');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        const fd = this.fd;\n        this.poller.stop();\n        this.poller.destroy();\n        this.fd = null;\n        await (0, load_bindings_1.asyncClose)(fd);\n    }\n    async read(buffer, offset, length) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        if (typeof offset !== 'number' || isNaN(offset)) {\n            throw new TypeError(`\"offset\" is not an integer got \"${isNaN(offset) ? 'NaN' : typeof offset}\"`);\n        }\n        if (typeof length !== 'number' || isNaN(length)) {\n            throw new TypeError(`\"length\" is not an integer got \"${isNaN(length) ? 'NaN' : typeof length}\"`);\n        }\n        debug('read');\n        if (buffer.length < offset + length) {\n            throw new Error('buffer is too small');\n        }\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, unix_read_1.unixRead)({ binding: this, buffer, offset, length });\n    }\n    async write(buffer) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        debug('write', buffer.length, 'bytes');\n        if (!this.isOpen) {\n            debug('write', 'error port is not open');\n            throw new Error('Port is not open');\n        }\n        this.writeOperation = (async () => {\n            if (buffer.length === 0) {\n                return;\n            }\n            await (0, unix_write_1.unixWrite)({ binding: this, buffer });\n            this.writeOperation = null;\n        })();\n        return this.writeOperation;\n    }\n    async update(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw TypeError('\"options\" is not an object');\n        }\n        if (typeof options.baudRate !== 'number') {\n            throw new TypeError('\"options.baudRate\" is not a number');\n        }\n        debug('update');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncUpdate)(this.fd, options);\n    }\n    async set(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        debug('set');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncSet)(this.fd, options);\n    }\n    async get() {\n        debug('get');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGet)(this.fd);\n    }\n    async getBaudRate() {\n        debug('getBaudRate');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGetBaudRate)(this.fd);\n    }\n    async flush() {\n        debug('flush');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncFlush)(this.fd);\n    }\n    async drain() {\n        debug('drain');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await this.writeOperation;\n        await (0, load_bindings_1.asyncDrain)(this.fd);\n    }\n}\nexports.LinuxPortBinding = LinuxPortBinding;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","__importDefault","mod","__esModule","Object","defineProperty","value","LinuxPortBinding","LinuxBinding","debug_1","linux_list_1","poller_1","unix_read_1","unix_write_1","load_bindings_1","debug","default","list","linuxList","open","options","Array","isArray","TypeError","path","baudRate","openOptions","assign","vmin","vtime","dataBits","lock","stopBits","parity","rtscts","xon","xoff","xany","hupcl","fd","asyncOpen","constructor","poller","Poller","writeOperation","close","isOpen","Error","stop","destroy","asyncClose","read","buffer","offset","length","isBuffer","isNaN","unixRead","binding","write","unixWrite","update","asyncUpdate","set","asyncSet","get","asyncGet","getBaudRate","asyncGetBaudRate","flush","asyncFlush","drain","asyncDrain"]
}
