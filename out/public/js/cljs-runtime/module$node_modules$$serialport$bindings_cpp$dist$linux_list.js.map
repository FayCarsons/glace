{
"version":3,
"file":"module$node_modules$$serialport$bindings_cpp$dist$linux_list.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/@serialport/bindings-cpp/dist/linux-list.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$serialport$bindings_cpp$dist$linux_list\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.linuxList = void 0;\nconst child_process_1 = require(\"child_process\");\nconst parser_readline_1 = require(\"@serialport/parser-readline\");\n// get only serial port names\nfunction checkPathOfDevice(path) {\n    return /(tty(S|WCH|ACM|USB|AMA|MFD|O|XRUSB)|rfcomm)/.test(path) && path;\n}\nfunction propName(name) {\n    return {\n        DEVNAME: 'path',\n        ID_VENDOR_ENC: 'manufacturer',\n        ID_SERIAL_SHORT: 'serialNumber',\n        ID_VENDOR_ID: 'vendorId',\n        ID_MODEL_ID: 'productId',\n        DEVLINKS: 'pnpId',\n    }[name.toUpperCase()];\n}\nfunction decodeHexEscape(str) {\n    return str.replace(/\\\\x([a-fA-F0-9]{2})/g, (a, b) => {\n        return String.fromCharCode(parseInt(b, 16));\n    });\n}\nfunction propVal(name, val) {\n    if (name === 'pnpId') {\n        const match = val.match(/\\/by-id\\/([^\\s]+)/);\n        return (match === null || match === void 0 ? void 0 : match[1]) || undefined;\n    }\n    if (name === 'manufacturer') {\n        return decodeHexEscape(val);\n    }\n    if (/^0x/.test(val)) {\n        return val.substr(2);\n    }\n    return val;\n}\nfunction linuxList(spawnCmd = child_process_1.spawn) {\n    const ports = [];\n    const udevadm = spawnCmd('udevadm', ['info', '-e']);\n    const lines = udevadm.stdout.pipe(new parser_readline_1.ReadlineParser());\n    let skipPort = false;\n    let port = {\n        path: '',\n        manufacturer: undefined,\n        serialNumber: undefined,\n        pnpId: undefined,\n        locationId: undefined,\n        vendorId: undefined,\n        productId: undefined,\n    };\n    lines.on('data', (line) => {\n        const lineType = line.slice(0, 1);\n        const data = line.slice(3);\n        // new port entry\n        if (lineType === 'P') {\n            port = {\n                path: '',\n                manufacturer: undefined,\n                serialNumber: undefined,\n                pnpId: undefined,\n                locationId: undefined,\n                vendorId: undefined,\n                productId: undefined,\n            };\n            skipPort = false;\n            return;\n        }\n        if (skipPort) {\n            return;\n        }\n        // Check dev name and save port if it matches flag to skip the rest of the data if not\n        if (lineType === 'N') {\n            if (checkPathOfDevice(data)) {\n                ports.push(port);\n            }\n            else {\n                skipPort = true;\n            }\n            return;\n        }\n        // parse data about each port\n        if (lineType === 'E') {\n            const keyValue = data.match(/^(.+)=(.*)/);\n            if (!keyValue) {\n                return;\n            }\n            const key = propName(keyValue[1]);\n            if (!key) {\n                return;\n            }\n            port[key] = propVal(key, keyValue[2]);\n        }\n    });\n    return new Promise((resolve, reject) => {\n        udevadm.on('close', (code) => {\n            if (code) {\n                reject(new Error(`Error listing ports udevadm exited with error code: ${code}`));\n            }\n        });\n        udevadm.on('error', reject);\n        lines.on('error', reject);\n        lines.on('finish', () => resolve(ports));\n    });\n}\nexports.linuxList = linuxList;\n\n};"],
"names":["shadow$provide","global","require","module","exports","decodeHexEscape","str","replace","a","b","String","fromCharCode","parseInt","Object","defineProperty","value","linuxList","child_process_1","parser_readline_1","spawnCmd","spawn","ports","udevadm","lines","stdout","pipe","ReadlineParser","skipPort","port","path","manufacturer","undefined","serialNumber","pnpId","locationId","vendorId","productId","on","line","lineType","slice","data","test","push","keyValue","match","key","DEVNAME","ID_VENDOR_ENC","ID_SERIAL_SHORT","ID_VENDOR_ID","ID_MODEL_ID","DEVLINKS","name","toUpperCase","val","substr","Promise","resolve","reject","code","Error"]
}
