{
"version":3,
"file":"module$node_modules$$serialport$parser_slip_encoder$dist$decoder.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/@serialport/parser-slip-encoder/dist/decoder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$serialport$parser_slip_encoder$dist$decoder\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlipDecoder = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that decodes slip encoded data.\n * @extends Transform\n *\n * Runs in O(n) time, stripping out slip encoding and emitting decoded data. Optionally custom slip escape and delimiters can be provided.\n */\nclass SlipDecoder extends stream_1.Transform {\n    constructor(options = {}) {\n        super(options);\n        const { START, ESC = 0xdb, END = 0xc0, ESC_START, ESC_END = 0xdc, ESC_ESC = 0xdd } = options;\n        this.opts = {\n            START,\n            ESC,\n            END,\n            ESC_START,\n            ESC_END,\n            ESC_ESC,\n        };\n        this.buffer = Buffer.alloc(0);\n        this.escape = false;\n        this.start = false;\n    }\n    _transform(chunk, encoding, cb) {\n        for (let ndx = 0; ndx < chunk.length; ndx++) {\n            let byte = chunk[ndx];\n            if (byte === this.opts.START) {\n                this.start = true;\n                continue;\n            }\n            else if (undefined == this.opts.START) {\n                this.start = true;\n            }\n            if (this.escape) {\n                if (byte === this.opts.ESC_START && this.opts.START) {\n                    byte = this.opts.START;\n                }\n                else if (byte === this.opts.ESC_ESC) {\n                    byte = this.opts.ESC;\n                }\n                else if (byte === this.opts.ESC_END) {\n                    byte = this.opts.END;\n                }\n                else {\n                    this.escape = false;\n                    this.push(this.buffer);\n                    this.buffer = Buffer.alloc(0);\n                }\n            }\n            else {\n                if (byte === this.opts.ESC) {\n                    this.escape = true;\n                    continue;\n                }\n                if (byte === this.opts.END) {\n                    this.push(this.buffer);\n                    this.buffer = Buffer.alloc(0);\n                    this.escape = false;\n                    this.start = false;\n                    continue;\n                }\n            }\n            this.escape = false;\n            if (this.start) {\n                this.buffer = Buffer.concat([this.buffer, Buffer.from([byte])]);\n            }\n        }\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.buffer);\n        this.buffer = Buffer.alloc(0);\n        cb();\n    }\n}\nexports.SlipDecoder = SlipDecoder;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","SlipDecoder","stream_1","Transform","constructor","options","START","ESC","END","ESC_START","ESC_END","ESC_ESC","opts","buffer","alloc","start","escape","_transform","chunk","encoding","cb","ndx","length","byte","undefined","push","concat","from","_flush"]
}
