{"version":3,"sources":["sprog/webgl/attributes.cljs"],"mappings":"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","names":["p__31290","map__31291","cljs.core/--destructure-map","cljs.core.get","sprog.webgl.attributes/set-boj-data!","gl","buffer","usage","boj","data","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","sprog.webgl.attributes/create-boj!","p__31299","vec__31300","map__31303","cljs.core.nth","seq31295","G__31296","cljs.core/first","cljs.core/next","G__31297","self__5751__auto__","num-components","type","normalized","stride","offset","initial-data","p__31318","map__31319","sprog.webgl.attributes/ensure-attribute-present!","program","attribute-locations-atom","attrib-name-str","cljs.core/not","fexpr__31320","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","p__31327","p__31328","map__31331","map__31332","sprog.webgl.attributes/set-sprog-attribute!","sprog","attrib-name","sprog.iglu.glsl/clj-name->glsl-name","location","fexpr__31352","sprog.webgl.attributes/set-sprog-attributes!","attrib-boj-map","seq__31364","cljs.core/seq","chunk__31365","count__31366","i__31367","vec__31403","temp__5804__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__31412"],"sourcesContent":["(ns sprog.webgl.attributes\n  (:require [sprog.iglu.glsl :refer [clj-name->glsl-name]]))\n\n(defn set-boj-data! [gl {:keys [buffer usage] :as boj} data] \n  (.bindBuffer gl\n               gl.ARRAY_BUFFER\n               buffer)\n  (.bufferData gl\n               gl.ARRAY_BUFFER\n               data\n               usage)\n  boj)\n\n(defn create-boj! [gl num-components & [{:keys [type\n                                                normalized\n                                                stride\n                                                offset\n                                                usage\n                                                initial-data]\n                                         :or {type gl.FLOAT\n                                              normalized false\n                                              stride 0\n                                              offset 0\n                                              usage gl.STATIC_DRAW}}]]\n  (let [boj {:buffer (.createBuffer gl)\n             :num-components num-components\n             :type type\n             :normalized normalized\n             :stride stride\n             :offset offset\n             :usage usage}]\n    (when initial-data\n      (set-boj-data! gl boj initial-data))\n    boj))\n\n(defn ensure-attribute-present! [gl\n                                 {:keys [program attribute-locations-atom]} \n                                 attrib-name-str]\n  (when (not (@attribute-locations-atom attrib-name-str))\n    (swap! attribute-locations-atom \n           assoc\n           attrib-name-str\n           (.getAttribLocation gl\n                               program\n                               attrib-name-str))))\n\n(defn set-sprog-attribute! [gl\n                            {:keys [attribute-locations-atom] :as sprog}\n                            attrib-name\n                            {:keys [buffer\n                                    num-components\n                                    type\n                                    normalized\n                                    stride\n                                    offset]}]\n  (let [attrib-name-str (str (clj-name->glsl-name attrib-name))]\n    (ensure-attribute-present! gl sprog attrib-name-str)\n    (let [location (@attribute-locations-atom attrib-name)]\n      (.bindBuffer gl gl.ARRAY_BUFFER buffer)\n      (.enableVertexAttribArray gl location)\n      (.vertexAttribPointer gl\n                            location\n                            num-components\n                            type\n                            normalized\n                            stride\n                            offset))))\n\n(defn set-sprog-attributes! [gl\n                             sprog\n                             attrib-boj-map]\n  (doseq [[attrib-name boj] attrib-boj-map]\n    (set-sprog-attribute! gl sprog attrib-name boj)))\n"]}