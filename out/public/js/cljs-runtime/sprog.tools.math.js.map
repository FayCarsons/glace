{"version":3,"sources":["sprog/tools/math.cljs"],"mappings":"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","names":["sprog.tools.math/rand-normals","n","rand-fn","cljs.core.take","cljs.core.apply","cljs.core/concat","cljs.core.repeatedly","u1","u2","radius","Math/sqrt","Math/log","angle","Math/PI","p1__30920#","cljs.core.map","cljs.core/List","Math/cos","Math/sin","sprog.tools.math/rand-n-sphere-point","normals","magnitude","cljs.core/+","p1__30921#","p1__30922#","p__30923","vec__30924","cljs.core.nth","sprog.tools.math/axis-rotation-matrix","x","y","z","s","c","oc","sprog.tools.math/magnitude","v","p1__30928#","sprog.tools.math/dot","a","b","cljs.core/*","sprog.tools.math/cross","vec__30929","vec__30932","x1","y1","z1","x2","y2","z2","sprog.tools.math/normalize","m","p1__30936#","cljs.core.mapv"],"sourcesContent":["(ns sprog.tools.math)\n\n(defn rand-normals [n rand-fn]\n  (take n (apply concat (repeatedly\n                         (fn []\n                           (let [u1 (rand-fn)\n                                 u2 (rand-fn)\n                                 radius (Math/sqrt (* -2 (Math/log u1)))\n                                 angle (* Math/PI 2 u2)]\n                             (map #(* radius (% angle))\n                                  (list Math/cos Math/sin))))))))\n\n(defn rand-n-sphere-point [n rand-fn]\n  (let [normals (rand-normals n rand-fn)\n        magnitude (Math/sqrt (apply + (map #(* % %) normals)))]\n    (map #(/ % magnitude)\n         normals)))\n\n(defn axis-rotation-matrix [[x y z] angle]\n  (let [s (Math/sin angle)\n        c (Math/cos angle)\n        oc (- 1 c)]\n    [(+ (* oc x x) c)\n     (- (* oc x y) (* z s))\n     (+ (* oc z x) (* y s))\n\n     (+ (* oc x y) (* z s))\n     (+ (* oc y y) c)\n     (- (* oc y z) (* x s))\n\n     (- (* oc z x) (* y s))\n     (+ (* oc y z) (* x s))\n     (+ (* oc z z) c)]))\n\n(defn magnitude [v]\n  (Math/sqrt (apply + (map #(* % %) v))))\n\n(defn dot [a b]\n  (apply + (map * a b)))\n\n(defn cross [a b]\n  (let [[x1 y1 z1] a\n        [x2 y2 z2] b]\n    [(- (* y1 z2)\n        (* z1 y2))\n     (- (* z1 x2)\n        (* x1 z2))\n     (- (* x1 y2)\n        (* y1 x2))]))\n\n(defn normalize [v]\n  (let [m (magnitude v)]\n    (mapv #(/ % m) v)))"]}