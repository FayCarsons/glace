shadow$provide.module$node_modules$$serialport$parser_slip_encoder$dist$encoder=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.SlipEncoder=void 0;global=require("module$node_modules$stream_browserify$index");class SlipEncoder extends global.Transform{constructor(options={}){super(options);const {START,ESC=219,END=192,ESC_START,ESC_END=220,ESC_ESC=221,bluetoothQuirk=!1}=
options;this.opts={START,ESC,END,ESC_START,ESC_END,ESC_ESC,bluetoothQuirk}}_transform(chunk,encoding,cb){encoding=chunk.length;if(this.opts.bluetoothQuirk&&0===encoding)return cb();const encoded=Buffer.alloc(2*encoding+2);let j=0;1==this.opts.bluetoothQuirk&&(encoded[j++]=this.opts.END);void 0!==this.opts.START&&(encoded[j++]=this.opts.START);for(let i=0;i<encoding;i++){let byte=chunk[i];byte===this.opts.START&&this.opts.ESC_START?(encoded[j++]=this.opts.ESC,byte=this.opts.ESC_START):byte===this.opts.END?
(encoded[j++]=this.opts.ESC,byte=this.opts.ESC_END):byte===this.opts.ESC&&(encoded[j++]=this.opts.ESC,byte=this.opts.ESC_ESC);encoded[j++]=byte}encoded[j++]=this.opts.END;cb(null,encoded.slice(0,j))}}exports.SlipEncoder=SlipEncoder}
//# sourceMappingURL=module$node_modules$$serialport$parser_slip_encoder$dist$encoder.js.map
