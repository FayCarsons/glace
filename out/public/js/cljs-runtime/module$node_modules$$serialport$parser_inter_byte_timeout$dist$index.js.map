{
"version":3,
"file":"module$node_modules$$serialport$parser_inter_byte_timeout$dist$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oEAAA,CAAyF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACjI,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAC/B,aACAC,OAAOC,CAAAA,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAAEI,MAAO,CAAA,CAAT,CAA7C,CACAJ,QAAQK,CAAAA,sBAAR,CAAiC,IAAK,EAChCC,OAAAA,CAAWR,OAAA,CAAQ,6CAAR,CAIjB,MAAMO,uBAAN,QAAqCC,OAASC,CAAAA,SAA9C,CACIC,WAAW,CAAC,CAAEC,aAAA,CAAgB,KAAlB,CAAyBC,QAAzB,CAAmC,GAAGC,gBAAtC,CAAD,CAA2D,CAClE,KAAA,CAAMA,gBAAN,CACA,IAAI,CAACD,QAAL,CACI,KAAM,KAAIE,SAAJ,CAAc,wBAAd,CAAN;AAEJ,GAAwB,QAAxB,GAAI,MAAOF,SAAX,EAAoCG,MAAOC,CAAAA,KAAP,CAAaJ,QAAb,CAApC,CACI,KAAM,KAAIE,SAAJ,CAAc,4BAAd,CAAN,CAEJ,GAAe,CAAf,CAAIF,QAAJ,CACI,KAAM,KAAIE,SAAJ,CAAc,kCAAd,CAAN,CAEJ,GAA6B,QAA7B,GAAI,MAAOH,cAAX,EAAyCI,MAAOC,CAAAA,KAAP,CAAaL,aAAb,CAAzC,CACI,KAAM,KAAIG,SAAJ,CAAc,iCAAd,CAAN,CAEJ,GAAoB,CAApB,CAAIH,aAAJ,CACI,KAAM,KAAIG,SAAJ,CAAc,uCAAd,CAAN,CAEJ,IAAKH,CAAAA,aAAL,CAAqBA,aACrB,KAAKM,CAAAA,aAAL,CAAqB,EACrB,KAAKL,CAAAA,QAAL,CAAgBA,QAnBkD,CAqBtEM,UAAU,CAACC,KAAD,CAAQC,QAAR,CAAkBC,EAAlB,CAAsB,CACxB,IAAKC,CAAAA,UAAT,EACIC,YAAA,CAAa,IAAKD,CAAAA,UAAlB,CAEJ;IAASE,QAAT,CAAkB,CAAlB,CAAqBA,QAArB,CAA8BL,KAAMM,CAAAA,MAApC,CAA4CD,QAAA,EAA5C,CACI,IAAKP,CAAAA,aAAcS,CAAAA,IAAnB,CAAwBP,KAAA,CAAMK,QAAN,CAAxB,CACA,CAAI,IAAKP,CAAAA,aAAcQ,CAAAA,MAAvB,EAAiC,IAAKd,CAAAA,aAAtC,EACI,IAAKgB,CAAAA,UAAL,EAGR,KAAKL,CAAAA,UAAL,CAAkBM,UAAA,CAAW,IAAKD,CAAAA,UAAWE,CAAAA,IAAhB,CAAqB,IAArB,CAAX,CAAuC,IAAKjB,CAAAA,QAA5C,CAClBS,GAAA,EAX4B,CAahCM,UAAU,EAAG,CACL,IAAKL,CAAAA,UAAT,EACIC,YAAA,CAAa,IAAKD,CAAAA,UAAlB,CAE4B,EAAhC,CAAI,IAAKL,CAAAA,aAAcQ,CAAAA,MAAvB,EACI,IAAKC,CAAAA,IAAL,CAAUvB,MAAO2B,CAAAA,IAAP,CAAY,IAAKb,CAAAA,aAAjB,CAAV,CAEJ,KAAKA,CAAAA,aAAL,CAAqB,EAPZ,CASbc,MAAM,CAACV,EAAD,CAAK,CACP,IAAKM,CAAAA,UAAL,EACAN,GAAA,EAFO,CA5Cf,CAiDAnB,OAAQK,CAAAA,sBAAR,CAAiCA,sBA1DgG;",
"sources":["node_modules/@serialport/parser-inter-byte-timeout/dist/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$serialport$parser_inter_byte_timeout$dist$index\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InterByteTimeoutParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that buffers data and emits it after not receiving any bytes for the specified amount of time or hitting a max buffer size.\n */\nclass InterByteTimeoutParser extends stream_1.Transform {\n    constructor({ maxBufferSize = 65536, interval, ...transformOptions }) {\n        super(transformOptions);\n        if (!interval) {\n            throw new TypeError('\"interval\" is required');\n        }\n        if (typeof interval !== 'number' || Number.isNaN(interval)) {\n            throw new TypeError('\"interval\" is not a number');\n        }\n        if (interval < 1) {\n            throw new TypeError('\"interval\" is not greater than 0');\n        }\n        if (typeof maxBufferSize !== 'number' || Number.isNaN(maxBufferSize)) {\n            throw new TypeError('\"maxBufferSize\" is not a number');\n        }\n        if (maxBufferSize < 1) {\n            throw new TypeError('\"maxBufferSize\" is not greater than 0');\n        }\n        this.maxBufferSize = maxBufferSize;\n        this.currentPacket = [];\n        this.interval = interval;\n    }\n    _transform(chunk, encoding, cb) {\n        if (this.intervalID) {\n            clearTimeout(this.intervalID);\n        }\n        for (let offset = 0; offset < chunk.length; offset++) {\n            this.currentPacket.push(chunk[offset]);\n            if (this.currentPacket.length >= this.maxBufferSize) {\n                this.emitPacket();\n            }\n        }\n        this.intervalID = setTimeout(this.emitPacket.bind(this), this.interval);\n        cb();\n    }\n    emitPacket() {\n        if (this.intervalID) {\n            clearTimeout(this.intervalID);\n        }\n        if (this.currentPacket.length > 0) {\n            this.push(Buffer.from(this.currentPacket));\n        }\n        this.currentPacket = [];\n    }\n    _flush(cb) {\n        this.emitPacket();\n        cb();\n    }\n}\nexports.InterByteTimeoutParser = InterByteTimeoutParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","InterByteTimeoutParser","stream_1","Transform","constructor","maxBufferSize","interval","transformOptions","TypeError","Number","isNaN","currentPacket","_transform","chunk","encoding","cb","intervalID","clearTimeout","offset","length","push","emitPacket","setTimeout","bind","from","_flush"]
}
