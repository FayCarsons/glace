{"version":3,"sources":["clouds/core.cljs"],"mappings":";AAyBA,4BAAA,5BAAMA,gEAAeC;AAArB,AACE,yIAAA,2CAAA,2EAAA,IAAA,2DAAA,vTAACC,sEAAgB,AAAAD;;AAGnB,6BAAA,7BAAME,kEAAgBF;AAAtB,AACE,IAAMG,oBAAkB,AAACC,cACA,AAACC,8CACA,AAACC,4CAAIC,qBACA,mHAAA,nHAACC,mDAAU,kDAAA,lDAAM,KAAAC,gBACCC;AAJjD,AAOE,GAAI,AAACC,uBAAOC,sBAAMT;AAChB,AAAI,AAACU,kCAAiBb,GACAG;;AAClBA;;AACJ,AAAI,kIAAA,2CAAA,2DAAA,xOAACF,sEAAgB,AAAAD;;AACjB,OAACc,mCAAkBd;;;AAE7B,wCAAA,gDAAAe,xFAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAAA,RAAsEM;SAAtE,AAAAJ,4CAAAF,eAAA,hEAAoChB;YAApC,AAAAkB,4CAAAF,eAAA,nEAAuCI;0BAAvC,AAAAF,4CAAAF,eAAA,jFAA6CK;AAA7C,AACE,GAAM,WAAA,VAAID;AAAV,AACE,qBAAA,jBAAMG,oGAAUC,6BAAiBA;AAAjC,AACE,6HAAA,2CAAA,gFAAA,2CAAA,nSAACC,mFAAqBzB,GACA0B,wBACAH,iEACQA,4KACCF;;AANnC;;AAOAC;;AAEF,0BAAA,kCAAAK,5DAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAX,4BAAAW;YAAAA,RASmBN;oBATnB,AAAAJ,4CAAAU,eAAA,3EAOsBO;YAPtB,AAAAjB,4CAAAU,eAAA,nEAEsBR;mBAFtB,AAAAF,4CAAAU,eAAA,1EAKsBK;wBALtB,AAAAf,4CAAAU,eAAA,/EAIsBI;iBAJtB,AAAAd,4CAAAU,eAAA,xEACsBE;iBADtB,AAAAZ,4CAAAU,eAAA,xEAMsBM;SANtB,AAAAhB,4CAAAU,eAAA,hEAAsB5B;mBAAtB,AAAAkB,4CAAAU,eAAA,1EAQsBQ;mBARtB,AAAAlB,4CAAAU,eAAA,1EAGsBG;AAHtB,AAUE,AAEE,IAAAM,aAAmCN;oBAAnC,AAAAO,4CAAAD,WAAA,IAAA,3EAAOM;mBAAP,AAAAL,4CAAAD,WAAA,IAAA,1EAAqBO;IAArBL,aACmCN;oBADnC,AAAAK,4CAAAC,WAAA,IAAA,3EACOM;mBADP,AAAAP,4CAAAC,WAAA,IAAA,1EACqBO;IADrBN,aAEuCN;sBAFvC,AAAAI,4CAAAE,WAAA,IAAA,7EAEOO;qBAFP,AAAAT,4CAAAE,WAAA,IAAA,5EAEuBQ;IAFvBP,aAGqDT;6BAHrD,AAAAM,4CAAAG,WAAA,IAAA,pFAGOQ;4BAHP,AAAAX,4CAAAG,WAAA,IAAA,nFAG8BS;IAH9BR,aAIqCP;qBAJrC,AAAAG,4CAAAI,WAAA,IAAA,5EAIOS;oBAJP,AAAAb,4CAAAI,WAAA,IAAA,3EAIsBU;AAJtB,AAKE,2HAAA,2CAAA,kBAAA,cAAA,tMAAC3B,mFAAqBzB,GACAqD,0BACAvB,6DACQA,mBACCV,oBACM,AAAAhB,cAAA,AAAAkD,mDAAA,IAAA;AAAA,AAAU,+DAAA,vDAAG,6CAAA,7CAACC;KALnD,4BAAA,4BAAA,4BAAA,0CAAA,wFAAA,2CAAA,wDAAA,3SAOqCZ,4BACAE,0BACFE,mCACOE,sCACJE,+PACNH,eACAJ,aACAE,aACAI,sBACAE;;kPAC5B9B,/CACA,qDAAA,rDAACkC,sHAAmBC,rKACpB,wLAAA,xLAACD,6PAAqBC,5SACtB,+TAAA,/TAACD,oYAAqBC,nbACtB,scAAA,tcAACD,shBAA0BC,5kBAC3B,+lBAAA,xlBAACD,gqBAAsBC;;;AAGjC,2BAAA,mCAAAC,9DAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA1C,4BAAA0C;YAAAA,RAE8CrC;SAF9C,AAAAJ,4CAAAyC,eAAA,hEAAuB3D;iBAAvB,AAAAkB,4CAAAyC,eAAA,xEAA0B7B;0BAA1B,AAAAZ,4CAAAyC,eAAA,jFACuBtC;wBADvB,AAAAH,4CAAAyC,eAAA,/EAEuB3B;AAFvB,AAGE,uFAAA,2CAAA,kBAAA,4BAAA,2CAAA,3NAAC6B,8CAAqB7D,GACA8D,2BACAhC,6DACQA,mBACCT,4BACA,AAAC0C,gBAAM/B,yBACT,AAACgC;;AAC9B1C;;AAEF,gCAAA,wCAAA2C,xEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAjD,4BAAAiD;YAAAA,RAAkC5C;AAAlC,sJACMA,xBACAO,zBACA+B,/CACA,+CAAA,yBAAA,gCAAA,xGAACJ,gKAAcY,tNACf,qOAAA,9NAACC;;AAEP,8BAAA,9BAAMC,oEAAYtE;AAAlB,AACE,AAACD,0BAAcC;;AACf,IAAM8B,aAAW,AAAChB,mCAAkBd;AAApC,AAAA,+CAAA,wEAAA,wDAAA,qEAAA,gFAAA,iEAAA,iEAAA,mFAAA,iDAAA,uEAOkB,AAAAI,cAAA,AAAAkD,mDAAA,IAAA;AAAA,AAAW,0CAAA,nCAACiB,gCAAWvE,sDAAQ8B;KAPjD,IASiB,AAAA1B,cAAA,AAAAkD,mDAAA,IAAA;AAAA,AAAU,0CAAA,nCAACiB,gCAAWvE,sDAAQ8B;KAHzB,AAAA1B,cAAA,AAAAkD,mDAAA,IAAA;AAAA,AAAU,0CAAA,nCAACiB,gCAAWvE,sDAAQ8B;KAHrCA,WAEA,AAAA1B,cAAA,AAAAkD,mDAAA,IAAA;AAAA,AAAU,0CAAA,nCAACiB,gCAAWvE,sDAAQ8B;yHAJtC9B,pHAGiB,mCAAA,nCAACuE,gCAAWvE,sDAAQwB,iCAI3B,AAAApB,cAAA,AAAAkD,mDAAA,IAAA;AAAA,AAAU,0CAAA,nCAACiB,gCAAWvE,sDAAQ8B;;;AAGjD,mBAAA,nBAAM0C;AAAN,AACE,sCAAA,IAAA,1CAACC;AAAD,AAAuB,AAAI,sGAAA,tGAACC;;AACD,8EAAA,2CAAA,yDAAA,3KAACC;;;AAC5B,OAACC,mCAAaN,4BAAWH;;AAE3B,4BAAA,5BAAuBU;AAAvB,AACE,AAACC,0BAA6B,AAAU,AAACC;;AACzC,OAACP;;AAEH,uBAAA,vBAAMQ;AAAN,AACE,+BAAA,xBAACC,+BAAkC,WAAKC;AAAL,AAAQ,OAACV","names":["clouds.core/expand-canvas","gl","sprog.dom.canvas.maximize_canvas","clouds.core/set-resolution","manual-resolution","cljs.core/vec","cljs.core.doall","cljs.core.map","cljs.core/parse-long","clojure.string.split","js/URLSearchParams","js/window.location.search","cljs.core/every?","cljs.core/some?","sprog.dom.canvas/resize-gl-canvas","sprog.dom.canvas/canvas-resolution","p__64835","map__64836","cljs.core/--destructure-map","cljs.core.get","clouds.core/get-volumetric-data!","frame","volumetric-data-tex","state","tex-size","clouds.config/atlas-tex-size","sprog.webgl.shaders.run_purefrag_shader_BANG_","clouds.atlas/atlas-frag","p__64837","map__64838","clouds.core/trace!","resolution","ray-pos-texs","accumulation-texs","ray-dir-texs","color-texs","ray-meta-texs","trace?","vec__64839","cljs.core.nth","vec__64842","vec__64845","vec__64848","vec__64851","front-pos-tex","back-pos-tex","front-dir-tex","back-dir-tex","front-color-tex","back-color-tex","front-accumulation-tex","back-accumulation-tex","front-meta-tex","back-meta-tex","clouds.shaders/trace-frag","cljs.core.repeatedly","cljs.core.rand","cljs.core.update","cljs.core/reverse","p__64854","map__64855","clouds.core/render!","sprog.webgl.shaders/run-purefrag-shader!","clouds.shaders/render-frag","cljs.core/first","sprog.util/seconds-since-startup","p__64856","map__64857","clouds.core/update-page!","cljs.core/inc","cljs.core.dissoc","clouds.core/init-page!","sprog.webgl.textures/create-tex","clouds.core/init","sprog.input.keyboard/add-key-callback","sprog.util.log","sprog.webgl.core.merge_sprog_state_BANG_","sprog.webgl.core/start-sprog!","clouds.core/restart!","js/document.body.removeChild","sprog.webgl.core/sprog-context","clouds.core/pre-init","js/window.addEventListener","_"],"sourcesContent":["(ns clouds.core\n  (:require\n   [clouds.shaders :as s]\n   [clouds.config :as c]\n   [clouds.atlas :as a]\n   [sprog.util :as u]\n   [clojure.string :as str]\n   [sprog.webgl.core :refer [start-sprog!\n                             sprog-context\n                             sprog-state\n                             merge-sprog-state!]]\n   [sprog.input.keyboard :refer [add-key-callback]]\n   [sprog.dom.canvas :refer [maximize-canvas\n                             resize-gl-canvas\n                             canvas-resolution]]\n   [sprog.webgl.shaders :refer [run-purefrag-shader!\n                                run-shaders!]]\n   [sprog.webgl.textures :refer [create-tex\n                                 tex-data-array\n                                 html-image-tex]]\n   [sprog.input.mouse :refer [mouse-pos mouse-down?]]\n\n   #_[fxrng.rng :refer [fxrand\n                      fxrand-int]]))\n\n(defn expand-canvas [gl]\n  (maximize-canvas gl.canvas {:max-pixel-ratio 2\n                              :square? false}))\n\n(defn set-resolution [gl]\n  (let [manual-resolution (vec\n                           (doall\n                            (map parse-long\n                                 (str/split (.get (js/URLSearchParams.\n                                                   js/window.location.search)\n                                                  \"resolution\")\n                                            \"x\"))))]\n    (if (every? some? manual-resolution)\n      (do (resize-gl-canvas gl\n                            manual-resolution)\n          manual-resolution)\n      (do (maximize-canvas gl.canvas {:square? true})\n          (canvas-resolution gl)))))\n\n(defn get-volumetric-data! [{:keys [gl frame volumetric-data-tex] :as state}]\n  (when (== frame 0)\n    (let [tex-size [c/atlas-tex-size c/atlas-tex-size]]\n      (run-purefrag-shader! gl\n                            a/atlas-frag\n                            tex-size\n                            {\"size\" tex-size}\n                            {:target volumetric-data-tex})))\n  state)\n\n(defn trace! [{:keys [gl\n                      resolution\n                      frame\n                      ray-pos-texs\n                      accumulation-texs\n                      ray-dir-texs\n                      color-texs\n                      ray-meta-texs\n                      trace?]\n               :as state}]\n  (if true #_(or (zero? frame)\n          trace?)\n    (let [[front-pos-tex back-pos-tex] ray-pos-texs\n          [front-dir-tex back-dir-tex] ray-dir-texs\n          [front-color-tex back-color-tex] color-texs\n          [front-accumulation-tex back-accumulation-tex] accumulation-texs\n          [front-meta-tex back-meta-tex] ray-meta-texs]\n      (run-purefrag-shader! gl\n                            s/trace-frag\n                            resolution\n                            {\"size\" resolution\n                             \"frame\" frame\n                             \"rand-offset\" (u/genv 3 (- (rand 2000)\n                                                        1000))\n                             \"ray-pos-tex\" front-pos-tex\n                             \"ray-dir-tex\" front-dir-tex\n                             \"color-tex\" front-color-tex\n                             \"accumulation-tex\" front-accumulation-tex\n                             \"ray-meta-tex\" front-meta-tex}\n                            {:target [back-color-tex\n                                      back-pos-tex\n                                      back-dir-tex\n                                      back-accumulation-tex\n                                      back-meta-tex]})\n      (-> state\n          (update :color-texs reverse)\n          (update :ray-pos-texs reverse)\n          (update :ray-dir-texs reverse)\n          (update :accumulation-texs reverse)\n          (update :ray-meta-texs reverse)))\n    state))\n\n(defn render! [{:keys [gl resolution \n                       volumetric-data-tex \n                       accumulation-texs] :as state}]\n  (run-purefrag-shader! gl \n                        s/render-frag \n                        resolution \n                        {\"size\" resolution\n                         \"atlas\" volumetric-data-tex\n                         \"final\" (first accumulation-texs)\n                         \"now\" (u/seconds-since-startup)})\n  state)\n\n(defn update-page! [{:keys [] :as state}]\n  (-> state\n      trace!\n      render!\n      (update :frame inc)\n      (dissoc :trace?)))\n\n(defn init-page! [gl]\n  (expand-canvas gl)\n  (let [resolution (canvas-resolution gl)]\n    {:gl gl\n     :frame 0\n     :resolution resolution\n     :volumetric-data-tex (create-tex gl :u32 c/atlas-tex-size)\n     :color-texs (u/genv 2 (create-tex gl :u32 resolution))\n     :accumulation-texs (u/genv 2 (create-tex gl :u32 resolution))\n     :ray-meta-texs (u/genv 2  (create-tex gl :u32 resolution)) \n     :ray-pos-texs (u/genv 2 (create-tex gl :u32 resolution))\n     :ray-dir-texs (u/genv 2 (create-tex gl :u32 resolution))}))\n\n(defn init []\n  (add-key-callback \"t\" #(do (u/log \"gey\")\n                             (merge-sprog-state! {:trace? true})))\n  (start-sprog! init-page! update-page!))\n\n(defn ^:dev/after-load restart! []\n  (js/document.body.removeChild (.-canvas (sprog-context)))\n  (init))\n\n(defn pre-init []\n  (js/window.addEventListener \"load\" (fn [_] (init))))"]}