{"version":3,"sources":["clouds/core.cljs"],"mappings":"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","names":["clouds.core/render?","cljs.core.atom","cljs.core/add-watch","_","new","sprog.util.log","clouds.core/expand-canvas","gl","sprog.dom.canvas.maximize_canvas","clouds.core/set-resolution","manual-resolution","cljs.core/vec","cljs.core.doall","cljs.core.map","cljs.core/parse-long","clojure.string.split","js/URLSearchParams","js/window.location.search","cljs.core/every?","cljs.core/some?","sprog.dom.canvas/resize-gl-canvas","sprog.dom.canvas/canvas-resolution","clouds.core/get-skybox!","resolution","tex","sprog.webgl.textures/create-tex","sprog.webgl.shaders.run_purefrag_shader_BANG_","clouds.shaders/worley-frag","p__37327","map__37328","cljs.core/--destructure-map","cljs.core.get","clouds.core/trace!","frame","ray-pos-texs","accumulation-texs","attenuation-texs","ray-dir-texs","color-texs","ray-meta-texs","worley-tex","state","cljs.core/deref","vec__37329","cljs.core.nth","vec__37332","vec__37335","vec__37338","vec__37341","vec__37344","front-pos-tex","back-pos-tex","front-dir-tex","back-dir-tex","front-color-tex","back-color-tex","front-accumulation-tex","back-accumulation-tex","front-attenuation-tex","back-attenuation-tex","front-meta-tex","back-meta-tex","clouds.shaders/trace-frag","cljs.core.repeatedly","cljs.core.rand","cljs.core.update","cljs.core/reverse","p__37347","map__37348","clouds.core/render!","sprog.webgl.shaders/run-purefrag-shader!","clouds.shaders/render-frag","cljs.core/first","p__37349","map__37350","clouds.core/update-page!","cljs.core/inc","cljs.core.dissoc","clouds.core/init-page!","clouds.config/atlas-tex-size","cljs.core/flatten","clouds.config/sphere-octaves","sprog.util/TAU","clouds.core/init","sprog.input.keyboard/add-key-callback","cljs.core.swap_BANG_","cljs.core/not","sprog.webgl.core/start-sprog!","clouds.core/restart!","js/document.body.removeChild","sprog.webgl.core/sprog-context","clouds.core/pre-init","js/window.addEventListener"],"sourcesContent":["(ns clouds.core\n  (:require\n   [clouds.shaders :as s]\n   [clouds.config :as c]\n   [clouds.atlas :as a]\n   [sprog.util :as u]\n   [clojure.string :as str]\n   [sprog.webgl.core :refer [start-sprog!\n                             sprog-context\n                             sprog-state\n                             merge-sprog-state!]]\n   [sprog.input.keyboard :refer [add-key-callback]]\n   [sprog.dom.canvas :refer [maximize-canvas\n                             resize-gl-canvas\n                             canvas-resolution]]\n   [sprog.webgl.shaders :refer [run-purefrag-shader!\n                                run-shaders!]]\n   [sprog.webgl.textures :refer [create-tex\n                                 tex-data-array\n                                 html-image-tex]]\n   [sprog.input.mouse :refer [mouse-pos mouse-down?]]))\n\n(def render? (atom true))\n(add-watch render? nil\n           (fn [_ _ _ new]\n             (u/log \"rendering?\" new)))\n\n(defn expand-canvas [gl]\n  (maximize-canvas gl.canvas {\n                              :square? false}))\n\n(defn set-resolution [gl]\n  (let [manual-resolution (vec\n                           (doall\n                            (map parse-long\n                                 (str/split (.get (js/URLSearchParams.\n                                                   js/window.location.search)\n                                                  \"resolution\")\n                                            \"x\"))))]\n    (if (every? some? manual-resolution)\n      (do (resize-gl-canvas gl\n                            manual-resolution)\n          manual-resolution)\n      (do (maximize-canvas gl.canvas {:square? true})\n          (canvas-resolution gl)))))\n\n(defn get-skybox! [gl resolution]\n  (let [tex (create-tex gl :u32 resolution)]\n    (run-purefrag-shader! gl\n                          s/worley-frag\n                          resolution\n                          {\"size\" resolution}\n                          {:target tex})\n    tex))\n\n(defn trace! [{:keys [gl\n                      resolution\n                      frame\n                      ray-pos-texs\n                      accumulation-texs\n                      attenuation-texs\n                      ray-dir-texs\n                      color-texs\n                      ray-meta-texs\n                      worley-tex]\n               :as state}]\n  (if @render?\n    (let [[front-pos-tex back-pos-tex] ray-pos-texs\n          [front-dir-tex back-dir-tex] ray-dir-texs\n          [front-color-tex back-color-tex] color-texs\n          [front-accumulation-tex back-accumulation-tex] accumulation-texs\n          [front-attenuation-tex back-attenuation-tex] attenuation-texs\n          [front-meta-tex back-meta-tex] ray-meta-texs]\n      (run-purefrag-shader! gl\n                            s/trace-frag\n                            resolution\n                            {\"size\" resolution\n                             \"frame\" frame\n                             \"rand-offset\" (u/genv 3 (- (rand 2000)\n                                                        1000))\n                             \"ray-pos-tex\" front-pos-tex\n                             \"ray-dir-tex\" front-dir-tex\n                             \"color-tex\" front-color-tex\n                             \"accumulation-tex\" front-accumulation-tex\n                             \"attenuation-tex\" front-attenuation-tex\n                             \"ray-meta-tex\" front-meta-tex\n                             \"skybox\" worley-tex}\n                            {:target [back-color-tex\n                                      back-pos-tex\n                                      back-dir-tex\n                                      back-accumulation-tex\n                                      back-attenuation-tex\n                                      back-meta-tex]})\n      (-> state\n          (update :color-texs reverse)\n          (update :ray-pos-texs reverse)\n          (update :ray-dir-texs reverse)\n          (update :accumulation-texs reverse)\n          (update :attenuation-texs reverse)\n          (update :ray-meta-texs reverse)))\n    state))\n\n(defn render! [{:keys [gl resolution \n                       worley-tex \n                       accumulation-texs] :as state}]\n  (run-purefrag-shader! gl \n                        s/render-frag \n                        resolution \n                        {\"size\" resolution\n                         \"skybox\" worley-tex\n                         \"final\" (first accumulation-texs)})\n  state)\n\n(defn update-page! [{:keys [] :as state}]\n  (-> state\n      trace!\n      render!\n      (update :frame inc)\n      (dissoc :trace?)))\n\n(defn init-page! [gl]\n  (expand-canvas gl)\n  \n  (let [resolution (canvas-resolution gl)]\n    {:gl gl\n     :frame 0\n     :resolution resolution\n     :worley-tex (get-skybox! gl resolution)\n     :volumetric-data-tex (create-tex gl :u32 c/atlas-tex-size)\n     :color-texs (u/genv 2 (create-tex gl :u32 resolution))\n     :accumulation-texs (u/genv 2 (create-tex gl :u32 resolution))\n     :attenuation-texs (u/genv 2 (create-tex gl :u32 resolution))\n     :ray-meta-texs (u/genv 2  (create-tex gl :u32 resolution))\n     :ray-pos-texs (u/genv 2 (create-tex gl :u32 resolution))\n     :ray-dir-texs (u/genv 2 (create-tex gl :u32 resolution))\n     :sphere-axes (vec (flatten (u/genv c/sphere-octaves (u/genv 3 (- (rand 2) 1)))))\n     :sphere-angles (u/genv c/sphere-octaves (rand u/TAU))}))\n\n(defn init []\n  (add-key-callback \"r\"\n                    (fn []\n                      (swap! render? not)))\n  (start-sprog! init-page! update-page!))\n\n(defn ^:dev/after-load restart! []\n  (js/document.body.removeChild (.-canvas (sprog-context)))\n  (init))\n\n(defn pre-init []\n  (js/window.addEventListener \"load\" (fn [_] (init))))"]}