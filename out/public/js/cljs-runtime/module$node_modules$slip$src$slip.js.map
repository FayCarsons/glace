{
"version":3,
"file":"module$node_modules$slip$src$slip.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/slip/src/slip.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$slip$src$slip\"] = function(global,require,module,exports) {\n/*\n * slip.js: A plain JavaScript SLIP implementation that works in both the browser and Node.js\n *\n * Copyright 2014, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global exports, define*/\n(function (root, factory) {\n    \"use strict\";\n\n    if (typeof exports === \"object\") {\n        // We're in a CommonJS-style loader.\n        root.slip = exports;\n        factory(exports);\n    } else if (typeof define === \"function\" && define.amd) {\n        // We're in an AMD-style loader.\n        define([\"exports\"], function (exports) {\n            root.slip = exports;\n            return (root.slip, factory(exports));\n        });\n    } else {\n        // Plain old browser.\n        root.slip = {};\n        factory(root.slip);\n    }\n}(this, function (exports) {\n\n    \"use strict\";\n\n    var slip = exports;\n\n    slip.END = 192;\n    slip.ESC = 219;\n    slip.ESC_END = 220;\n    slip.ESC_ESC = 221;\n\n    slip.byteArray = function (data, offset, length) {\n        return data instanceof ArrayBuffer ? new Uint8Array(data, offset, length) : data;\n    };\n\n    slip.expandByteArray = function (arr) {\n        var expanded = new Uint8Array(arr.length * 2);\n        expanded.set(arr);\n\n        return expanded;\n    };\n\n    slip.sliceByteArray = function (arr, start, end) {\n        var sliced = arr.buffer.slice ? arr.buffer.slice(start, end) : arr.subarray(start, end);\n        return new Uint8Array(sliced);\n    };\n\n    /**\n     * SLIP encodes a byte array.\n     *\n     * @param {Array-like} data a Uint8Array, Node.js Buffer, ArrayBuffer, or [] containing raw bytes\n     * @param {Object} options encoder options\n     * @return {Uint8Array} the encoded copy of the data\n     */\n    slip.encode = function (data, o) {\n        o = o || {};\n        o.bufferPadding = o.bufferPadding || 4; // Will be rounded to the nearest 4 bytes.\n        data = slip.byteArray(data, o.offset, o.byteLength);\n\n        var bufLen = (data.length + o.bufferPadding + 3) & ~0x03,\n            encoded = new Uint8Array(bufLen),\n            j = 1;\n\n        encoded[0] = slip.END;\n\n        for (var i = 0; i < data.length; i++) {\n            // We always need enough space for two value bytes plus a trailing END.\n            if (j > encoded.length - 3) {\n                encoded = slip.expandByteArray(encoded);\n            }\n\n            var val = data[i];\n            if (val === slip.END) {\n                encoded[j++] = slip.ESC;\n                val = slip.ESC_END;\n            } else if (val === slip.ESC) {\n                encoded[j++] = slip.ESC;\n                val = slip.ESC_ESC;\n            }\n\n            encoded[j++] = val;\n        }\n\n        encoded[j] = slip.END;\n        return slip.sliceByteArray(encoded, 0, j + 1);\n    };\n\n    /**\n     * Creates a new SLIP Decoder.\n     * @constructor\n     *\n     * @param {Function} onMessage a callback function that will be invoked when a message has been fully decoded\n     * @param {Number} maxBufferSize the maximum size of a incoming message; larger messages will throw an error\n     */\n    slip.Decoder = function (o) {\n        o = typeof o !== \"function\" ? o || {} : {\n            onMessage: o\n        };\n\n        this.maxMessageSize = o.maxMessageSize || 10485760; // Defaults to 10 MB.\n        this.bufferSize = o.bufferSize || 1024; // Message buffer defaults to 1 KB.\n        this.msgBuffer = new Uint8Array(this.bufferSize);\n        this.msgBufferIdx = 0;\n        this.onMessage = o.onMessage;\n        this.onError = o.onError;\n        this.escape = false;\n    };\n\n    var p = slip.Decoder.prototype;\n\n    /**\n     * Decodes a SLIP data packet.\n     * The onMessage callback will be invoked when a complete message has been decoded.\n     *\n     * @param {Array-like} data an incoming stream of bytes\n     */\n    p.decode = function (data) {\n        data = slip.byteArray(data);\n\n        var msg;\n        for (var i = 0; i < data.length; i++) {\n            var val = data[i];\n\n            if (this.escape) {\n                if (val === slip.ESC_ESC) {\n                    val = slip.ESC;\n                } else if (val === slip.ESC_END) {\n                    val = slip.END;\n                }\n            } else {\n                if (val === slip.ESC) {\n                    this.escape = true;\n                    continue;\n                }\n\n                if (val === slip.END) {\n                    msg = this.handleEnd();\n                    continue;\n                }\n            }\n\n            var more = this.addByte(val);\n            if (!more) {\n                this.handleMessageMaxError();\n            }\n        }\n\n        return msg;\n    };\n\n    p.handleMessageMaxError = function () {\n        if (this.onError) {\n            this.onError(this.msgBuffer.subarray(0),\n                \"The message is too large; the maximum message size is \" +\n                this.maxMessageSize / 1024 + \"KB. Use a larger maxMessageSize if necessary.\");\n        }\n\n        // Reset everything and carry on.\n        this.msgBufferIdx = 0;\n        this.escape = false;\n    };\n\n    // Unsupported, non-API method.\n    p.addByte = function (val) {\n        if (this.msgBufferIdx > this.msgBuffer.length - 1) {\n            this.msgBuffer = slip.expandByteArray(this.msgBuffer);\n        }\n\n        this.msgBuffer[this.msgBufferIdx++] = val;\n        this.escape = false;\n\n        return this.msgBuffer.length < this.maxMessageSize;\n    };\n\n    // Unsupported, non-API method.\n    p.handleEnd = function () {\n        if (this.msgBufferIdx === 0) {\n            return; // Toss opening END byte and carry on.\n        }\n\n        var msg = slip.sliceByteArray(this.msgBuffer, 0, this.msgBufferIdx);\n        if (this.onMessage) {\n            this.onMessage(msg);\n        }\n\n        // Clear our pointer into the message buffer.\n        this.msgBufferIdx = 0;\n\n        return msg;\n    };\n\n    return slip;\n}));\n\n};"],
"names":["shadow$provide","global","require","module","exports","root","factory","slip","define","amd","END","ESC","ESC_END","ESC_ESC","byteArray","slip.byteArray","data","offset","length","ArrayBuffer","Uint8Array","expandByteArray","slip.expandByteArray","arr","expanded","set","sliceByteArray","slip.sliceByteArray","start","end","sliced","buffer","slice","subarray","encode","slip.encode","o","bufferPadding","byteLength","encoded","j","i","val","Decoder","slip.Decoder","onMessage","maxMessageSize","bufferSize","msgBuffer","msgBufferIdx","onError","escape","p","prototype","decode","p.decode","msg","handleEnd","addByte","more","handleMessageMaxError","p.handleMessageMaxError","p.addByte","p.handleEnd"]
}
