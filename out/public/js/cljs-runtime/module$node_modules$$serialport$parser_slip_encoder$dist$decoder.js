shadow$provide.module$node_modules$$serialport$parser_slip_encoder$dist$decoder=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.SlipDecoder=void 0;global=require("module$node_modules$stream_browserify$index");class SlipDecoder extends global.Transform{constructor(options={}){super(options);const {START,ESC=219,END=192,ESC_START,ESC_END=220,ESC_ESC=221}=options;this.opts=
{START,ESC,END,ESC_START,ESC_END,ESC_ESC};this.buffer=Buffer.alloc(0);this.start=this.escape=!1}_transform(chunk,encoding,cb){for(encoding=0;encoding<chunk.length;encoding++){let byte=chunk[encoding];if(byte===this.opts.START)this.start=!0;else{void 0==this.opts.START&&(this.start=!0);if(this.escape)byte===this.opts.ESC_START&&this.opts.START?byte=this.opts.START:byte===this.opts.ESC_ESC?byte=this.opts.ESC:byte===this.opts.ESC_END?byte=this.opts.END:(this.escape=!1,this.push(this.buffer),this.buffer=
Buffer.alloc(0));else{if(byte===this.opts.ESC){this.escape=!0;continue}if(byte===this.opts.END){this.push(this.buffer);this.buffer=Buffer.alloc(0);this.start=this.escape=!1;continue}}this.escape=!1;this.start&&(this.buffer=Buffer.concat([this.buffer,Buffer.from([byte])]))}}cb()}_flush(cb){this.push(this.buffer);this.buffer=Buffer.alloc(0);cb()}}exports.SlipDecoder=SlipDecoder}
//# sourceMappingURL=module$node_modules$$serialport$parser_slip_encoder$dist$decoder.js.map
