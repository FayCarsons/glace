shadow$provide.module$node_modules$$serialport$parser_regex$dist$index=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});exports.RegexParser=void 0;global=require("module$node_modules$stream_browserify$index");class RegexParser extends global.Transform{constructor({regex,...options}){options={encoding:"utf8",...options};if(void 0===regex)throw new TypeError('"options.regex" must be a regular expression pattern or object');regex instanceof RegExp||(regex=
new RegExp(regex.toString()));super(options);this.regex=regex;this.data=""}_transform(chunk,encoding,cb){chunk=(this.data+chunk).split(this.regex);this.data=chunk.pop()||"";chunk.forEach(part=>{this.push(part)});cb()}_flush(cb){this.push(this.data);this.data="";cb()}}exports.RegexParser=RegexParser}
//# sourceMappingURL=module$node_modules$$serialport$parser_regex$dist$index.js.map
