{"version":3,"sources":["raytracing/core.cljs"],"mappings":";AAiBA,GAAA,QAAAA,uCAAAC,4CAAAC;AAAA;AAAA,AAAA,AAASC,0BAAQ,6CAAA,7CAACC;;AAClB,GAAA,QAAAJ,uCAAAC,4CAAAI;AAAA;AAAA,AAAA,AAASC,oCAAkB,6CAAA,7CAACF;;AAC5B,GAAA,QAAAJ,uCAAAC,4CAAAM;AAAA;AAAA,AAAA,AAASC,2BAAS,6CAAA,7CAACJ;;AACnB,GAAA,QAAAJ,uCAAAC,4CAAAQ;AAAA;AAAA,AAAA,AAASC,4BAAU,6CAAA,7CAACN;;AAEpB,6BAAA,7BAAKO;AAEL,AAAKC,6BAAW,6CAAA,7CAACR;AACjB,wBAAA,mFAAA,IAAA,KAAA,IAAA,IAAA,5HAAKS;AACL,wBAAA,mFAAA,IAAA,KAAA,IAAA,IAAA,5HAAKC;AAEL,AAAKC,yBAAO,AAACC,sGAAM,0DAAA,IAAA,5DAAI,kDAAA,jDAAG,AAACC;AAQ3B,mCAAA,AAAA,nCAAKC;AAaL,AAAKC,qCACH,8BAAA,2CAAA,oJAAA,iJAAA,qNAAA,nkBAACC,mIACU,AAACC,4CAAIR,sBAAME,+EACb,AAACM,4CAAIP,sBAAMC,+EAEX,AAACC,sGAAM,6CAAA,7CAACC,gHACR,AAACD,sGAAM,6CAAA,7CAACC,gEAChB,uVAAA,AAAA,vVAACK,sHACAC,mCACA,qEAAA,AAAA,+GAAA,pLAACC;AAyCL,oCAAA,pCAAMC;AAAN,AACE,SAAA,AAAAC,LAAMC,qBAAIxB;iBAAV,bACMyB,gGAAY,AAAA,AAAAD,gBAAgB,AAAA,AAAAA;AADlC,AAEE,AAACE,sCAAmBF;;AACpB,AAACG,6CAAeH;;AAChB,uCAAA,AAAAD,8DAAA,2CAAA,0DAAA,2CAAA,kBAAA,qLAAA,4DAAA,2CAAA,MAAA,AAAAA,kDAAA,oDAAA,2CAAA,QAAA,AAAAA,lsBAACK,uDAAoBzB,mCACDsB,kKACiBA,mBACC,CAAG,AAACP,4CAAIP,sBAAMC,0BACZ,kEAAA,jEAAG,AAACiB,SAAS,CAAA,AAAAN,8CAAA,9BAAId,kLAClBJ,yJACFI;;AACrC,AAACqB,mDAAMrB,2BAAWsB;;AAElB,OAACC,sBAAyBV;;AAE9B,uBAAA,vBAAMW;AAAN,AACE,IAAMT,KAAG,AAACU;AAAV,AACE,AAACC,sBAAOnC,wBAAQwB;;AAChB,iDAAA,jDAACW,sBAAO1B;;AACR,AAAC0B,sBAAO9B,yBAAS,AAAC+B,mCAAcZ,GAAGhB;;AACnC,AAAC2B,sBAAO5B,0BAAU,AAAoBiB;;AACtC,uFAAA,AAAAD,6FAAA,AAAAA,pLAACc,oFAAiBb,mBAAIjB,6FAAWF;;AACjC,8MAAA,2CAAA,0DAAA,2CAAA,OAAA,yJAAA,4DAAA,2CAAA,rmBAACuB,uCAAmB,AAACU,0CACAd,GACA,AAACe,4DAAWxB,mCACZP,qQACkBA,2BAAWA,wJAEjB,gFAAA,yDAAA,2CAAA,kEAAA,2DAAA,+DAAA,hXAACgC,6EACAhB;;AAIlC,AAACG,6CAAeH;;AAChB,OAACW,sBAAOhC,kCAAkB,AAACmC,0CACAd,GACA,AAACX,sGAAM,AAAC0B,4DAAWvB;;AAGlD,gCAAA,hCAAuByB;AAAvB,AACE,AAACC,0BAA6B,AAAA,AAAAnB,gBAAWvB;;AACzC,OAACiC;;AAEH,2BAAA,3BAAMU;AAAN,AACE,+BAAA,xBAACC,+BAAkC,WAAKC;AAAL,AAAQ,AAACZ;;AACP,OAACX","names":["js/raytracing","js/raytracing.core","js/raytracing.core.gl-atom","raytracing.core/gl-atom","cljs.core.atom","js/raytracing.core.render-sprog-atom","raytracing.core/render-sprog-atom","js/raytracing.core.tex-atom","raytracing.core/tex-atom","js/raytracing.core.buff-atom","raytracing.core/buff-atom","raytracing.core/resolution","raytracing.core/frame-atom","raytracing.core/o-vec","raytracing.core/h-vec","raytracing.core/preset","sprog.util.log","cljs.core.rand","raytracing.core/init-frag-source","raytracing.core/render-frag-source","clojure.walk/postwalk-replace","cljs.core.nth","sprog.iglu.chunks.merge_chunks","sprog.iglu.chunks/simplex-3d-chunk","sprog.iglu.chunks.get_fbm_chunk","raytracing.core/update-page!","cljs.core/deref","gl","resolution","sprog.webgl.canvas/maximize-gl-canvas","sprog.webgl.framebuffers/target-screen!","sprog.webgl.shaders/run-purefrag-sprog","Math/sin","cljs.core.swap_BANG_","cljs.core/inc","js/requestAnimationFrame","raytracing.core/init","sprog.webgl.canvas/create-gl-canvas","cljs.core/reset!","sprog.webgl.textures/create-f8-tex","sprog.webgl.framebuffers.target_textures_BANG_","sprog.webgl.shaders/create-purefrag-sprog","sprog.iglu.core.iglu__GT_glsl","sprog.webgl.textures.html_image_texture","raytracing.core/restart!","js/document.body.removeChild","raytracing.core/pre-init","js/window.addEventListener","_"],"sourcesContent":["(ns raytracing.core\n  (:require [sprog.util :as u]\n            [clojure.walk :refer [postwalk-replace]]\n            [sprog.webgl.shaders :refer [create-purefrag-sprog\n                                         run-purefrag-sprog]]\n            [sprog.webgl.textures :refer [html-image-texture\n                                          create-f8-tex]]\n            [sprog.webgl.framebuffers :refer [target-screen!\n                                              target-textures!]]\n            [sprog.webgl.canvas :refer [create-gl-canvas\n                                        maximize-gl-canvas]] \n            [sprog.iglu.core :refer [iglu->glsl]]\n            [sprog.iglu.chunks :refer [merge-chunks \n                                       get-fbm-chunk \n                                       simplex-3d-chunk]]))\n\n\n(defonce gl-atom (atom nil))\n(defonce render-sprog-atom (atom nil))\n(defonce tex-atom (atom nil))\n(defonce buff-atom (atom nil))\n\n(def resolution 1000)\n\n(def frame-atom (atom 0))\n(def o-vec [5 10 2 3 7])\n(def h-vec [0.1 0.23 0.9 0.1 0.5])\n#_(u/log (def preset (Math/floor (rand (count o-vec)))))\n(def preset (u/log (if (> (rand) 0.5)\n              2 4)))\n\n; preset 4 z1 3.72699 z2 0.18906\n; preset 2 z1 2.45000 z2 0.95859\n; preset 2 z1 0.16523 z2 0.03849\n; preset 2 z1 1.26605 z2 0.003612\n\n(def init-frag-source\n  '{:version \"300 es\"\n    :precision {float highp}\n    :uniforms {size vec2\n               tex sampler2D}\n    :outputs {fragColor vec4}\n    :signatures {main ([] void)}\n    :functions {main \n                ([]\n                 (=vec2 pos (/ gl_FragCoord.xy size))\n                 (= fragColor (texture tex pos))\n                 )}})\n\n(def render-frag-source\n  (postwalk-replace\n   {:octaves (nth o-vec preset)\n    :hurst (nth h-vec preset)\n    \n    :zoom1 (u/log (rand 2))\n    :zoom2 (u/log (rand 2))}\n   (merge-chunks\n    simplex-3d-chunk\n    (get-fbm-chunk 'snoise 3)\n    '{:version \"300 es\"\n      :precision {float highp}\n      :uniforms {size vec2\n                 frame int\n                 tex sampler2D\n                 hurst float}\n      :outputs {fragColor vec4}\n      :signatures {main ([] void)}\n      :functions {main\n                  ([]\n                   (=vec2 pos (/ gl_FragCoord.xy size))\n                   (=float time (* (float frame) 0.0003))\n                   #_(=vec3 outVek (vec3 (+ pos\n                                            (fbm (vec2\n                                                  (+ (* pos.x :zoom1) (cos time))\n                                                  (+ (* pos.y :zoom2) (sin time)))\n                                                 :octaves\n                                                 :hurst))\n                                         (+ (+ (* pos.x :zoom3) time)\n                                            (fbm (vec2\n                                                  (+ (* pos.y :zoom4) (cos time))\n                                                  (+ (* (+ (* pos.x :zoom5) (sin time)) 0.5) 0.7))\n                                                 :octaves\n                                                 :hurst))))\n                   #_(= fragColor (+ (vec4 outVek \"1.0\")\n                                     (vec4 (* (* (sin (* time \"1.5\"))\n                                                 (snoise (* pos \"10.0\")))\n                                              \"0.2\")\n                                           (* (*\n                                               (cos time) \"0.2\")\n                                              (snoise (* pos.yx \"10.0\")))\n                                           (* (* (sin (* time \"1.333\")) (snoise (* pos \"10.0\"))) \"0.2\") 1)))\n                   (=vec2 outVek (vec2 (fbm (vec3 (* pos :zoom1) time) \n                                      :octaves\n                                      :hurst)\n                          (fbm (vec3 (* pos :zoom2) time) \n                               :octaves\n                               :hurst)))\n                   (= fragColor (texture tex outVek)))}})))\n\n(defn update-page! [] \n  (let [gl @gl-atom\n        resolution [gl.canvas.width gl.canvas.height]] \n    (maximize-gl-canvas gl) \n    (target-screen! gl)\n    (run-purefrag-sprog @render-sprog-atom\n                        resolution\n                        {:floats {\"size\" resolution \n                                  \"hurst\" (+ (nth h-vec preset) \n                                            (* (Math/sin (* @frame-atom 0.01)) 0.1))}\n                         :textures {\"tex\" @tex-atom}\n                         :ints {\"frame\" @frame-atom}}) \n    (swap! frame-atom inc) \n    \n    (js/requestAnimationFrame update-page!)))\n\n(defn init []\n  (let [gl (create-gl-canvas)]\n    (reset! gl-atom gl) \n    (reset! frame-atom 0)\n    (reset! tex-atom (create-f8-tex gl resolution))\n    (reset! buff-atom (.createFramebuffer gl))\n    (target-textures! gl @buff-atom @tex-atom)\n    (run-purefrag-sprog (create-purefrag-sprog \n                         gl \n                         (iglu->glsl init-frag-source))\n                         resolution\n                         {:floats {\"size\" [resolution resolution]}\n                          :textures {\"tex\"\n                                     (html-image-texture \n                                      gl\n                                      \"img1\"\n                                      {:filter-mode :nearest\n                                       :wrap-mode :mirror})}})\n    (target-screen! gl)\n    (reset! render-sprog-atom (create-purefrag-sprog\n                               gl\n                               (u/log (iglu->glsl render-frag-source))))))\n\n\n(defn ^:dev/after-load restart! []\n  (js/document.body.removeChild (.-canvas @gl-atom))\n  (init))\n\n(defn pre-init []\n  (js/window.addEventListener \"load\" (fn [_] (init)\n                                       (update-page!))))"]}