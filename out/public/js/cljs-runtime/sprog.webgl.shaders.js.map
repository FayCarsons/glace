{"version":3,"sources":["sprog/webgl/shaders.cljs"],"mappings":"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","names":["sprog.webgl.shaders/create-shader","gl","shader-type","source-glsl","shader","or__5043__auto__","fexpr__30948","sprog.util.log","lines","clojure.string/split-lines","digit-count","cljs.core/count","clojure.string.join","p1__30944#","p2__30943#","cljs.core.map","cljs.core.apply","cljs.core/str","cljs.core.take","cljs.core.concat","cljs.core/List","cljs.core.repeat","cljs.core/rest","cljs.core.range","js/Error","sprog.webgl.shaders/create-program","vert-shader","frag-shader","program","sprog.webgl.shaders/create-sprog","vert-source","frag-source","vert-glsl","sprog.iglu.core.iglu__GT_glsl","frag-glsl","cljs.core.atom","cljs.core.into","p1__30951#","clojure.string/replace","clojure.string.split","cljs.core/reverse","cljs.core/vec","cljs.core/re-seq","sprog.webgl.shaders/purefrag-vert-glsl","sprog.iglu.chunks.misc/trivial-vert-source","js/sprog","js/sprog.webgl","js/sprog.webgl.shaders","js/sprog.webgl.shaders.purefrag-vert-pos-bojs-atom","sprog.webgl.shaders/purefrag-vert-pos-bojs-atom","sprog.webgl.shaders/purefrag-vert-pos-boj","cljs.core/not","fexpr__30959","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","sprog.webgl.attributes.create_boj_BANG_","js/Float32Array","cljs.core/clj->js","fexpr__30960","sprog.webgl.shaders/create-purefrag-sprog","sprog","sprog.webgl.attributes/set-sprog-attribute!","p__30973","map__30974","cljs.core/--destructure-map","cljs.core.get","sprog.webgl.shaders/use-sprog!","uniform-map","attribute-map","sprog.webgl.uniforms/set-sprog-uniforms!","sprog.webgl.attributes/set-sprog-attributes!","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","sprog.webgl.shaders/run-sprog!","p__30983","vec__30984","map__30987","cljs.core.nth","seq30975","G__30976","cljs.core/first","cljs.core/next","G__30977","G__30978","G__30979","G__30980","G__30981","G__30982","self__5751__auto__","size","start","length","target","cljs.core/coll?","cljs.core.partial","sprog.webgl.textures/target-textures!","sprog.webgl.textures.target_textures_BANG_","sprog.webgl.textures/target-screen!","vec__30988","offset-x","offset-y","width","height","cljs.core._EQ_","sprog.webgl.shaders/run-purefrag-sprog!","p__30996","vec__30997","seq30991","G__30992","G__30993","G__30994","G__30995","options","sprog.webgl.shaders.run_sprog_BANG_","js/sprog.webgl.shaders.autosprog-cache-atom","sprog.webgl.shaders/autosprog-cache-atom","sprog.webgl.shaders/get-autosprog","shader-sources","autosprog-key","temp__5802__auto__","autosprog","fexpr__31000","sprog.webgl.shaders/run-shaders!","p__31009","vec__31010","seq31001","G__31002","G__31003","G__31004","G__31005","G__31006","G__31007","G__31008","sources","js/sprog.webgl.shaders.purefrag-autosprog-cache-atom","sprog.webgl.shaders/purefrag-autosprog-cache-atom","sprog.webgl.shaders/get-purefrag-autosprog","shader-source","fexpr__31013","sprog.webgl.shaders/run-purefrag-shader!","p__31019","vec__31020","seq31014","G__31015","G__31016","G__31017","G__31018","source","sprog.webgl.shaders.run_purefrag_sprog_BANG_"],"sourcesContent":["(ns sprog.webgl.shaders\n  (:require [sprog.util :as u]\n            [sprog.iglu.core :refer [iglu->glsl]]\n            [sprog.iglu.chunks.misc :refer [trivial-vert-source]]\n            [sprog.webgl.uniforms :refer [set-sprog-uniforms!]]\n            [sprog.webgl.textures :refer [target-textures!\n                                          target-screen!]]\n            [sprog.webgl.attributes :refer [set-sprog-attributes!\n                                            set-sprog-attribute!\n                                            create-boj!]]\n            [clojure.string :refer [split-lines\n                                    join]]))\n\n(defn create-shader [gl shader-type source-glsl]\n  (let [shader (.createShader gl (or ({:frag gl.FRAGMENT_SHADER\n                                       :vert gl.VERTEX_SHADER}\n                                      shader-type)\n                                     shader-type))]\n    (.shaderSource gl shader source-glsl)\n    (.compileShader gl shader)\n    (if (.getShaderParameter gl shader gl.COMPILE_STATUS)\n      shader\n      (do (u/log\n           (let [lines (split-lines source-glsl)\n                 digit-count (count (str (count lines)))]\n             (join \"\\n\"\n                   (map #(str (apply str (take (inc digit-count)\n                                               (concat (str %2) \n                                                       (list \":\")\n                                                       (repeat \" \"))))\n                              \" \"\n                              %1)\n                        lines\n                        (rest (range))))))\n          (throw (js/Error. (str (.getShaderInfoLog gl shader))))))))\n\n(defn create-program [gl vert-shader frag-shader]\n  (let [program (.createProgram gl)]\n    (.attachShader gl program vert-shader)\n    (.attachShader gl program frag-shader)\n    (.linkProgram gl program)\n    (if (.getProgramParameter gl program gl.LINK_STATUS)\n      program\n      (throw (js/Error. (str (.getProgramInfoLog gl program)))))))\n\n(defn create-sprog [gl vert-source frag-source]\n  (let [vert-glsl (if (string? vert-source)\n                    vert-source\n                    (iglu->glsl vert-source))\n        frag-glsl (if (string? frag-source)\n                    frag-source\n                    (iglu->glsl frag-source))\n        program (create-program gl\n                                (create-shader gl :vert vert-glsl)\n                                (create-shader gl :frag frag-glsl))]\n    {:program program\n     :uniform-locations-atom (atom {})\n     :attribute-locations-atom (atom {})\n     :uniform-type-map\n     (into {}\n           (map #(-> %\n                     (clojure.string/replace #\"uniform\\s+\" \"\")\n                     (clojure.string/split #\"\\s+\")\n                     reverse\n                     vec)\n                (re-seq #\"uniform\\s+[A-Za-z0-9\\[\\]]+\\s+[A-Za-z0-9_]+\"\n                        (str vert-glsl\n                             \"\\n\"\n                             frag-glsl))))}))\n\n(def purefrag-vert-glsl (iglu->glsl trivial-vert-source))\n\n(defonce purefrag-vert-pos-bojs-atom (atom {}))\n\n(defn purefrag-vert-pos-boj [gl]\n  (when (not (@purefrag-vert-pos-bojs-atom gl))\n    (swap! purefrag-vert-pos-bojs-atom\n           assoc\n           gl\n           (create-boj! gl\n                        2\n                        {:initial-data (js/Float32Array.\n                                        (clj->js [-1 -1\n                                                  -1 3\n                                                  3 -1]))})))\n  (@purefrag-vert-pos-bojs-atom gl))\n\n(defn create-purefrag-sprog [gl frag-source] \n  (let [sprog (create-sprog gl purefrag-vert-glsl frag-source)]\n    (set-sprog-attribute! gl\n                          sprog\n                          \"vertPos\"\n                          (purefrag-vert-pos-boj gl))\n    sprog))\n\n(defn use-sprog! [gl {:keys [program] :as sprog} uniform-map attribute-map]\n  (.useProgram gl program)\n  (set-sprog-uniforms! gl sprog uniform-map)\n  (set-sprog-attributes! gl sprog attribute-map))\n\n(defn run-sprog! [gl sprog size uniform-map attribute-map start length\n                  & [{:keys [target]}]]\n  (if target\n    (if (coll? target)\n      (apply (partial target-textures! gl) target)\n      (target-textures! gl target))\n    (target-screen! gl))\n  (let [[offset-x offset-y width height]\n        (cond (number? size) [0 0 size size]\n              (= (count size) 2) (vec (concat [0 0] size))\n              (= (count size) 4) (vec size))]\n    (.viewport gl offset-x offset-y width height)\n    (use-sprog! gl sprog uniform-map attribute-map)\n    (.drawArrays gl gl.TRIANGLES start length)))\n\n(defn run-purefrag-sprog! [gl sprog size uniform-map & [options]]\n  (run-sprog! gl\n              sprog\n              size\n              uniform-map\n              {\"vertPos\" (purefrag-vert-pos-boj gl)}\n              0\n              3\n              options))\n\n(defonce autosprog-cache-atom (atom {}))\n\n(defn get-autosprog [gl shader-sources]\n  (let [autosprog-key [gl shader-sources]]\n    (if-let [autosprog (@autosprog-cache-atom autosprog-key)]\n      autosprog\n      (let [autosprog (apply (partial create-sprog gl) shader-sources)]\n        (swap! autosprog-cache-atom assoc autosprog-key autosprog)\n        autosprog))))\n\n(defn run-shaders! [gl sources size uniform-map attribute-map start length\n                      & [options]]\n  (run-sprog! gl\n              (get-autosprog gl sources)\n              size\n              uniform-map\n              attribute-map\n              start\n              length\n              options))\n\n(defonce purefrag-autosprog-cache-atom (atom {}))\n\n(defn get-purefrag-autosprog [gl shader-source]\n  (let [autosprog-key [gl shader-source]]\n    (if-let [autosprog (@purefrag-autosprog-cache-atom autosprog-key)]\n      autosprog\n      (let [autosprog (create-purefrag-sprog gl shader-source)]\n        (swap! purefrag-autosprog-cache-atom assoc autosprog-key autosprog)\n        autosprog))))\n\n(defn run-purefrag-shader! [gl source size uniform-map & [options]]\n  (run-purefrag-sprog! gl\n                       (get-purefrag-autosprog gl source)\n                       size\n                       uniform-map\n                       options))\n"]}