{
"version":3,
"file":"module$node_modules$$serialport$parser_byte_length$dist$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,6DAAA,CAAkF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC1H,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAC/B,aACAC,OAAOC,CAAAA,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAAEI,MAAO,CAAA,CAAT,CAA7C,CACAJ,QAAQK,CAAAA,gBAAR,CAA2B,IAAK,EAC1BC,OAAAA,CAAWR,OAAA,CAAQ,6CAAR,CAMjB,MAAMO,iBAAN,QAA+BC,OAASC,CAAAA,SAAxC,CACIC,WAAW,CAACC,OAAD,CAAU,CACjB,KAAA,CAAMA,OAAN,CACA,IAA8B,QAA9B,GAAI,MAAOA,QAAQC,CAAAA,MAAnB,CACI,KAAM,KAAIC,SAAJ,CAAc,0BAAd,CAAN;AAEJ,GAAqB,CAArB,CAAIF,OAAQC,CAAAA,MAAZ,CACI,KAAM,KAAIC,SAAJ,CAAc,gCAAd,CAAN,CAEJ,IAAKD,CAAAA,MAAL,CAAcD,OAAQC,CAAAA,MACtB,KAAKE,CAAAA,QAAL,CAAgB,CAChB,KAAKC,CAAAA,MAAL,CAAcZ,MAAOa,CAAAA,KAAP,CAAa,IAAKJ,CAAAA,MAAlB,CAVG,CAYrBK,UAAU,CAACC,KAAD,CAAQC,SAAR,CAAmBC,EAAnB,CAAuB,CAE7B,IADIC,SACJ,CADa,CACb,CAAOA,SAAP,CAAgBH,KAAMN,CAAAA,MAAtB,CAAA,CACI,IAAKG,CAAAA,MAAL,CAAY,IAAKD,CAAAA,QAAjB,CAGA,CAH6BI,KAAA,CAAMG,SAAN,CAG7B,CAFAA,SAAA,EAEA,CADA,IAAKP,CAAAA,QAAL,EACA,CAAI,IAAKA,CAAAA,QAAT,GAAsB,IAAKF,CAAAA,MAA3B,GACI,IAAKU,CAAAA,IAAL,CAAU,IAAKP,CAAAA,MAAf,CAEA,CADA,IAAKA,CAAAA,MACL,CADcZ,MAAOa,CAAAA,KAAP,CAAa,IAAKJ,CAAAA,MAAlB,CACd,CAAA,IAAKE,CAAAA,QAAL,CAAgB,CAHpB,CAMJM,GAAA,EAZ6B,CAcjCG,MAAM,CAACH,EAAD,CAAK,CACP,IAAKE,CAAAA,IAAL,CAAU,IAAKP,CAAAA,MAAOS,CAAAA,KAAZ,CAAkB,CAAlB,CAAqB,IAAKV,CAAAA,QAA1B,CAAV,CACA,KAAKC,CAAAA,MAAL,CAAcZ,MAAOa,CAAAA,KAAP,CAAa,IAAKJ,CAAAA,MAAlB,CACdQ;EAAA,EAHO,CA3Bf,CAiCAlB,OAAQK,CAAAA,gBAAR,CAA2BA,gBA5C+F;",
"sources":["node_modules/@serialport/parser-byte-length/dist/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$serialport$parser_byte_length$dist$index\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ByteLengthParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * Emit data every number of bytes\n *\n * A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.\n */\nclass ByteLengthParser extends stream_1.Transform {\n    constructor(options) {\n        super(options);\n        if (typeof options.length !== 'number') {\n            throw new TypeError('\"length\" is not a number');\n        }\n        if (options.length < 1) {\n            throw new TypeError('\"length\" is not greater than 0');\n        }\n        this.length = options.length;\n        this.position = 0;\n        this.buffer = Buffer.alloc(this.length);\n    }\n    _transform(chunk, _encoding, cb) {\n        let cursor = 0;\n        while (cursor < chunk.length) {\n            this.buffer[this.position] = chunk[cursor];\n            cursor++;\n            this.position++;\n            if (this.position === this.length) {\n                this.push(this.buffer);\n                this.buffer = Buffer.alloc(this.length);\n                this.position = 0;\n            }\n        }\n        cb();\n    }\n    _flush(cb) {\n        this.push(this.buffer.slice(0, this.position));\n        this.buffer = Buffer.alloc(this.length);\n        cb();\n    }\n}\nexports.ByteLengthParser = ByteLengthParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","ByteLengthParser","stream_1","Transform","constructor","options","length","TypeError","position","buffer","alloc","_transform","chunk","_encoding","cb","cursor","push","_flush","slice"]
}
