{
"version":3,
"file":"module$node_modules$$serialport$bindings_cpp$dist$win32.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/@serialport/bindings-cpp/dist/win32.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$serialport$bindings_cpp$dist$win32\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WindowsPortBinding = exports.WindowsBinding = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst _1 = require(\".\");\nconst load_bindings_1 = require(\"./load-bindings\");\nconst win32_sn_parser_1 = require(\"./win32-sn-parser\");\nconst debug = (0, debug_1.default)('serialport/bindings-cpp');\nexports.WindowsBinding = {\n    async list() {\n        const ports = await (0, load_bindings_1.asyncList)();\n        // Grab the serial number from the pnp id\n        return ports.map(port => {\n            if (port.pnpId && !port.serialNumber) {\n                const serialNumber = (0, win32_sn_parser_1.serialNumParser)(port.pnpId);\n                if (serialNumber) {\n                    return Object.assign(Object.assign({}, port), { serialNumber });\n                }\n            }\n            return port;\n        });\n    },\n    async open(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        if (!options.path) {\n            throw new TypeError('\"path\" is not a valid port');\n        }\n        if (!options.baudRate) {\n            throw new TypeError('\"baudRate\" is not a valid baudRate');\n        }\n        debug('open');\n        const openOptions = Object.assign({ dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, rtsMode: 'handshake', xon: false, xoff: false, xany: false, hupcl: true }, options);\n        const fd = await (0, load_bindings_1.asyncOpen)(openOptions.path, openOptions);\n        return new WindowsPortBinding(fd, openOptions);\n    },\n};\n/**\n * The Windows binding layer\n */\nclass WindowsPortBinding {\n    constructor(fd, options) {\n        this.fd = fd;\n        this.openOptions = options;\n        this.writeOperation = null;\n    }\n    get isOpen() {\n        return this.fd !== null;\n    }\n    async close() {\n        debug('close');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        const fd = this.fd;\n        this.fd = null;\n        await (0, load_bindings_1.asyncClose)(fd);\n    }\n    async read(buffer, offset, length) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        if (typeof offset !== 'number' || isNaN(offset)) {\n            throw new TypeError(`\"offset\" is not an integer got \"${isNaN(offset) ? 'NaN' : typeof offset}\"`);\n        }\n        if (typeof length !== 'number' || isNaN(length)) {\n            throw new TypeError(`\"length\" is not an integer got \"${isNaN(length) ? 'NaN' : typeof length}\"`);\n        }\n        debug('read');\n        if (buffer.length < offset + length) {\n            throw new Error('buffer is too small');\n        }\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        try {\n            const bytesRead = await (0, load_bindings_1.asyncRead)(this.fd, buffer, offset, length);\n            return { bytesRead, buffer };\n        }\n        catch (err) {\n            if (!this.isOpen) {\n                throw new _1.BindingsError(err.message, { canceled: true });\n            }\n            throw err;\n        }\n    }\n    async write(buffer) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        debug('write', buffer.length, 'bytes');\n        if (!this.isOpen) {\n            debug('write', 'error port is not open');\n            throw new Error('Port is not open');\n        }\n        this.writeOperation = (async () => {\n            if (buffer.length === 0) {\n                return;\n            }\n            await (0, load_bindings_1.asyncWrite)(this.fd, buffer);\n            this.writeOperation = null;\n        })();\n        return this.writeOperation;\n    }\n    async update(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw TypeError('\"options\" is not an object');\n        }\n        if (typeof options.baudRate !== 'number') {\n            throw new TypeError('\"options.baudRate\" is not a number');\n        }\n        debug('update');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncUpdate)(this.fd, options);\n    }\n    async set(options) {\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        debug('set', options);\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncSet)(this.fd, options);\n    }\n    async get() {\n        debug('get');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGet)(this.fd);\n    }\n    async getBaudRate() {\n        debug('getBaudRate');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        return (0, load_bindings_1.asyncGetBaudRate)(this.fd);\n    }\n    async flush() {\n        debug('flush');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await (0, load_bindings_1.asyncFlush)(this.fd);\n    }\n    async drain() {\n        debug('drain');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await this.writeOperation;\n        await (0, load_bindings_1.asyncDrain)(this.fd);\n    }\n}\nexports.WindowsPortBinding = WindowsPortBinding;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","__importDefault","mod","__esModule","Object","defineProperty","value","WindowsPortBinding","WindowsBinding","debug_1","_1","load_bindings_1","win32_sn_parser_1","debug","default","list","map","ports","asyncList","port","pnpId","serialNumber","serialNumParser","assign","open","options","Array","isArray","TypeError","path","baudRate","openOptions","dataBits","lock","stopBits","parity","rtscts","rtsMode","xon","xoff","xany","hupcl","fd","asyncOpen","constructor","writeOperation","close","isOpen","Error","asyncClose","read","buffer","offset","length","isBuffer","isNaN","bytesRead","asyncRead","err","BindingsError","message","canceled","write","asyncWrite","update","asyncUpdate","set","asyncSet","get","asyncGet","getBaudRate","asyncGetBaudRate","flush","asyncFlush","drain","asyncDrain"]
}
