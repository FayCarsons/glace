{
"version":3,
"file":"module$node_modules$$serialport$parser_slip_encoder$dist$encoder.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/@serialport/parser-slip-encoder/dist/encoder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$serialport$parser_slip_encoder$dist$encoder\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SlipEncoder = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that emits SLIP-encoded data for each incoming packet.\n *\n * Runs in O(n) time, adding a 0xC0 character at the end of each\n * received packet and escaping characters, according to RFC 1055.\n */\nclass SlipEncoder extends stream_1.Transform {\n    constructor(options = {}) {\n        super(options);\n        const { START, ESC = 0xdb, END = 0xc0, ESC_START, ESC_END = 0xdc, ESC_ESC = 0xdd, bluetoothQuirk = false } = options;\n        this.opts = {\n            START,\n            ESC,\n            END,\n            ESC_START,\n            ESC_END,\n            ESC_ESC,\n            bluetoothQuirk,\n        };\n    }\n    _transform(chunk, encoding, cb) {\n        const chunkLength = chunk.length;\n        if (this.opts.bluetoothQuirk && chunkLength === 0) {\n            // Edge case: push no data. Bluetooth-quirky SLIP parsers don't like\n            // lots of 0xC0s together.\n            return cb();\n        }\n        // Allocate memory for the worst-case scenario: all bytes are escaped,\n        // plus start and end separators.\n        const encoded = Buffer.alloc(chunkLength * 2 + 2);\n        let j = 0;\n        if (this.opts.bluetoothQuirk == true) {\n            encoded[j++] = this.opts.END;\n        }\n        if (this.opts.START !== undefined) {\n            encoded[j++] = this.opts.START;\n        }\n        for (let i = 0; i < chunkLength; i++) {\n            let byte = chunk[i];\n            if (byte === this.opts.START && this.opts.ESC_START) {\n                encoded[j++] = this.opts.ESC;\n                byte = this.opts.ESC_START;\n            }\n            else if (byte === this.opts.END) {\n                encoded[j++] = this.opts.ESC;\n                byte = this.opts.ESC_END;\n            }\n            else if (byte === this.opts.ESC) {\n                encoded[j++] = this.opts.ESC;\n                byte = this.opts.ESC_ESC;\n            }\n            encoded[j++] = byte;\n        }\n        encoded[j++] = this.opts.END;\n        cb(null, encoded.slice(0, j));\n    }\n}\nexports.SlipEncoder = SlipEncoder;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","SlipEncoder","stream_1","Transform","constructor","options","START","ESC","END","ESC_START","ESC_END","ESC_ESC","bluetoothQuirk","opts","_transform","chunk","encoding","cb","chunkLength","length","encoded","alloc","j","undefined","i","byte","slice"]
}
