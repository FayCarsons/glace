{
"version":3,
"file":"module$node_modules$$serialport$bindings_cpp$dist$poller.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/@serialport/bindings-cpp/dist/poller.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$serialport$bindings_cpp$dist$poller\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Poller = exports.EVENTS = void 0;\nconst debug_1 = __importDefault(require(\"debug\"));\nconst events_1 = require(\"events\");\nconst path_1 = require(\"path\");\nconst node_gyp_build_1 = __importDefault(require(\"node-gyp-build\"));\nconst errors_1 = require(\"./errors\");\nconst { Poller: PollerBindings } = (0, node_gyp_build_1.default)((0, path_1.join)(__dirname, '../'));\nconst logger = (0, debug_1.default)('serialport/bindings-cpp/poller');\nexports.EVENTS = {\n    UV_READABLE: 0b0001,\n    UV_WRITABLE: 0b0010,\n    UV_DISCONNECT: 0b0100,\n};\nfunction handleEvent(error, eventFlag) {\n    if (error) {\n        logger('error', error);\n        this.emit('readable', error);\n        this.emit('writable', error);\n        this.emit('disconnect', error);\n        return;\n    }\n    if (eventFlag & exports.EVENTS.UV_READABLE) {\n        logger('received \"readable\"');\n        this.emit('readable', null);\n    }\n    if (eventFlag & exports.EVENTS.UV_WRITABLE) {\n        logger('received \"writable\"');\n        this.emit('writable', null);\n    }\n    if (eventFlag & exports.EVENTS.UV_DISCONNECT) {\n        logger('received \"disconnect\"');\n        this.emit('disconnect', null);\n    }\n}\n/**\n * Polls unix systems for readable or writable states of a file or serialport\n */\nclass Poller extends events_1.EventEmitter {\n    constructor(fd, FDPoller = PollerBindings) {\n        logger('Creating poller');\n        super();\n        this.poller = new FDPoller(fd, handleEvent.bind(this));\n    }\n    /**\n     * Wait for the next event to occur\n     * @param {string} event ('readable'|'writable'|'disconnect')\n     * @returns {Poller} returns itself\n     */\n    once(event, callback) {\n        switch (event) {\n            case 'readable':\n                this.poll(exports.EVENTS.UV_READABLE);\n                break;\n            case 'writable':\n                this.poll(exports.EVENTS.UV_WRITABLE);\n                break;\n            case 'disconnect':\n                this.poll(exports.EVENTS.UV_DISCONNECT);\n                break;\n        }\n        return super.once(event, callback);\n    }\n    /**\n     * Ask the bindings to listen for an event, it is recommend to use `.once()` for easy use\n     * @param {EVENTS} eventFlag polls for an event or group of events based upon a flag.\n     */\n    poll(eventFlag = 0) {\n        if (eventFlag & exports.EVENTS.UV_READABLE) {\n            logger('Polling for \"readable\"');\n        }\n        if (eventFlag & exports.EVENTS.UV_WRITABLE) {\n            logger('Polling for \"writable\"');\n        }\n        if (eventFlag & exports.EVENTS.UV_DISCONNECT) {\n            logger('Polling for \"disconnect\"');\n        }\n        this.poller.poll(eventFlag);\n    }\n    /**\n     * Stop listening for events and cancel all outstanding listening with an error\n     */\n    stop() {\n        logger('Stopping poller');\n        this.poller.stop();\n        this.emitCanceled();\n    }\n    destroy() {\n        logger('Destroying poller');\n        this.poller.destroy();\n        this.emitCanceled();\n    }\n    emitCanceled() {\n        const err = new errors_1.BindingsError('Canceled', { canceled: true });\n        this.emit('readable', err);\n        this.emit('writable', err);\n        this.emit('disconnect', err);\n    }\n}\nexports.Poller = Poller;\n\n};"],
"names":["shadow$provide","global","require","module","exports","handleEvent","error","eventFlag","logger","emit","EVENTS","UV_READABLE","UV_WRITABLE","UV_DISCONNECT","__importDefault","mod","__esModule","Object","defineProperty","value","Poller","debug_1","events_1","path_1","node_gyp_build_1","errors_1","PollerBindings","default","join","__dirname","EventEmitter","constructor","fd","FDPoller","poller","bind","once","event","callback","poll","stop","emitCanceled","destroy","err","BindingsError","canceled"]
}
