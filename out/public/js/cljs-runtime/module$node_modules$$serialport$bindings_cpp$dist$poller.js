shadow$provide.module$node_modules$$serialport$bindings_cpp$dist$poller=function(global,require,module,exports){function handleEvent(error,eventFlag){error?(logger("error",error),this.emit("readable",error),this.emit("writable",error),this.emit("disconnect",error)):(eventFlag&exports.EVENTS.UV_READABLE&&(logger('received "readable"'),this.emit("readable",null)),eventFlag&exports.EVENTS.UV_WRITABLE&&(logger('received "writable"'),this.emit("writable",null)),eventFlag&exports.EVENTS.UV_DISCONNECT&&
(logger('received "disconnect"'),this.emit("disconnect",null)))}var __importDefault=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});exports.Poller=exports.EVENTS=void 0;global=__importDefault(require("module$node_modules$debug$src$browser"));module=require("module$node_modules$events$events");const path_1=require("module$node_modules$path_browserify$index");__importDefault=__importDefault(require("module$node_modules$node_gyp_build$index"));
const errors_1=require("module$node_modules$$serialport$bindings_cpp$dist$errors"),{Poller:PollerBindings}=(0,__importDefault.default)((0,path_1.join)("/","../")),logger=(0,global.default)("serialport/bindings-cpp/poller");exports.EVENTS={UV_READABLE:1,UV_WRITABLE:2,UV_DISCONNECT:4};class Poller extends module.EventEmitter{constructor(fd,FDPoller=PollerBindings){logger("Creating poller");super();this.poller=new FDPoller(fd,handleEvent.bind(this))}once(event,callback){switch(event){case "readable":this.poll(exports.EVENTS.UV_READABLE);
break;case "writable":this.poll(exports.EVENTS.UV_WRITABLE);break;case "disconnect":this.poll(exports.EVENTS.UV_DISCONNECT)}return super.once(event,callback)}poll(eventFlag=0){eventFlag&exports.EVENTS.UV_READABLE&&logger('Polling for "readable"');eventFlag&exports.EVENTS.UV_WRITABLE&&logger('Polling for "writable"');eventFlag&exports.EVENTS.UV_DISCONNECT&&logger('Polling for "disconnect"');this.poller.poll(eventFlag)}stop(){logger("Stopping poller");this.poller.stop();this.emitCanceled()}destroy(){logger("Destroying poller");
this.poller.destroy();this.emitCanceled()}emitCanceled(){const err=new errors_1.BindingsError("Canceled",{canceled:!0});this.emit("readable",err);this.emit("writable",err);this.emit("disconnect",err)}}exports.Poller=Poller}
//# sourceMappingURL=module$node_modules$$serialport$bindings_cpp$dist$poller.js.map
