{"version":3,"sources":["clouds/atlas.cljs"],"mappings":";AASA,AAAKA,uBAAQC;AAEb,AAAKC,0BACH,AAAA,AAAAC,6BAAA,2CAAA,+FAAA,AAAA,jCAS0BC;AAY5B,AAAKC,4BACH,8IAAA,AAAA,9IAACC,sHACAJ;AA+DH,AAAKK,4BACH,8IAAA,AAAA,9IAACD,sHACAJ;AAqBH,2BAAA,AAAA,3BAAKM;AAaL,AAAKC,0BACH,AAAA,8KAAA,AAAAN,6BAAA,wCAAA,+DAAA,6DAAA,8DAAA,+DAAA,+DAAA,+DAAA,+DAAA,gEAAA,gEAAA,gEAAA,gEAAA,iEAAA,iBAAAO,3/BACEG,sBACAL,yBACAD,0BACAO,yCACAT,0BACAU,23BAgB4CE;IAtB9CP,gBAAA,EAAA,CAAAA,qBAAAC,oBAAA,AAAAD,cAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAP,6BAAA,2CAAA,gGAAA,AAAA,jCAuBkEC;;;KAvBlE;AAAA,OAAAD,6BAAA,2CAAA,gGAAA,AAAA,jCA0B0EC;;;;AA1B1E,MAAA,KAAAQ,MAAA,CAAA,mEAAAF;;;oNAAA,oHAAA,AAAA,1NAqBkCM,wKAW2BE,wBACAA,1IACEA,/JAUVA,iFACGA,sGACEA,/JACDA,wBA6EfF,0FAUAhB,iHACLA","names":["clouds.atlas/u32-max","clouds.config/u32-max","clouds.atlas/hash-chunk","clojure.walk/prewalk-replace","clouds.config/atlas-size","clouds.atlas/perlin-chunk","sprog.iglu.core.combine_chunks","clouds.atlas/worley-chunk","clouds.atlas/remap-chunk","clouds.atlas/atlas-frag","G__159196","cljs.core/Keyword","js/Error","clouds.shaders/header","sprog.iglu.chunks.noise/simplex-3d-chunk","sprog.iglu.chunks.noise/fbm-chunk","clouds.config/perlin-worley-enum","clouds.config/perlin?","clouds.config/num-cells"],"sourcesContent":["(ns clouds.atlas\n(:require [sprog.util :as u]\n          [clouds.config :as c]\n          [clouds.shaders :as s]\n          [sprog.iglu.chunks.noise :refer [simplex-3d-chunk\n                                           fbm-chunk]]\n          [sprog.iglu.core :refer [iglu->glsl\n                                   combine-chunks]]))\n\n(def u32-max c/u32-max)\n\n(def hash-chunk\n  (u/unquotable\n   '{:functions\n     {modulo\n      {([vec3 float] vec3)\n       ([m n]\n        (mod (+ n (mod m (vec3 n))) n))}\n      hash\n      {([vec3] vec3)\n       ([pos]\n        (= pos (modulo pos ~c/atlas-size))\n        (= pos (fract (* pos\n                         (vec3 0.1031\n                               0.1030\n                               0.0973))))\n        (+= pos (dot pos (+ pos.yzx 33.33)))\n        (* 2\n           (- (fract (* (+ pos.xxy\n                           pos.yxx)\n                        pos.zyx))\n              1)))}}}))\n\n(def perlin-chunk\n  (combine-chunks\n   hash-chunk\n   '{:functions\n     {fade\n      {([vec3] vec3)\n       ([t]\n        (* (* t t t)\n           (+ (* t (- (* t 6)\n                      15))\n              10)))}\n      gradient-noise\n      {([vec3] float)\n       ([pos]\n        (=vec3 i (floor pos))\n        (=vec3 f (fract pos))\n\n        (=vec3 u (fade f))\n\n        (mix (mix (mix (dot (hash i)\n                            f)\n                       (dot (hash (+ i\n                                     (vec3 1 0 0)))\n                            (- f (vec3 1 0 0)))\n                       u.x)\n                  (mix (dot (hash (+ i (vec3 0 1 0)))\n                            (- f (vec3 0 1 0)))\n                       (dot (hash (+ i\n                                     (vec3 1 1 0)))\n                            (- f (vec3 1 1 0)))\n                       u.x)\n                  u.y)\n             (mix (mix (dot (hash (+ i (vec3 0 0 1)))\n                            (- f (vec3 0 0 1)))\n                       (dot (hash (+ i\n                                     (vec3 1 0 1)))\n                            (- f (vec3 1 0 1)))\n                       u.x)\n                  (mix (dot (hash (+ i (vec3 0 1 1)))\n                            (- f (vec3 0 1 1)))\n                       (dot (hash (+ i\n                                     (vec3 1)))\n                            (- f (vec3 1)))\n                       u.x)\n                  u.y)\n             u.z))}\n\n      perlin3D\n      {([vec3 float] float)\n       ([pos freq]\n        (=float sum 0)\n        (=float weighted-sum 0)\n        (=float weight 1)\n\n        (\"for (int octave=0;octave<3;octave++)\"\n         (=vec3 p (* pos freq))\n         (=float val (+ 0.5 (* 0.5 (gradient-noise p))))\n         (+= sum (* val weight))\n         (+= weighted-sum weight)\n\n         (*= weight 0.5)\n         (*= freq 2))\n\n        (clamp (/ sum weighted-sum) 0 1))}}}))\n\n(def worley-chunk\n  (combine-chunks\n   hash-chunk\n   '{:functions {worley3D\n                 {([vec3 float] float)\n                  ([pos num-cells]\n                   (=vec3 p (* pos num-cells))\n                   (=float d 1e10)\n                   (\"for (int x = -1; x <= 1; x++)\"\n                    (\"for (int y = -1; y <= 1; y++)\"\n                     (\"for (int z = -1; z <= 1; z++)\"\n                      (=vec3 tp (+ (floor p)\n                                   (vec3 x y z)))\n                      (= tp (- p\n                               (- tp\n                                  (-> tp\n                                      (mod num-cells)\n                                      hash\n                                      (* 0.5)\n                                      (+ 0.5)))))\n                      (= d (min d (dot tp tp))))))\n                   (- 1 (clamp d 0 1)))}}}))\n\n(def remap-chunk\n  '{:functions {remap\n                {([float float float float float] float)\n                 ([x low-one high-one low-two high-two]\n                  (+ low-two\n                     (/ (* (- x low-one)\n                           (- high-two\n                              low-two))\n                        (- high-one\n                           low-one))))}}})\n\n\n\n(def atlas-frag\n  (u/unquotable\n   (s/header\n    remap-chunk\n    worley-chunk\n    simplex-3d-chunk\n    perlin-chunk\n    fbm-chunk\n    '{:outputs {fragColor uvec4}\n      :uniforms {size vec2}\n      :functions {get3D\n                  {([vec2 float] vec3)\n                   ([pos tile-rows]\n                    (=vec2 tile (floor pos))\n                    (=float z (floor (+ (* tile-rows tile.y)\n                                        tile.x)))\n                    (vec3 (fract pos)\n                          z))}\n                  get-color\n                  {([vec3 float] float)\n                   ([pos type]\n                    (=float res 0)\n                    (\"if\" (== type ~c/perlin-worley-enum)\n                          (=float perlin ~(case c/perlin?\n                                            :perlin '(perlin3D pos ~c/atlas-size)\n                                            :simplex '(-> (fbm snoise3D\n                                                               3\n                                                               (modulo pos ~c/atlas-size)\n                                                               \"5\"\n                                                               0.1)\n                                                          (* 0.5)\n                                                          (+ 0.5))))\n                          (= res perlin)\n                          (=float worley-one (worley3D pos (* ~c/num-cells 2)))\n                          (=float worley-two (worley3D pos (* ~c/num-cells 8)))\n                          (=float worley-three (worley3D pos (* ~c/num-cells 14)))\n\n                          (=float worley-fbm (+ (* worley-one\n                                                   0.625)\n                                                (* worley-two\n                                                   0.25)\n                                                (* worley-three\n                                                   0.125)))\n                          (= res (remap perlin 0 1 worley-fbm 1)))\n                    (\"else\"\n                     (=float worley-one (worley3D pos ~c/num-cells))\n                     (=float worley-two (worley3D pos (* ~c/num-cells 2)))\n                     (=float worley-three (worley3D pos (* ~c/num-cells 8)))\n                     (=float worley-four (worley3D pos (* ~c/num-cells 14)))\n\n                     (=float fbm-one (+ (* worley-one 0.625)\n                                        (* worley-two 0.25)\n                                        (* worley-three 0.125)))\n                     (=float fbm-two (+ (* worley-two 0.625)\n                                        (* worley-three 0.25)\n                                        (* worley-four 0.125)))\n                     (=float fbm-three (+ (* worley-four 0.75)\n                                          (* worley-three 0.25)))\n                     (= res (+ (* fbm-one 0.625)\n                               (* fbm-two 0.25)\n                               (* fbm-three 0.125))))\n                    res)}}\n      :main ((=vec2 fragcoords gl_FragCoord.xy)\n             (=float tile-size 34)\n             (=float pad-width 1)\n             (=float core-size (- tile-size (* 2 pad-width)))\n             (=float tile-rows 6)\n             (=float tile-count (* tile-rows tile-rows))\n\n             (=vec2 tile (floor (/ (- gl_FragCoord.xy 0.5)\n                                   tile-size)))\n\n             (=bool pad-cell (|| (== (mod fragcoords.x tile-size)\n                                     0.5)\n                                 (== (mod fragcoords.x tile-size)\n                                     (- tile-size 0.5))\n                                 (== (mod fragcoords.y tile-size)\n                                     0.5)\n                                 (== (mod fragcoords.y tile-size)\n                                     (- tile-size 0.5))))\n\n             (=bool start-pad-x \"false\")\n             (=bool end-pad-x \"false\")\n             (=bool start-pad-y \"false\")\n             (=bool end-pad-y \"false\")\n\n             (\"if\" (== fragcoords.x (+ (* tile.x tile-size)\n                                       0.5))\n                   (= start-pad-x \"true\"))\n             (\"if\" (== fragcoords.y (+ (* tile.y tile-size)\n                                       0.5))\n                   (= start-pad-y \"true\"))\n             (\"if\" (== fragcoords.x (* (+ tile.x 1)\n                                       (- tile-size 0.5)))\n                   (= end-pad-x \"true\"))\n             (\"if\" (== fragcoords.y (* (+ tile.y 1)\n                                       (- tile-size 0.5)))\n                   (= end-pad-y \"true\"))\n\n             (=vec2 padding (* (vec2 (* 2 pad-width))\n                               tile))\n\n             (=vec2 pixel (- fragcoords\n                             pad-width\n                             padding))\n             (=vec2 pos (vec2 0))\n\n             (\"if(!pad_cell)\"\n              (= pos (/ pixel\n                        core-size)))\n             (\"else\"\n              (\"if (start_pad_x)\"\n               (+= pixel.x core-size))\n              (\"if (start_pad_y)\"\n               (+= pixel.y core-size))\n              (\"if (end_pad_x)\"\n               (-= pixel.x core-size))\n              (\"if (end_pad_y)\"\n               (-= pixel.y core-size))\n              (= pos (/ pixel core-size)))\n\n             (=vec3 noise-pos (get3D pos tile-rows))\n             (=vec3 p noise-pos)\n             (= p.z (/ p.z (* tile-rows tile-rows)))\n\n             (=float wp-noise (get-color p ~c/perlin-worley-enum))\n             (=float worley (get-color p 0))\n\n             (= fragColor (uvec4 (uvec3 (* (clamp (remap wp-noise\n                                                         worley\n                                                         1\n                                                         0\n                                                         1)\n                                                  0\n                                                  1)\n                                           ~u32-max))\n                                 ~(str u32-max))))})))\n"]}