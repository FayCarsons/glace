{
"version":3,
"file":"module$node_modules$$serialport$binding_mock$dist$index.js",
"lineCount":13,
"mappings":"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",
"sources":["node_modules/@serialport/binding-mock/dist/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$serialport$binding_mock$dist$index\"] = function(global,require,module,exports) {\nvar process = require('process');\nvar Buffer = require('buffer').Buffer;\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar debugFactory = require('debug');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar debugFactory__default = /*#__PURE__*/_interopDefaultLegacy(debugFactory);\n\nconst debug = debugFactory__default[\"default\"]('serialport/binding-mock');\nlet ports = {};\nlet serialNumber = 0;\nfunction resolveNextTick() {\n    return new Promise(resolve => process.nextTick(() => resolve()));\n}\nclass CanceledError extends Error {\n    constructor(message) {\n        super(message);\n        this.canceled = true;\n    }\n}\nconst MockBinding = {\n    reset() {\n        ports = {};\n        serialNumber = 0;\n    },\n    // Create a mock port\n    createPort(path, options = {}) {\n        serialNumber++;\n        const optWithDefaults = Object.assign({ echo: false, record: false, manufacturer: 'The J5 Robotics Company', vendorId: undefined, productId: undefined, maxReadSize: 1024 }, options);\n        ports[path] = {\n            data: Buffer.alloc(0),\n            echo: optWithDefaults.echo,\n            record: optWithDefaults.record,\n            readyData: optWithDefaults.readyData,\n            maxReadSize: optWithDefaults.maxReadSize,\n            info: {\n                path,\n                manufacturer: optWithDefaults.manufacturer,\n                serialNumber: `${serialNumber}`,\n                pnpId: undefined,\n                locationId: undefined,\n                vendorId: optWithDefaults.vendorId,\n                productId: optWithDefaults.productId,\n            },\n        };\n        debug(serialNumber, 'created port', JSON.stringify({ path, opt: options }));\n    },\n    async list() {\n        debug(null, 'list');\n        return Object.values(ports).map(port => port.info);\n    },\n    async open(options) {\n        var _a;\n        if (!options || typeof options !== 'object' || Array.isArray(options)) {\n            throw new TypeError('\"options\" is not an object');\n        }\n        if (!options.path) {\n            throw new TypeError('\"path\" is not a valid port');\n        }\n        if (!options.baudRate) {\n            throw new TypeError('\"baudRate\" is not a valid baudRate');\n        }\n        const openOptions = Object.assign({ dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);\n        const { path } = openOptions;\n        debug(null, `open: opening path ${path}`);\n        const port = ports[path];\n        await resolveNextTick();\n        if (!port) {\n            throw new Error(`Port does not exist - please call MockBinding.createPort('${path}') first`);\n        }\n        const serialNumber = port.info.serialNumber;\n        if ((_a = port.openOpt) === null || _a === void 0 ? void 0 : _a.lock) {\n            debug(serialNumber, 'open: Port is locked cannot open');\n            throw new Error('Port is locked cannot open');\n        }\n        debug(serialNumber, `open: opened path ${path}`);\n        port.openOpt = Object.assign({}, openOptions);\n        return new MockPortBinding(port, openOptions);\n    },\n};\n/**\n * Mock bindings for pretend serialport access\n */\nclass MockPortBinding {\n    constructor(port, openOptions) {\n        this.port = port;\n        this.openOptions = openOptions;\n        this.pendingRead = null;\n        this.isOpen = true;\n        this.lastWrite = null;\n        this.recording = Buffer.alloc(0);\n        this.writeOperation = null; // in flight promise or null\n        this.serialNumber = port.info.serialNumber;\n        if (port.readyData) {\n            const data = port.readyData;\n            process.nextTick(() => {\n                if (this.isOpen) {\n                    debug(this.serialNumber, 'emitting ready data');\n                    this.emitData(data);\n                }\n            });\n        }\n    }\n    // Emit data on a mock port\n    emitData(data) {\n        if (!this.isOpen || !this.port) {\n            throw new Error('Port must be open to pretend to receive data');\n        }\n        const bufferData = Buffer.isBuffer(data) ? data : Buffer.from(data);\n        debug(this.serialNumber, 'emitting data - pending read:', Boolean(this.pendingRead));\n        this.port.data = Buffer.concat([this.port.data, bufferData]);\n        if (this.pendingRead) {\n            process.nextTick(this.pendingRead);\n            this.pendingRead = null;\n        }\n    }\n    async close() {\n        debug(this.serialNumber, 'close');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        const port = this.port;\n        if (!port) {\n            throw new Error('already closed');\n        }\n        port.openOpt = undefined;\n        // reset data on close\n        port.data = Buffer.alloc(0);\n        debug(this.serialNumber, 'port is closed');\n        this.serialNumber = undefined;\n        this.isOpen = false;\n        if (this.pendingRead) {\n            this.pendingRead(new CanceledError('port is closed'));\n        }\n    }\n    async read(buffer, offset, length) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        if (typeof offset !== 'number' || isNaN(offset)) {\n            throw new TypeError(`\"offset\" is not an integer got \"${isNaN(offset) ? 'NaN' : typeof offset}\"`);\n        }\n        if (typeof length !== 'number' || isNaN(length)) {\n            throw new TypeError(`\"length\" is not an integer got \"${isNaN(length) ? 'NaN' : typeof length}\"`);\n        }\n        if (buffer.length < offset + length) {\n            throw new Error('buffer is too small');\n        }\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        debug(this.serialNumber, 'read', length, 'bytes');\n        await resolveNextTick();\n        if (!this.isOpen || !this.port) {\n            throw new CanceledError('Read canceled');\n        }\n        if (this.port.data.length <= 0) {\n            return new Promise((resolve, reject) => {\n                this.pendingRead = err => {\n                    if (err) {\n                        return reject(err);\n                    }\n                    this.read(buffer, offset, length).then(resolve, reject);\n                };\n            });\n        }\n        const lengthToRead = this.port.maxReadSize > length ? length : this.port.maxReadSize;\n        const data = this.port.data.slice(0, lengthToRead);\n        const bytesRead = data.copy(buffer, offset);\n        this.port.data = this.port.data.slice(lengthToRead);\n        debug(this.serialNumber, 'read', bytesRead, 'bytes');\n        return { bytesRead, buffer };\n    }\n    async write(buffer) {\n        if (!Buffer.isBuffer(buffer)) {\n            throw new TypeError('\"buffer\" is not a Buffer');\n        }\n        if (!this.isOpen || !this.port) {\n            debug('write', 'error port is not open');\n            throw new Error('Port is not open');\n        }\n        debug(this.serialNumber, 'write', buffer.length, 'bytes');\n        if (this.writeOperation) {\n            throw new Error('Overlapping writes are not supported and should be queued by the serialport object');\n        }\n        this.writeOperation = (async () => {\n            await resolveNextTick();\n            if (!this.isOpen || !this.port) {\n                throw new Error('Write canceled');\n            }\n            const data = (this.lastWrite = Buffer.from(buffer)); // copy\n            if (this.port.record) {\n                this.recording = Buffer.concat([this.recording, data]);\n            }\n            if (this.port.echo) {\n                process.nextTick(() => {\n                    if (this.isOpen) {\n                        this.emitData(data);\n                    }\n                });\n            }\n            this.writeOperation = null;\n            debug(this.serialNumber, 'writing finished');\n        })();\n        return this.writeOperation;\n    }\n    async update(options) {\n        if (typeof options !== 'object') {\n            throw TypeError('\"options\" is not an object');\n        }\n        if (typeof options.baudRate !== 'number') {\n            throw new TypeError('\"options.baudRate\" is not a number');\n        }\n        debug(this.serialNumber, 'update');\n        if (!this.isOpen || !this.port) {\n            throw new Error('Port is not open');\n        }\n        await resolveNextTick();\n        if (this.port.openOpt) {\n            this.port.openOpt.baudRate = options.baudRate;\n        }\n    }\n    async set(options) {\n        if (typeof options !== 'object') {\n            throw new TypeError('\"options\" is not an object');\n        }\n        debug(this.serialNumber, 'set');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await resolveNextTick();\n    }\n    async get() {\n        debug(this.serialNumber, 'get');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await resolveNextTick();\n        return {\n            cts: true,\n            dsr: false,\n            dcd: false,\n        };\n    }\n    async getBaudRate() {\n        var _a;\n        debug(this.serialNumber, 'getBaudRate');\n        if (!this.isOpen || !this.port) {\n            throw new Error('Port is not open');\n        }\n        await resolveNextTick();\n        if (!((_a = this.port.openOpt) === null || _a === void 0 ? void 0 : _a.baudRate)) {\n            throw new Error('Internal Error');\n        }\n        return {\n            baudRate: this.port.openOpt.baudRate,\n        };\n    }\n    async flush() {\n        debug(this.serialNumber, 'flush');\n        if (!this.isOpen || !this.port) {\n            throw new Error('Port is not open');\n        }\n        await resolveNextTick();\n        this.port.data = Buffer.alloc(0);\n    }\n    async drain() {\n        debug(this.serialNumber, 'drain');\n        if (!this.isOpen) {\n            throw new Error('Port is not open');\n        }\n        await this.writeOperation;\n        await resolveNextTick();\n    }\n}\n\nexports.CanceledError = CanceledError;\nexports.MockBinding = MockBinding;\nexports.MockPortBinding = MockPortBinding;\n\n};"],
"names":["shadow$provide","global","require","module","exports","resolveNextTick","Promise","resolve","process","nextTick","Buffer","Object","defineProperty","value","debugFactory","debug","debugFactory__default","ports","serialNumber","CanceledError","Error","constructor","message","canceled","MockPortBinding","port","openOptions","pendingRead","isOpen","lastWrite","recording","alloc","writeOperation","info","readyData","data","emitData","bufferData","isBuffer","from","concat","close","openOpt","undefined","read","buffer","offset","length","TypeError","isNaN","reject","err","this.pendingRead","then","lengthToRead","maxReadSize","bytesRead","slice","copy","write","record","echo","update","options","baudRate","set","get","cts","dsr","dcd","getBaudRate","_a","flush","drain","MockBinding","reset","createPort","path","optWithDefaults","assign","manufacturer","vendorId","productId","pnpId","locationId","JSON","stringify","opt","list","values","map","open","Array","isArray","dataBits","lock","stopBits","parity","rtscts","xon","xoff","xany","hupcl"]
}
