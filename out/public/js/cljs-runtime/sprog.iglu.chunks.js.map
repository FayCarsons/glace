{"version":3,"sources":["sprog/iglu/chunks.cljc"],"mappings":"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","names":["sprog.iglu.chunks/trivial-vert-source","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","sprog.iglu.chunks/merge-chunks","seq30861","self__5752__auto__","cljs.core/seq","chunks","cljs.core.assoc","cljs.core.reduce","cljs.core.partial","cljs.core/merge-with","cljs.core/merge","p1__30860#","cljs.core.map","cljs.core.dissoc","sprog.iglu.chunks/rand-chunk","sprog.iglu.chunks/simplex-2d-chunk","clojure.walk/postwalk-replace","cljs.core.conj","cljs.core/List","Math/sqrt","sprog.iglu.chunks/simplex-3d-chunk","sprog.iglu.chunks/get-fbm-chunk","p__30888","vec__30890","cljs.core.nth","seq30882","G__30883","cljs.core/first","cljs.core/next","self__5751__auto__","noise-fn","noise-dimensions","G__30894","fexpr__30893","or__5043__auto__","sprog.iglu.chunks/random-shortcut","p__30911","vec__30912","seq30901","G__30902","expression","rand-fn","cljs.core/rand","clojure.walk/postwalk","subexp","cljs.core/vector?","cljs.core._EQ_","cljs.core/second","sprog.iglu.chunks/hsl-to-rgb-chunk","sprog.iglu.chunks/hsv-to-rgb-chunk","sprog.iglu.chunks/cubic-hsv-to-rgb-chunk","sprog.iglu.chunks/quintic-hsv-to-rgb-chunk","sprog.iglu.chunks/cosine-hsv-to-rgb-chunk","sprog.iglu.chunks/particle-vert-source-u16","sprog.iglu.chunks/particle-vert-source-u32","sprog.iglu.chunks/particle-frag-source-u16","sprog.iglu.chunks/particle-frag-source-u32","sprog.iglu.chunks/particle-frag-source-f8","sprog.iglu.chunks/sparse-gaussian-expression","p__30966","vec__30967","seq30956","G__30957","G__30958","G__30959","value-fn","radius","sigma","skip-factor","coords","cljs.core.mapcat","r","cljs.core.range","factors","p__30970","vec__30971","x","y","Math/exp","factor-sum","cljs.core.apply","cljs.core/+","p__30974","vec__30975","factor","sprog.iglu.chunks/bicubic-sample-chunk"],"sourcesContent":["(ns sprog.iglu.chunks\n  (:require [clojure.walk :refer [postwalk \n                                  postwalk-replace]]))\n\n(def trivial-vert-source\n  '{:version \"300 es\"\n    :precision {float lowp}\n    :inputs {vertPos vec4}\n    :signatures {main ([] void)}\n    :functions\n    {main\n     ([]\n      (= gl_Position vertPos))}})\n\n(defn merge-chunks [& chunks]\n  (assoc (reduce (partial merge-with merge)\n                 (map #(dissoc % :version) chunks))\n         :version \"300 es\"))\n\n(def rand-chunk\n  '{:signatures {rand ([vec2] float)}\n    :functions {rand\n                ([p]\n                 (=vec3 p3 (fract (* (vec3 p.xyx) \"0.1031\")))\n                 (+= p3 (dot p3 (+ p3.yzx \"33.33\")))\n                 (fract (* (+ p3.x p3.y) p3.z)))}})\n\n; based on https://thebookofshaders.com/edit.php#11/2d-snoise-clear.frag\n(def simplex-2d-chunk\n  {:signatures '{mod289_3 ([vec3] vec3)\n                 mod289 ([vec2] vec2)\n                 permute ([vec3] vec3)\n                 snoise ([vec2] float)}\n   :functions\n   {'mod289_3 '([x] (- x (* (floor (/ x \"289.0\")) \"289.0\")))\n    'mod289 '([x] (- x (* (floor (/ x \"289.0\")) \"289.0\")))\n    'permute '([x] (mod289_3 (* x (+ \"1.0\" (* x \"34.0\")))))\n    'snoise\n    (postwalk-replace\n     {:c (conj (list (/ (- 3 (Math/sqrt 3)) 6)\n                     (/ (- (Math/sqrt 3) 1) 2)\n                     (- (/ (- 3 (Math/sqrt 3)) 3) 1)\n                     (/ 1 41))\n               'vec4)}\n     '([v]\n       (+= v (vec2 \"12.5\" \"-3.6\"))\n       (=vec4 C :c)\n       (=vec2 i (floor (+ v (dot v C.yy))))\n       (=vec2 x0 (- (+ v (dot i C.xx))\n                    i))\n\n       (=vec2 i1 (if (> x0.x x0.y) (vec2 1 0) (vec2 0 1)))\n       (=vec2 x1 (- (+ x0.xy C.xx) i1))\n       (=vec2 x2 (+ x0.xy C.zz))\n\n       (= i (mod289 i))\n\n       (=vec3 p (permute\n                 (+ (permute (+ i.y (vec3 0 i1.y 1)))\n                    i.x\n                    (vec3 0 i1.x 1))))\n       (=vec3 m (max (vec3 \"0.0\")\n                     (- \"0.5\"\n                        (vec3 (dot x0 x0)\n                              (dot x1 x1)\n                              (dot x2 x2)))))\n\n       (= m (* m m))\n       (= m (* m m))\n\n       (=vec3 x (- (* \"2.0\" (fract (* p C.www))) \"1.0\"))\n       (=vec3 h (- (abs x) \"0.5\"))\n       (=vec3 ox (floor (+ x \"0.5\")))\n       (=vec3 a0 (- x ox))\n\n       (*= m (- \"1.79284291400159\"\n                (* \"0.85373472095314\"\n                   (+ (* a0 a0)\n                      (* h h)))))\n\n       (=vec3 g (vec3 (+ (* a0.x x0.x) (* h.x x0.y))\n                      (+ (* a0.yz (vec2 x1.x x2.x))\n                         (* h.yz (vec2 x1.y x2.y)))))\n       (* \"130.0\" (dot m g))))}})\n\n; based on https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n(def simplex-3d-chunk\n  {:signatures '{permute ([vec4] vec4)\n                 taylorInvSqrt ([vec4] vec4)\n                 snoise ([vec3] float)}\n   :functions\n   '{permute ([x] (mod (* x (+ \"1.0\" (* \"34.0\" x))) \"289.0\"))\n     taylorInvSqrt ([r] (- \"1.79284291400159\"\n                           (* r \"0.85373472095314\")))\n     snoise\n     ([v]\n      (=vec2 C (vec2 (/ \"1.0\" \"6.0\") (/ \"1.0\" \"3.0\")))\n      (=vec4 D (vec4 \"0.0\" \"0.5\" \"1.0\" \"2.0\"))\n\n      ; first corner\n      (=vec3 i (floor (+ v (dot v C.yyy))))\n      (=vec3 x0 (+ (- v i)\n                   (dot i C.xxx)))\n\n      ; other corners\n      (=vec3 g (step x0.yzx x0.xyz))\n      (=vec3 l (- \"1.0\" g))\n      (=vec3 i1 (min g.xyz l.zxy))\n      (=vec3 i2 (max g.xyz l.zxy))\n\n      (=vec3 x1 (+ (- x0 i1) C.xxx))\n      (=vec3 x2 (+ (- x0 i2) (* \"2.0\" C.xxx)))\n      (=vec3 x3 (+ (- x0 \"1.0\") (* \"3.0\" C.xxx)))\n\n      ; permutations\n      (= i (mod i \"289.0\"))\n      (=vec4 p (permute (+ (permute (+ (permute (+ i.z (vec4 0 i1.z i2.z 1)))\n                                       i.y\n                                       (vec4 0 i1.y i2.y 1)))\n                           i.x\n                           (vec4 0 i1.x i2.x 1))))\n\n      ; gradients\n      (=vec3 ns (- (* D.wyz (/ \"1.0\" \"7.0\")) D.xzx))\n\n      (=vec4 j (- p (* \"49.0\" (floor (* p ns.z ns.z)))))\n\n      (=vec4 x_ (floor (* j ns.z)))\n      (=vec4 y_ (floor (- j (* \"7.0\" x_))))\n\n      (=vec4 x (+ ns.yyyy (* ns.x x_)))\n      (=vec4 y (+ ns.yyyy (* ns.x y_)))\n      (=vec4 h (- \"1.0\" (+ (abs x) (abs y))))\n\n      (=vec4 b0 (vec4 x.xy y.xy))\n      (=vec4 b1 (vec4 x.zw y.zw))\n\n      (=vec4 s0 (+ \"1.0\" (* \"2.0\" (floor b0))))\n      (=vec4 s1 (+ \"1.0\" (* \"2.0\" (floor b1))))\n      (=vec4 sh (- \"0.0\" (step h (vec4 0))))\n\n      (=vec4 a0 (+ b0.xzyw (* s0.xzyw sh.xxyy)))\n      (=vec4 a1 (+ b1.xzyw (* s1.xzyw sh.zzww)))\n\n      (=vec3 p0 (vec3 a0.xy h.x))\n      (=vec3 p1 (vec3 a0.zw h.y))\n      (=vec3 p2 (vec3 a1.xy h.z))\n      (=vec3 p3 (vec3 a1.zw h.w))\n\n      ; normalize gradients\n      (=vec4 norm (taylorInvSqrt (vec4 (dot p0 p0)\n                                       (dot p1 p1)\n                                       (dot p2 p2)\n                                       (dot p3 p3))))\n\n      (*= p0 norm.x)\n      (*= p1 norm.y)\n      (*= p2 norm.z)\n      (*= p3 norm.w)\n\n      ; mix final noise value\n      (=vec4 m (max (- \"0.6\"\n                       (vec4 (dot x0 x0)\n                             (dot x1 x1)\n                             (dot x2 x2)\n                             (dot x3 x3)))\n                    \"0.0\"))\n      (*= m m)\n      (* \"42.0\" (dot (* m m)\n                     (vec4 (dot p0 x0)\n                           (dot p1 x1)\n                           (dot p2 x2)\n                           (dot p3 x3)))))}})\n\n; fractional brownian motion\n(defn get-fbm-chunk [noise-fn & [noise-dimensions]]\n  (postwalk-replace\n   {:noise-fn noise-fn\n    :vec ({1 'float\n           2 'vec2\n           3 'vec3}\n          (or noise-dimensions 2))}\n   '{:signatures {fbm ([:vec int float] float)}\n     :functions\n     {fbm\n      ([x octaves hurstExponent]\n       (=float g (exp2 (- \"0.0\" hurstExponent)))\n       (=float f \"1.0\")\n       (=float a \"1.0\")\n       (=float t \"0.0\")\n       (\"for(int i=0;i<octaves;i++)\"\n        (+= t (* a (:noise-fn (* f x))))\n        (*= f \"2.0\")\n        (*= a g))\n       t)}}))\n\n(defn random-shortcut [expression & [rand-fn]]\n  (let [rand-fn (or rand-fn rand)]\n    (postwalk\n     (fn [subexp]\n       (if (and (vector? subexp)\n                (= (first subexp) :rand))\n         (postwalk-replace\n          {:scale (* (if (> (rand-fn) 0.5) 1 -1)\n                     (+ 200 (* (rand-fn) 300)))\n           :x (- (* (rand-fn) 100) 50)\n           :y (- (* (rand-fn) 100) 50)\n           :seed-exp (second subexp)}\n          '(rand (+ (* :seed-exp :scale)\n                    (vec2 :x :y))))\n         subexp))\n     expression)))\n\n(def hsl-to-rgb-chunk\n  '{:signatures {hsl2rgb ([vec3] vec3)}\n    :functions {hsl2rgb\n                ([color]\n                 (=vec3 chroma\n                        (clamp (- \"2.0\"\n                                  (abs\n                                   (- (mod (+ (* color.x \"6.0\")\n                                              (vec3 \"3.0\"\n                                                    \"1.0\"\n                                                    \"5.0\"))\n                                           \"6.0\")\n                                      \"3.0\")))\n                               \"0.0\"\n                               \"1.0\"))\n                 (mix (mix (vec3 0)\n                           (mix (vec3 \"0.5\") chroma color.y)\n                           (clamp (* color.z \"2.0\") \"0.0\" \"1.0\"))\n                      (vec3 1)\n                      (clamp (- (* color.z \"2.0\") \"1.0\")\n                             \"0.0\"\n                             \"1.0\")))}})\n\n; derived from https://www.shadertoy.com/view/MsS3Wc\n(def hsv-to-rgb-chunk\n  '{:signatures {hsv2rgb ([vec3] vec3)}\n    :functions {hsv2rgb\n                ([color]\n                 (=vec3 rgb (clamp (- (abs (- (mod (+ (* color.x \"6.0\")\n                                                      (vec3 0 4 2))\n                                                   \"6.0\")\n                                              \"3.0\"))\n                                      \"1.0\")\n                                   \"0.0\"\n                                   \"1.0\"))\n                 (* color.z (mix (vec3 1)\n                                 rgb\n                                 color.y)))}})\n\n; derived from https://www.shadertoy.com/view/MsS3Wc\n(def cubic-hsv-to-rgb-chunk\n  '{:signatures {hsv2rgb ([vec3] vec3)}\n    :functions {hsv2rgb\n                ([color]\n                 (=vec3 rgb (clamp (- (abs (- (mod (+ (* color.x \"6.0\")\n                                                      (vec3 0 4 2))\n                                                   \"6.0\")\n                                              \"3.0\"))\n                                      \"1.0\")\n                                   \"0.0\"\n                                   \"1.0\"))\n                 (= rgb (* rgb rgb (- \"3.0\" (* \"2.0\" rgb))))\n                 (* color.z (mix (vec3 1)\n                                 rgb\n                                 color.y)))}})\n\n; derived from @Frizzil's comment on https://www.shadertoy.com/view/MsS3Wc\n(def quintic-hsv-to-rgb-chunk\n  '{:signatures {hsv2rgb ([vec3] vec3)}\n    :functions {hsv2rgb\n                ([color]\n                 (=vec3 rgb (clamp (- (abs (- (mod (+ (* color.x \"6.0\")\n                                                      (vec3 0 4 2))\n                                                   \"6.0\")\n                                              \"3.0\"))\n                                      \"1.0\")\n                                   \"0.0\"\n                                   \"1.0\"))\n                 (= rgb (* rgb\n                           rgb\n                           rgb\n                           (+ \"10.0\" (* rgb (- (* rgb \"6.0\") \"15.0\")))))\n                 (* color.z (mix (vec3 1)\n                                 rgb\n                                 color.y)))}})\n\n; derived from https://www.shadertoy.com/view/MsS3Wc\n(def cosine-hsv-to-rgb-chunk\n  '{:signatures {hsv2rgb ([vec3] vec3)}\n    :functions {hsv2rgb\n                ([color]\n                 (=vec3 rgb (clamp (- (abs (- (mod (+ (* color.x \"6.0\")\n                                                      (vec3 0 4 2))\n                                                   \"6.0\")\n                                              \"3.0\"))\n                                      \"1.0\")\n                                   \"0.0\"\n                                   \"1.0\"))\n                 (= rgb (+ \"0.5\" (* \"-0.5\" (cos (* rgb \"3.14159265359\")))))\n                 (* color.z (mix (vec3 1)\n                                 rgb\n                                 color.y)))}})\n\n(def particle-vert-source-u16\n  '{:version \"300 es\"\n    :precision {float highp\n                int highp\n                usampler2D highp}\n    :outputs {particlePos vec2}\n    :uniforms {particleTex usampler2D\n               radius float}\n    :signatures {main ([] void)}\n    :functions\n    {main\n     ([]\n      (=int agentIndex (/ gl_VertexID 6))\n      (=int corner \"gl_VertexID % 6\")\n\n      (=ivec2 texSize (textureSize particleTex 0))\n\n      (=vec2 texPos\n             (/ (+ \"0.5\" (vec2 (% agentIndex texSize.x)\n                               (/ agentIndex texSize.x)))\n                (vec2 texSize)))\n\n      (=uvec4 particleColor (texture particleTex texPos))\n      (= particlePos (/ (vec2 particleColor.xy) \"65535.0\"))\n\n      (= gl_Position\n         (vec4 (- (* (+ particlePos\n                        (* radius\n                           (- (* \"2.0\"\n                                 (if (|| (== corner 0)\n                                         (== corner 3))\n                                   (vec2 0 1)\n                                   (if (|| (== corner 1)\n                                           (== corner 4))\n                                     (vec2 1 0)\n                                     (if (== corner 2)\n                                       (vec2 0 0)\n                                       (vec2 1 1)))))\n                              \"1.0\")))\n                     \"2.0\")\n                  \"1.0\")\n               0\n               1)))}})\n\n(def particle-vert-source-u32\n  '{:version \"300 es\"\n    :precision {float highp\n                int highp\n                usampler2D highp}\n    :outputs {particlePos vec2}\n    :uniforms {particleTex usampler2D\n               radius float}\n    :signatures {main ([] void)}\n    :functions\n    {main\n     ([]\n      (=int agentIndex (/ gl_VertexID 6))\n      (=int corner \"gl_VertexID % 6\")\n\n      (=ivec2 texSize (textureSize particleTex 0))\n\n      (=vec2 texPos\n             (/ (+ \"0.5\" (vec2 (% agentIndex texSize.x)\n                               (/ agentIndex texSize.x)))\n                (vec2 texSize)))\n\n      (=uvec4 particleColor (texture particleTex texPos))\n      (= particlePos (/ (vec2 particleColor.xy) \"4294967295.0\"))\n\n      (= gl_Position\n         (vec4 (- (* (+ particlePos\n                        (* radius\n                           (- (* \"2.0\"\n                                 (if (|| (== corner 0)\n                                         (== corner 3))\n                                   (vec2 0 1)\n                                   (if (|| (== corner 1)\n                                           (== corner 4))\n                                     (vec2 1 0)\n                                     (if (== corner 2)\n                                       (vec2 0 0)\n                                       (vec2 1 1)))))\n                              \"1.0\")))\n                     \"2.0\")\n                  \"1.0\")\n               0\n               1)))}})\n\n(def particle-frag-source-u16\n  '{:version \"300 es\"\n    :precision {float highp\n                int highp}\n    :uniforms {radius float\n               size float}\n    :inputs {particlePos vec2}\n    :outputs {fragColor uvec4}\n    :signatures {main ([] void)}\n    :functions\n    {main\n     ([]\n      (=vec2 pos (/ gl_FragCoord.xy size))\n      (=float dist (distance pos particlePos))\n      (\"if\" (> dist radius)\n            \"discard\")\n      (= fragColor (uvec4 65535 0 0 0)))}})\n\n(def particle-frag-source-u32\n  '{:version \"300 es\"\n    :precision {float highp\n                int highp}\n    :uniforms {radius float\n               size float}\n    :inputs {particlePos vec2}\n    :outputs {fragColor uvec4}\n    :signatures {main ([] void)}\n    :functions\n    {main\n     ([]\n      (=vec2 pos (/ gl_FragCoord.xy size))\n      (=float dist (distance pos particlePos))\n      (\"if\" (> dist radius)\n            \"discard\")\n      (= fragColor (uvec4 65535 0 0 0)))}})\n\n(def particle-frag-source-f8\n  '{:version \"300 es\"\n    :precision {float highp\n                int highp}\n    :uniforms {radius float\n               size float}\n    :inputs {particlePos vec2}\n    :outputs {fragColor vec4}\n    :signatures {main ([] void)}\n    :functions\n    {main\n     ([]\n      (=vec2 pos (/ gl_FragCoord.xy size))\n      (=float dist (distance pos particlePos))\n      (\"if\" (> dist radius)\n            \"discard\")\n      (= fragColor (vec4 1 0 0 1)))}})\n\n(defn sparse-gaussian-expression [value-fn radius sigma & [skip-factor]]\n  (let [coords (conj (mapcat (fn [r]\n                               (list [0 r]\n                                     [r r]\n                                     [r 0]\n                                     [r (- r)]\n                                     [0 (- r)]\n                                     [(- r) (- r)]\n                                     [(- r) 0]\n                                     [(- r) r]))\n                             (range 1 (inc radius) (or skip-factor 1)))\n                     [0 0])\n        factors (map (fn [[x y]]\n                       (Math/exp\n                        (/ (- (+ (* x x) (* y y)))\n                           (* 2 sigma sigma))))\n                     coords)\n        factor-sum (apply + factors)]\n    (conj (map (fn [[x y] factor]\n                 (postwalk-replace\n                  {:x (.toFixed x 1)\n                   :y (.toFixed y 1)\n                   :factor (.toFixed (/ factor factor-sum) 8)\n                   :value-fn value-fn}\n                  '(* (:value-fn :x :y) :factor)))\n               coords\n               factors)\n          '+)))\n\n; from https://stackoverflow.com/a/42179924\n(def bicubic-sample-chunk\n  '{:signatures {cubic ([float] vec4)\n                 textureBicubic ([usampler2D vec2] vec4)}\n    :functions\n    {cubic\n     ([v]\n      (=vec4 n (- (vec4 1 2 3 4) v))\n      (=vec4 s (* n n n))\n      (=float x s.x)\n      (=float y (- s.y (* \"4.0\" s.x)))\n      (=float z (+ s.z\n                   (* \"-4.0\" s.y)\n                   (* \"6.0\" s.x)))\n      (=float w (- \"6.0\"\n                   (+ x y z)))\n      (/ (vec4 x y z w)\n         \"6.0\"))\n     textureBicubic\n     ([tex pos]\n      (=vec2 texSize (vec2 (textureSize tex 0)))\n\n      (=vec2 texCoords (- (* pos texSize) \"0.5\"))\n\n      (=vec2 fxy (fract texCoords))\n      (-= texCoords fxy)\n\n      (=vec4 xcubic (cubic fxy.x))\n      (=vec4 ycubic (cubic fxy.y))\n\n      (=vec4 c (+ texCoords.xxyy\n                  (vec4 \"-0.5\"\n                        \"1.5\"\n                        \"-0.5\"\n                        \"1.5\")))\n\n      (=vec4 s (vec4 (+ xcubic.xz\n                        xcubic.yw)\n                     (+ ycubic.xz\n                        ycubic.yw)))\n\n      (=vec4 offset (/ (+ c (/ (vec4 xcubic.yw ycubic.yw) s))\n                       texSize.xxyy))\n\n      (=vec4 sample0 (vec4 (texture tex offset.xz)))\n      (=vec4 sample1 (vec4 (texture tex offset.yz)))\n      (=vec4 sample2 (vec4 (texture tex offset.xw)))\n      (=vec4 sample3 (vec4 (texture tex offset.yw)))\n\n      (=float sx (/ s.x (+ s.x s.y)))\n      (=float sy (/ s.z (+ s.z s.w)))\n\n      (mix (mix sample3 sample2 sx)\n           (mix sample1 sample0 sx)\n           sy))}})\n"]}