{"version":3,"sources":["sprog/dev/multi_texture_output_demo.cljs"],"mappings":";AAYA,yDAAA,zDAAKA;AAEL,GAAA,QAAAC,kCAAAC,sCAAAC,gEAAAC;AAAA;AAAA,AAAA,AAASC,8CAAQ,6CAAA,7CAACC;;AAElB,GAAA,QAAAL,kCAAAC,sCAAAC,gEAAAI;AAAA;AAAA,AAAA,AAASC,sDAAgB,6CAAA,7CAACF;;AAE1B,GAAA,QAAAL,kCAAAC,sCAAAC,gEAAAM;AAAA;AAAA,AAAA,AAASC,qDAAe,6CAAA,7CAACJ;;AACzB,GAAA,QAAAL,kCAAAC,sCAAAC,gEAAAQ;AAAA;AAAA,AAAA,AAASC,qDAAe,6CAAA,7CAACN;;AAEzB,AAAKO,yDACH,8BAAA,2CAAA,kKAAA,AAAA,3OAACC,+JACuB,+DAAA,/DAAUd;AAkBpC,uDAAA,AAAA,vDAAKe;AAkBL,wDAAA,xDAAMC;AAAN,AACE,SAAA,AAAAC,LAAMC,qBAAIb;iBAAV,bACMc,gGAAY,AAAA,AAAAD,gBAAgB,AAAA,AAAAA;AADlC,AAEE,AAACE,sCAAmBF;;AACpB,AAACG,6CAAeH;;AAChB,uCAAA,AAAAD,gFAAA,2CAAA,0DAAA,2CAAA,0BAAA,4DAAA,2CAAA,OAAA,AAAAA,oEAAA,OAAA,AAAAA,1dAACK,uDAAoBd,qDACDW,kKACiBA,iJACGT,2EACAE;;AACxC,OAACW,sBAAyBP;;AAE9B,2CAAA,3CAAMQ;AAAN,AACE,IAAMN,WAAG,AAACO;AAAV,AACE,AAACC,sBAAOrB,4CAAQa;;AAChB,AAACQ,sBAAOlB,oDAAgB,AAACmB,0CACAT,SACA,AAACU,8BAAWb;;AACrC,IAAAc,mBAAA,AAAAC,cAAA,mFAAkBpB,mDACAE;IADlBmB,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,qBAAA,AAAAD,wDAAAE,zEAAQS;AAAR,AAAA,AAEE,AAAChB,sBAAOgB,eAAS,6LAAA,2CAAA,kEAAA,1SAACC,2EAAiBzB,SACAlB;;AAHrC;AAAA,eAAA6B;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAC,2BAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,uBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,wBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,qBAAA,AAAAI,gBAAAX,jCAAQa;AAAR,AAAA,AAEE,AAAChB,sBAAOgB,eAAS,6LAAA,2CAAA,kEAAA,1SAACC,2EAAiBzB,SACAlB;;AAHrC;AAAA,eAAA,AAAAyC,eAAAZ;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAKA,IAAMe,qBAAa,AAACjB,0CACAT,SACA,AAAC2B,sGAAM,AAACjB,8BAAWf;AAFvC,AAGE,4KAAA,AAAAI,oEAAA,AAAAA,hPAAC6B,oFAAiB5B,SACA,AAAoBA,+FACnBR,oEACAE;;AACnB,iHAAA,jHAACU,uCAAmBsB,mBACA5C;;AAExB,OAACgB","names":["sprog.dev.multi-texture-output-demo/texture-resolution","js/sprog","js/sprog.dev","js/sprog.dev.multi-texture-output-demo","js/sprog.dev.multi-texture-output-demo.gl-atom","sprog.dev.multi-texture-output-demo/gl-atom","cljs.core.atom","js/sprog.dev.multi-texture-output-demo.draw-sprog-atom","sprog.dev.multi-texture-output-demo/draw-sprog-atom","js/sprog.dev.multi-texture-output-demo.texture-1-atom","sprog.dev.multi-texture-output-demo/texture-1-atom","js/sprog.dev.multi-texture-output-demo.texture-2-atom","sprog.dev.multi-texture-output-demo/texture-2-atom","sprog.dev.multi-texture-output-demo/render-frag-source","clojure.walk/postwalk-replace","sprog.dev.multi-texture-output-demo/draw-frag-source","sprog.dev.multi-texture-output-demo/update-page!","cljs.core/deref","gl","resolution","sprog.webgl.canvas/maximize-gl-canvas","sprog.webgl.framebuffers/target-screen!","sprog.webgl.shaders/run-purefrag-sprog","js/requestAnimationFrame","sprog.dev.multi-texture-output-demo/init","sprog.webgl.canvas/create-gl-canvas","cljs.core/reset!","sprog.webgl.shaders/create-purefrag-sprog","sprog.iglu.core/iglu->glsl","seq__41965","cljs.core/seq","chunk__41966","count__41967","i__41968","temp__5804__auto__","cljs.core/chunked-seq?","c__5565__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","tex-atom","sprog.webgl.textures.create_float_tex","render-sprog","sprog.util.log","sprog.webgl.framebuffers.target_textures_BANG_"],"sourcesContent":["(ns sprog.dev.multi-texture-output-demo\n  (:require [clojure.walk :refer [postwalk-replace]]\n            [sprog.util :as u]\n            [sprog.webgl.canvas :refer [create-gl-canvas\n                                        maximize-gl-canvas]]\n            [sprog.webgl.shaders :refer [create-purefrag-sprog\n                                         run-purefrag-sprog]]\n            [sprog.webgl.textures :refer [create-float-tex]]\n            [sprog.webgl.framebuffers :refer [target-screen!\n                                              target-textures!]]\n            [sprog.iglu.core :refer [iglu->glsl]]))\n\n(def texture-resolution 8)\n\n(defonce gl-atom (atom nil))\n\n(defonce draw-sprog-atom (atom nil))\n\n(defonce texture-1-atom (atom nil))\n(defonce texture-2-atom (atom nil))\n\n(def render-frag-source\n  (postwalk-replace\n   {:texture-resolution-f (.toFixed texture-resolution 1)}\n   '{:version \"300 es\"\n     :precision {float highp}\n     :outputs {fragColor0 vec4\n               fragColor1 vec4}\n     :layout {fragColor0 0\n              fragColor1 1}\n     :signatures {main ([] void)}\n     :functions {main\n                 ([]\n                  (=vec2 pos (/ gl_FragCoord.xy :texture-resolution-f))\n                  (= fragColor0 (vec4 pos\n                                      0\n                                      1))\n                  (= fragColor1 (vec4 0\n                                      pos\n                                      1)))}}))\n\n(def draw-frag-source\n  '{:version \"300 es\"\n    :precision {float highp\n                sampler2D highp}\n    :uniforms {size vec2\n               tex1 sampler2D\n               tex2 sampler2D}\n    :outputs {fragColor vec4}\n    :signatures {main ([] void)}\n    :functions {main\n                ([]\n                 (=vec2 pos (/ gl_FragCoord.xy size))\n                 (= fragColor\n                    (if (< pos.x \"0.5\")\n                      (texture tex1 (* pos (vec2 \"2.0\" \"1.0\")))\n                      (texture tex2 (* (- pos (vec2 \"0.5\" \"0.0\"))\n                                      (vec2 \"2.0\" \"1.0\"))))))}})\n\n(defn update-page! []\n  (let [gl @gl-atom\n        resolution [gl.canvas.width gl.canvas.height]]\n    (maximize-gl-canvas gl)\n    (target-screen! gl)\n    (run-purefrag-sprog @draw-sprog-atom\n                        resolution\n                        {:floats {\"size\" resolution}\n                         :textures {\"tex1\" @texture-1-atom\n                                    \"tex2\" @texture-2-atom}})\n    (js/requestAnimationFrame update-page!)))\n\n(defn init []\n  (let [gl (create-gl-canvas)]\n    (reset! gl-atom gl)\n    (reset! draw-sprog-atom (create-purefrag-sprog\n                             gl\n                             (iglu->glsl draw-frag-source)))\n    (doseq [tex-atom [texture-1-atom\n                      texture-2-atom]]\n      (reset! tex-atom (create-float-tex gl\n                                         texture-resolution\n                                         {:filter-mode :nearest})))\n    (let [render-sprog (create-purefrag-sprog\n                        gl\n                        (u/log (iglu->glsl render-frag-source)))]\n      (target-textures! gl\n                        (.createFramebuffer gl)\n                        @texture-1-atom\n                        @texture-2-atom)\n      (run-purefrag-sprog render-sprog\n                          texture-resolution\n                          {})))\n  (update-page!))\n"]}