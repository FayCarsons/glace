{"version":3,"sources":["clouds/config.cljs"],"mappings":"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","names":["clouds.config/u32-max","clouds.config/debug?","clouds.config/cam-pos","clouds.config/look-at","clouds.config/up","clouds.config/field-of-view","clouds.config/depth-of-field-strength","clouds.config/depth-of-field-distance","clouds.config/light-pos","clouds.config/ambient-light-factor","clouds.config/sun-factor","clouds.config/skybox?","clouds.config/gold-light?","clouds.config/sky-color","clouds.config/sky-gold","cljs.core/cons","p1__34581#","cljs.core.mapv","clouds.config/sun-color","clouds.config/sun","p1__34582#","cljs.core.map","G__34583","cljs.core/Keyword","js/Error","clouds.config/sun-expression","clojure.walk/prewalk-replace","clouds.config/max-brightness","clouds.config/cloud-freq","clouds.config/bounce-loop-limit","clouds.config/max-steps","clouds.config/fudge-factor","clouds.config/motion-factor","clouds.config/menger-size","clouds.config/rand-scale","clouds.config/rand-sphere-count","clouds.config/sphere-positions","p1__34588#","cljs.core/List","Math/cos","sprog.util/TAU","Math/sin","cljs.core.range","clouds.config/sphere-octaves","clouds.config/sphere-layer-scale-factor","clouds.config/sphere-fbm-falloff","clouds.config/materials","clouds.config/materials-map","cljs.core/zipmap","cljs.core/str","cljs.core/count","p__34598","map__34599","cljs.core/--destructure-map","cljs.core.get","clouds.config/diffuse-material","clouds.config/metallic-material","clouds.config/ground-material","clouds.config/glass-material","clouds.config/amber-glass-material","clouds.config/emitter-material","clouds.config/plastic-material","clouds.config/ceramic-material","clouds.config/create-material","type","albedo","specular","emissive","roughness","index-of-refraction","clouds.config/default-record","clouds.config/bilateral-kernel-size","clouds.config/bilateral-sigma","clouds.config/bilateral-color-sigma","clouds.config/atlas-size","clouds.config/atlas-tex-size","clouds.config/cloud-extent","clouds.config/num-cells","clouds.config/perlin-worley-enum","clouds.config/perlin?"],"sourcesContent":["(ns clouds.config\n  (:require [sprog.util :as u]))\n\n;scene in bounding volume\n;light source infinitely far away\n;when leaving bounding volume do dot product of ray.dir \n;and dir of sun\n\n;start at pure white - when surface hit multiply surface color by hit object\n\n;record should have option to denote max steps reached but nothing hit, \n;therefore dont scatter/randomize\n\n(def u32-max '(float \"0xFFFFFFFFu\"))\n\n(def debug? false)\n\n;camera\n(def cam-pos [0 0 -1])\n(def look-at [0 0 0])\n(def up [0 1 0])\n(def field-of-view 2.5)\n(def depth-of-field-strength 0.1)\n(def depth-of-field-distance 1)\n\n;lighting\n(def light-pos '(vec3 0 0 -1))\n(def ambient-light-factor 0)\n(def sun-factor 1.1)\n(def skybox? true)\n(def gold-light? false)\n(def sky-color '(vec3 0.09 0.333 0.81))\n(def sky-gold (cons 'vec3\n                    (mapv #(/ % 255)\n                          [205 171 120])))\n\n\n(def sun-color :white)\n(def sun (cons 'vec3 (map #(* % sun-factor)\n                          (case sun-color \n                            :white [1 1 1]\n                            :gold [0.803921568627451 0.6705882352941176 0.47058823529411764]))))\n(def sun-expression (u/unquotable\n                     '(* (smoothstep 0.8 1 (dot ray.dir\n                                                 (normalize ~light-pos)))\n                         ~sun-factor\n                         ~sun)))\n\n(def max-brightness 1000)\n\n;mechanics and geometry\n(def cloud-freq 4)\n\n(def bounce-loop-limit 1)\n(def max-steps 32)\n(def fudge-factor 0.001)\n(def motion-factor 0)\n(def menger-size 0.525)\n\n(def rand-scale 1000)\n\n(def rand-sphere-count 16)\n(def sphere-positions (map #(list (Math/cos (-> %\n                                                (/ rand-sphere-count)\n                                                (* u/TAU)))\n                                  (Math/sin (-> %\n                                                (/ rand-sphere-count)\n                                                (* u/TAU))))\n                           (range rand-sphere-count)))\n\n\n\n(def sphere-octaves 5)\n(def sphere-layer-scale-factor 0.175) ;0.174 for sphere - spheres, 0.225 for box - spheres \n(def sphere-fbm-falloff 0.56)\n\n;materials\n(def materials [:lambertian\n                :blinn-phong\n                :specular\n                :dielectric\n                :lommel\n                :ggx])\n(def materials-map\n  (zipmap materials\n          (map str (range (count materials)))))\n\n(u/unquotable\n (do\n   (def diffuse-material '(Material :lommel\n                                    (vec3 0.5 0.3 0.1)\n                                    (vec3 0.04)\n                                    (vec3 0)\n                                    0.3\n                                    1))\n   (def metallic-material '(Material :specular\n                                     (vec3 0.9)\n                                     (vec3 0.85 0.85 0.85)\n                                     (vec3 0)\n                                     0.9\n                                     1))\n   (def ground-material '(Material :lambertian\n                                   (vec3 0.5)\n                                   (vec3 0.04)\n                                   (vec3 0)\n\n                                   0.5\n                                   1))\n   (def glass-material '(Material :dielectric\n                                  (vec3 0.99)\n                                  #_~(cons 'vec3\n                                           (u/gen 3\n                                                  '(-> ray.dir\n                                                       (* 3)\n                                                       snoise3D\n                                                       (* 0.25)\n                                                       (+ 0.75))))\n                                  (vec3 0.04)\n                                  (vec3 0)\n                                  0.3\n                                  1.755))\n   (def amber-glass-material '(Material :dielectic\n                                        (vec3 1.2 0.9 0.5)\n                                        (vec3 1.2 0.9 0.5)\n                                        (vec3 0)\n                                        0.3\n                                        1.5))\n   (def emitter-material '(Material :lommel\n                                    (vec3 0)\n                                    (vec3 0.04)\n                                    (* ~sky-gold\n                                       7.5)\n                                    0.9\n                                    1))\n   (def plastic-material '(Material :ggx\n                                    (vec3 0.8 0.06 0.03)\n                                    (vec3 0.04)\n                                    (vec3 0)\n                                    0.15\n                                    1))\n   (def ceramic-material '(Material :ggx\n                                    (vec3 0.8 0.7 0.65)\n                                    (vec3 0.04)\n                                    (vec3 0)\n                                    0.3\n                                    1))\n   (defn create-material [{:keys [type\n                                  albedo\n                                  specular\n                                  emissive\n                                  roughness\n                                  index-of-refraction]\n                           :or {type :lambertian\n                                albedo [0.99 0.99 0.99]\n                                specular '[0.04 0.04 0.04]\n                                emissive '[0 0 0]\n                                roughness 0.3\n                                index-of-refraction 1}}]\n     '(Material ~type\n                ~(cons 'vec3 albedo)\n                ~(cons 'vec3 specular)\n                ~(cons 'vec3 emissive)\n                ~roughness\n                ~index-of-refraction))\n   (def default-record '(Record false\n                                1024\n                                (vec3 0)\n                                (vec3 0)\n                                ~diffuse-material))))\n\n;bilateral filtering constants\n(def bilateral-kernel-size 2)\n(def bilateral-sigma 3)\n(def bilateral-color-sigma 0.1)\n\n\n(def atlas-size 8)\n(def atlas-tex-size 204)\n(def cloud-extent 100)\n(def num-cells 2)\n(def perlin-worley-enum 1) ;to alternate between perlin and worley in atlas frag\n(def perlin? :perlin)\n\n\n\n"]}