{"version":3,"sources":["clouds/config.cljs"],"mappings":";AAaA,AAAKA,wBAAQ,sBAAA,rBAAK,SAAA,IAAA,bAACC;AAEnB,6BAAA,7BAAKC;AAEL,qCAAA,rCAAKC;AACL,kCAAA,lCAAKC;AACL,AAAKC,0BAAU,eAAA,AAAA,fAACC,yEAAW,6CAAA,WAAAC,xDAACC;AAAD,AAAO,QAAAD,mBAAA;GAAP,mFAAA,KAAA,MAAA;AAE3B,AAAKE,yBAAS,eAAA,AAAA,fAACH,yEAAW,6CAAA,WAAAI,xDAACF;AAAD,AAAO,QAAAE,mBAAA;GAAP,mFAAA,MAAA,MAAA;AAE1B,2BAAA,3BAAKC;AACL,0BAAA,1BAAKC;AACL,AAAKC,oBAAI,eAAA,AAAA,fAACP,yEAAW,4CAAA,WAAAQ,vDAACC;AAAD,AAAM,QAAAD,mBAAKH;GACN,iBAAAK,WAAMJ;IAANI,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,0FAAA,IAAA,IAAA;;;KAAA;AAAA,0FAAA,kBAAA,mBAAA;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,mEAAAF;;;;AAG1B,8BAAA,9BAAKG;AAEL,2BAAA,3BAAKC;AAEL,kCAAA,lCAAKC;AACL,0BAAA,1BAAKC;AACL,6BAAA,7BAAKC;AACL,8BAAA,9BAAKC;AAEL,4BAAA,5BAAKC;AAEL,AAAKC,wBAAQ,eAAA,AAAA,0DAAA,mFAAA,IAAA,KAAA,rKAACpB;AACd,AAAKqB,0BAAU,eAAA,AAAA,0DAAA,mFAAA,IAAA,IAAA,pKAACrB;AAEhB,0BAAA,mFAAA,gEAAA,kEAAA,6DAAA,iEAAA,yDAAA,taAAKsB;AAML,AAAKC,8BACH,AAACC,iBAAOF,wBACA,AAACb,4CAAIgB,cAAI,AAACC,8CAAM,AAACC,gBAAML;AAWjC,AAAA,AAAA,+BAAA,AAAAM,6BAAA,mCAAA,AAAA,/FAEQC;;AAFR,iCAAA,AAAAD,6BAAA,mCAAA,AAAA,jGAIQE;;AAJR,kCAAA,AAAAF,6BAAA,mCAAA,AAAA,lGAUQG;;AAVR,gCAAA,AAAAH,6BAAA,mCAAA,AAAA,hGAgBQI;;AAhBR,+BAAA,AAAAJ,6BAAA,mCAAA,AAAA,/FA2BQK;;AA3BR,iCAAA,AAAAL,6BAAA,mCAAA,AAAA,jGAwCQM;;AAxCR,iCAAA,AAAAN,6BAAA,mCAAA,AAAA,jGA8CQO;;AA9CR,wCAAA,xCAoDSC,wFAAyBC;AApDlC,AAAA,OAAAT,6BAAA,2CAAA,6DAAA,eAAA,AAAA,0EAAA,AAAA,zFAsDkB5B,yEAAWqC;;AAM7B,+BAAA,/BAAKC;AAEL,kCAAA,lCAAKC;AACL,AAAKC,iCAAiB,4CAAA,WAAAC,vDAAChC;AAAD,AAAM,YAAAiC,eAAA,uFAAA,KAAAA,eAAA,uFAAA,KAAA,IAAA,OAAA,IAAA,jNAAM,AAACC,UACc,CAAAF,mBAAGF,rBACH,wDAAGK,0CACjB,AAACC,UACa,CAAAJ,mBAAGF,rBACH,wDAAGK;GACxB,AAAClB,8CAAMa;AAInC,+BAAA,/BAAKO;AACL,0CAAA,1CAAKC;AACL,mCAAA,nCAAKC;AAEL,2BAAA,3BAAKC;AACL,+BAAA,/BAAKC;AACL,6BAAA,7BAAKC;AACL,0BAAA,1BAAKC;AACL,mCAAA,nCAAKC;AACL,8BAAA,9BAAKC;AAGL,4BAAA,5BAAKC;AACL,AAAKC,0BAAUL;AAEf,AAAKM,oBAAI,0BAAA,zBAAG,CAAA,MACG,UAAA,VAACC","names":["clouds.config/u32-max","Math/pow","clouds.config/debug?","clouds.config/ambient-light-factor","clouds.config/gold-light?","clouds.config/sky-color","cljs.core/cons","p1__36911#","cljs.core.mapv","clouds.config/sky-gold","p1__36912#","clouds.config/sun-factor","clouds.config/sun-color","clouds.config/sun","p1__36913#","cljs.core.map","G__36914","cljs.core/Keyword","js/Error","clouds.config/skybox?","clouds.config/cloud-freq","clouds.config/bounce-loop-limit","clouds.config/max-steps","clouds.config/fudge-factor","clouds.config/motion-factor","clouds.config/menger-size","clouds.config/cam-pos","clouds.config/light-pos","clouds.config/materials","clouds.config/materials-map","cljs.core/zipmap","cljs.core/str","cljs.core.range","cljs.core/count","clojure.walk/prewalk-replace","clouds.config/default-record","clouds.config/diffuse-material","clouds.config/metallic-material","clouds.config/ground-material","clouds.config/glass-material","clouds.config/emitter-material","clouds.config/plastic-material","clouds.config/create-diffuse-material","albedo","clouds.config/max-brightness","clouds.config/rand-sphere-count","clouds.config/sphere-positions","p1__36917#","cljs.core/List","Math/cos","sprog.util/TAU","Math/sin","clouds.config/sphere-octaves","clouds.config/sphere-layer-scale-factor","clouds.config/sphere-fbm-falloff","clouds.config/atlas-size","clouds.config/atlas-tex-size","clouds.config/cloud-extent","clouds.config/num-cells","clouds.config/perlin-worley-enum","clouds.config/perlin?","clouds.config/cloud-start","clouds.config/cloud-end","clouds.config/phi","Math/sqrt"],"sourcesContent":["(ns clouds.config\n  (:require [sprog.util :as u]))\n\n;scene in bounding volume\n;light source infinitely far away\n;when leaving bounding volume do dot product of ray.dir \n;and dir of sun\n\n;start at pure white - when surface hit multiply surface color by hit object\n\n;record should have option to denote max steps reached but nothing hit, \n;therefore dont scatter/randomize\n\n(def u32-max (dec (Math/pow 2 32)))\n\n(def debug? false)\n\n(def ambient-light-factor 0.001)\n(def gold-light? false)\n(def sky-color (cons 'vec3 (mapv #(* % 1)\n                                 [0.09 0.333 0.81])))\n(def sky-gold (cons 'vec3 (mapv #(/ % 255)\n                                [205, 171, 120])))\n(def sun-factor 1)\n(def sun-color :gold)\n(def sun (cons 'vec3 (map #(* % sun-factor)\n                          (case sun-color \n                            :white [1 1 1]\n                            :gold [0.803921568627451 0.6705882352941176 0.47058823529411764]))))\n(def skybox? true)\n\n(def cloud-freq 2)\n\n(def bounce-loop-limit 1)\n(def max-steps 100)\n(def fudge-factor 0.01)\n(def motion-factor 0.01)\n\n(def menger-size 0.45)\n;0.3 0.1 1\n(def cam-pos (cons 'vec3 [0 0.05 -1.5]))\n(def light-pos (cons 'vec3 [2 2 1]))\n\n(def materials [:lambertian\n                :blinn-phong\n                :specular\n                :dielectric\n                :lommel\n                :ggx])\n(def materials-map\n  (zipmap materials\n          (map str (range (count materials)))))\n\n;sahdertoy material syntax \n;type\n;albedo vec3 \n;specular vec3\n;roughness float\n;ior float \n;emissive vec3\n\n\n(u/unquotable\n (do\n   (def default-record '(Record false \n                                1024 ))\n   (def diffuse-material '(Material :lambertian\n                                    (vec3 0.1 0.1 0.1)\n                                    (vec3 0.04)\n                                    (vec3 0)\n                                    0.5\n                                    1))\n   (def metallic-material '(Material :specular\n                                     (vec3 0)\n                                     (vec3 0.85 0.85 0.72)\n                                     (vec3 0)\n                                     0.1\n                                     1))\n   (def ground-material '(Material :lambertian\n                                   (vec3 1 1 0.1)\n                                   (vec3 0.04)\n                                   (vec3 0)\n                                   #_(* (hsv2rgb (vec3 0.1 0.25 0.7))\n                                        (-> (snoise3D (* ray.pos\n                                                         0.05))\n                                            (* 0.3)\n                                            (+ 0.7)))\n                                   0.1\n                                   1))\n   (def glass-material '(Material :dielectric\n                                  (vec3 0.9)\n                                  #_~(cons 'vec3\n                                         (u/gen 3\n                                                '(-> ray.dir\n                                                     (* 3)\n                                                     snoise3D\n                                                     (* 0.25)\n                                                     (+ 0.75))))\n                                  (vec3 0.04)\n                                  (vec3 0)\n                                  0.3\n                                  1.755))\n   (def emitter-material '(Material :lambertian\n                                    (vec3 0)\n                                    (vec3 0.04)\n                                    (vec3 24)\n                                    0.3\n                                    1))\n   (def plastic-material '(Material :ggx\n                                    (vec3 0.8 0.06 0.03)\n                                    (vec3 0.04)\n                                    (vec3 0)\n                                    0.15\n                                    1))\n   (defn create-diffuse-material [albedo]\n     '(Material :lambertian\n                ~(cons 'vec3 albedo)\n                (vec3 0.04)\n                (vec3 0)\n                0.75\n                0))))\n\n(def max-brightness 1000)\n\n(def rand-sphere-count 16)\n(def sphere-positions (map #(list (Math/cos (-> %\n                                                 (/ rand-sphere-count)\n                                                 (* u/TAU)))\n                                   (Math/sin (-> %\n                                                 (/ rand-sphere-count)\n                                                 (* u/TAU))))\n                            (range rand-sphere-count)))\n\n\n\n(def sphere-octaves 6)\n(def sphere-layer-scale-factor 0.2) ;0.174 for sphere - spheres, 0.225 for box - spheres \n(def sphere-fbm-falloff 0.5)\n\n(def atlas-size 8)\n(def atlas-tex-size 204)\n(def cloud-extent 100)\n(def num-cells 2)\n(def perlin-worley-enum 1) ;to alternate between perlin and worley in atlas frag\n(def perlin? :perlin)\n\n\n(def cloud-start 0)\n(def cloud-end cloud-extent)\n\n(def phi (/ (+ 1\n               (Math/sqrt 5))\n            2))\n"]}