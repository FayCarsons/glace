{"version":3,"sources":["clouds/config.cljs"],"mappings":"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","names":["clouds.config/u32-max-u","clouds.config/u32-max","cljs.core/cons","cljs.core/List","clouds.config/debug?","clouds.config/camera-distance","clouds.config/cam-pos","clouds.config/look-at","clouds.config/up","clouds.config/field-of-view","clouds.config/depth-of-field-strength","clouds.config/depth-of-field-distance","clouds.config/light-pos","clouds.config/ambient-light-factor","clouds.config/sun-factor","clouds.config/skybox?","clouds.config/gold-light?","clouds.config/sky-color","clouds.config/sky-gold","p1__40417#","cljs.core.mapv","clouds.config/sun-color","clouds.config/sun","p1__40418#","cljs.core.map","G__40421","cljs.core/Keyword","js/Error","clouds.config/sun-expression","clojure.walk/prewalk-replace","clouds.config/max-brightness","clouds.config/aberration-offset","clouds.config/cloud-freq","clouds.config/motion-factor","clouds.config/bounce-loop-limit","clouds.config/max-steps","clouds.config/fudge-factor","clouds.config/rand-scale","clouds.config/pastel-earthtones","clouds.config/scale-palette","palette","cljs.core.into","p__40427","vec__40428","cljs.core.nth","k","v","p1__40426#","var_args","args__5772__auto__","len__5766__auto__","i__5767__auto__","argseq__5773__auto__","cljs.core/IndexedSeq","clouds.config/palette->materials","seq40431","G__40432","cljs.core/first","cljs.core/next","self__5751__auto__","options","p__40433","vec__40434","_","clouds.materials/create-material","fxrng.rng.fxrand","clouds.config/rand-sphere-count","clouds.config/sphere-positions","p1__40437#","Math/cos","sprog.util/TAU","Math/sin","cljs.core.range","clouds.config/menger-size","clouds.config/sphere-octaves","clouds.config/sphere-layer-scale-factor","clouds.config/sphere-fbm-falloff","clouds.config/num-packed-spheres","clouds.config/spheres","clouds.sphere_packing.get_sphere_data","cljs.core.partial","cljs.core/rand","clouds.config/sphere-packing-expression","p1__40438#","sphere","cljs.core/rand-nth","clouds.materials/glass-material","clouds.materials/amber-glass-material","clouds.materials/metallic-material","clouds.materials/diffuse-material","clouds.materials/emitter-material","clouds.config/dof-test-sphere","cljs.core.repeatedly","iter__5520__auto__","s__40448","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","iterys__5516__auto__","s__40450","cljs.core/chunked-seq?","c__5518__auto__","size__5519__auto__","cljs.core/count","b__40452","cljs.core/chunk-buffer","i__40451","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__40449","cljs.core/chunk-rest","cljs.core/rest","fs__5517__auto__","cljs.core.concat","iter__40447","sqrt-num-spheres","coord","cljs.core/+","cljs.core.rand","x","y","cljs.core/chunk-first"],"sourcesContent":["(ns clouds.config\n  (:require [sprog.util :as u]\n            [clouds.materials :as mat]\n            [clouds.sphere-packing :refer [get-sphere-data]]\n            [fxrng.rng :refer [fxrand]]))\n(def u32-max-u \"0xFFFFFFFFu\")\n(def u32-max (cons 'float (list u32-max-u)))\n\n(def debug? false)\n\n;camera\n(def camera-distance 1.25)\n(def cam-pos [0 0 (- camera-distance)])\n(def look-at [0 0 0])\n(def up [0 1 0])\n(def field-of-view 2.5)\n(def depth-of-field-strength 0.001)\n(def depth-of-field-distance (/ camera-distance \n                                field-of-view))\n\n;lighting\n(def light-pos '(vec3 -0.333 0 -1))\n(def ambient-light-factor 0)\n(def sun-factor 0)\n(def skybox? false)\n(def gold-light? false)\n(def sky-color '(vec3 0.09 0.333 0.81))\n(def sky-gold (cons 'vec3\n                    (mapv #(/ % 255)\n                          [205 171 120])))\n\n\n(def sun-color :white)\n(def sun (cons 'vec3 (map #(* % sun-factor)\n                          (case sun-color \n                            :white [1 1 1]\n                            :gold [0.803921568627451 0.6705882352941176 0.47058823529411764]))))\n(def sun-expression (u/unquotable\n                     '(* (smoothstep 0.8 1 (dot ray.dir\n                                                 (normalize ~light-pos)))\n                         ~sun-factor\n                         ~sun)))\n\n;rendering + postprocessing \n(def max-brightness 1000)\n(def aberration-offset 0)\n(def cloud-freq 4)\n(def motion-factor 0)\n\n;mechanics\n(def bounce-loop-limit 1)\n(def max-steps 500)\n(def fudge-factor 0.001)\n\n(def rand-scale 1000)\n\n;PALETTES\n(def pastel-earthtones {:hills-green [0.6392156862745098 0.6980392156862745 0.6431372549019608],\n                        :balance-green [0.7647058823529411 0.7764705882352941 0.6588235294117647],\n                        :chai [0.9372549019607843 0.8588235294117647 0.6980392156862745],\n                        :larb [0.8784313725490196 0.7764705882352941 0.6784313725490196],\n                        :beige [0.7568627450980392 0.6980392156862745 0.6352941176470588],\n                        :pink [0.8941176470588236 0.8352941176470589 0.8274509803921568]})\n(defn scale-palette [palette]\n  (into {}\n        (map (fn [[k v]]\n               [k (mapv #(/ % 255) \n                        v)])\n             palette)))\n\n(defn palette->materials [palette & options]\n  (mapv (fn [[_ v]]\n          (mat/create-material\n           {:albedo v\n            :roughness (fxrand 0.1 0.8)}))\n        palette))\n\n;SCENES\n;basic-test\n(def rand-sphere-count 16)\n(def sphere-positions (map #(list (Math/cos (-> %\n                                                (/ rand-sphere-count)\n                                                (* u/TAU)))\n                                  (Math/sin (-> %\n                                                (/ rand-sphere-count)\n                                                (* u/TAU))))\n                           (range rand-sphere-count)))\n\n\n;recursive primitives\n(def menger-size 0.525)\n(def sphere-octaves 6)\n(def sphere-layer-scale-factor 0.15) ;0.174 for sphere - spheres, 0.225 for box - spheres \n(def sphere-fbm-falloff 0.5)\n\n;sphere packing\n(def num-packed-spheres 64)\n(def spheres (get-sphere-data num-packed-spheres {:init-sze (partial rand 0.2)\n                                                  :max-radius 0.5}))\n(def sphere-packing-expression \n  (u/unquotable\n   (cons 'do\n         (map (fn [sphere]\n                '(do (= sphere (Sphere ~(cons 'vec3\n                                              (map #(- % 0.5) sphere.position))\n                                       ~sphere.radius\n                                       ~(rand-nth [mat/glass-material\n                                                   mat/amber-glass-material\n                                                   mat/metallic-material\n                                                   mat/diffuse-material\n                                                   mat/emitter-material\n                                                   '(Material\n                                                     :lambertian\n                                                     (vec3 0.6392 \n                                                           0.6980\n                                                           0.6431)\n                                                     (vec3 0.04 0.04 0.04)\n                                                     (vec3 0 0 0)\n                                                     0.6667867723852396\n                                                     1)\n                                                   '(Material\n                                                     :lambertian\n                                                     (vec3 0.7647058823529411 \n                                                           0.7764705882352941 \n                                                           0.6588235294117647)\n                                                     (vec3 0.04 0.04 0.04)\n                                                     (vec3 0 0 0)\n                                                     0.3070532530313358\n                                                     1)\n                                                   '(Material\n                                                     :lambertian\n                                                     (vec3 0.9372549019607843 0.8588235294117647 0.6980392156862745)\n                                                     (vec3 0.04 0.04 0.04)\n                                                     (vec3 0 0 0)\n                                                     0.6438089546514675\n                                                     1)\n                                                   '(Material\n                                                     :lambertian\n                                                     (vec3 0.8784313725490196 0.7764705882352941 0.6784313725490196)\n                                                     (vec3 0.04 0.04 0.04)\n                                                     (vec3 0 0 0)\n                                                     0.16780196996405722\n                                                     1)\n                                                   '(Material\n                                                     :lambertian\n                                                     (vec3 0.7568627450980392 0.6980392156862745 0.6352941176470588)\n                                                     (vec3 0.04 0.04 0.04)\n                                                     (vec3 0 0 0)\n                                                     0.1315756174735725\n                                                     1)\n                                                   '(Material\n                                                     :lambertian\n                                                     (vec3 0.8941176470588236 0.8352941176470589 0.8274509803921568)\n                                                     (vec3 0.04 0.04 0.04)\n                                                     (vec3 0 0 0)\n                                                     0.38577988445758826\n                                                     1)])))\n                     (= current-distance (.x (findSphereIntersections ray\n                                                                      sphere.pos\n                                                                      sphere.radius)))\n                     (\"if\" (&& (> current-distance 0)\n                               (< current-distance record.distance))\n                           (= record.hit true)\n                           (= record.distance current-distance)\n                           (= record.point (ray-at ray record.distance))\n                           (= record.normal (normalize (- record.point\n                                                          sphere.pos)))\n                           (= record.material sphere.material))))\n              spheres))))\n\n(def dof-test-sphere \n  (u/unquotable\n   (let [sqrt-num-spheres 16]\n     (cons 'do\n           (map (fn [coord]\n                  '(do (= sphere (Sphere ~(cons 'vec3\n                                                (concat (map +\n                                                             coord\n                                                             (u/gen 2 (- (rand 0.1) 0.05))) \n                                                        (list (rand))))\n                                         ~(+ 0.025 \n                                             (rand 0.05))\n                                         ~(rand-nth [mat/glass-material\n                                                     mat/amber-glass-material\n                                                     mat/metallic-material\n                                                     mat/diffuse-material\n                                                     mat/glass-material\n                                                     mat/amber-glass-material\n                                                     mat/metallic-material\n                                                     mat/diffuse-material\n                                                     mat/emitter-material\n                                                     (mat/create-material\n                                                      {:type :blinn-phong\n                                                       :albedo [0.99]\n                                                       :specular [0.99]\n                                                       :roughenss 0.1})\n                                                     (mat/create-material\n                                                      {:type :blinn-phong\n                                                       :albedo [0.99]\n                                                       :specular [0.99]\n                                                       :roughenss 0.1})\n                                                     (mat/create-material {:type :lommel\n                                                                           :albedo [0.9 0.6 0.3]\n                                                                           :roughness 0.8})])))\n                       (= current-distance (.x (findSphereIntersections ray\n                                                                        sphere.pos\n                                                                        sphere.radius)))\n                       (\"if\" (&& (> current-distance 0)\n                                 (< current-distance record.distance))\n                             (= record.hit true)\n                             (= record.distance current-distance)\n                             (= record.point (ray-at ray record.distance))\n                             (= record.normal (normalize (- record.point\n                                                            sphere.pos)))\n                             (= record.material sphere.material))))\n                (for [x (range sqrt-num-spheres)\n                      y (range sqrt-num-spheres)]\n                  (list (- (/ x sqrt-num-spheres) \n                           0.5)\n                        (- (/ y sqrt-num-spheres)\n                           0.5))))))))\n\n\n"]}