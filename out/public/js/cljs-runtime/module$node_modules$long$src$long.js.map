{
"version":3,
"file":"module$node_modules$long$src$long.js",
"lineCount":26,
"mappings":"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AID,WAAYE,CAAAA,MAAhB,CAAuB,IAAIC,UAAJ,CAAe,CACpE,CADoE,CACjE,EADiE,CAC7D,GAD6D,CACxD,GADwD,CACnD,CADmD,CAChD,CADgD,CAC7C,CAD6C,CAC1C,CAD0C,CACvC,CADuC,CACpC,EADoC,CAChC,CADgC,CAC7B,EAD6B,CACzB,CADyB,CACtB,CADsB,CACnB,GADmB,CACd,EADc,CACV,CADU,CACP,GADO,CACF,GADE,CACG,GADH,CACQ,GADR,CACa,CADb,CACgB,GADhB,CACqB,CADrB,CACwB,CADxB,CAC2B,CAD3B,CAC8B,CAD9B,CACiC,CADjC,CACoC,CADpC,CACuC,CADvC,CAC0C,CAD1C,CAC6C,CAD7C,CACgD,CADhD,CACmD,CADnD,CACsD,CADtD,CACyD,GADzD,CAC8D,CAD9D,CACiE,EADjE,CACqE,CADrE,CACwE,EADxE,CAC4E,CAD5E,CAC+E,EAD/E,CACmF,CADnF,CACsF,CADtF,CACyF,GADzF,CAC8F,GAD9F,CACmG,GADnG,CACwG,CADxG,CAC2G,CAD3G,CAC8G,CAD9G,CACiH,GADjH,CACsH,GADtH,CAC2H,GAD3H,CACgI,EADhI,CACoI,GADpI,CACyI,CADzI,CAC4I,CAD5I,CAC+I,CAD/I,CACkJ,GADlJ,CACuJ,GADvJ,CAC4J,GAD5J,CACiK,EADjK,CACqK,GADrK,CAC0K,CAD1K,CAC6K,CAD7K,CACgL,CADhL,CACmL,GADnL,CACwL,GADxL,CAC6L,GAD7L,CACkM,EADlM,CACsM,GADtM,CAC2M,CAD3M,CAC8M,CAD9M,CACiN,CADjN,CACoN,GADpN,CACyN,GADzN,CAC8N,GAD9N,CACmO,EADnO,CACuO,GADvO,CAC4O,CAD5O,CAC+O,CAD/O,CACkP,CADlP,CACqP,GADrP,CAC0P,GAD1P,CAC+P,GAD/P,CACoQ,EADpQ,CACwQ,GADxQ,CAC6Q,GAD7Q,CACkR,GADlR,CACuR,GADvR,CAC4R,CAD5R,CAC+R,CAD/R,CACkS,EADlS,CACsS,GADtS,CAC2S,CAD3S,CAC8S,CAD9S,CACiT,CADjT,CACoT,CADpT,CACuT,EADvT,CAC2T,CAD3T,CAC8T,EAD9T,CACkU,EADlU,CACsU,CADtU,CACyU,CADzU,CAC4U,GAD5U,CACiV,EADjV,CACqV,CADrV,CACwV,GADxV,CAC6V,EAD7V,CACiW,CADjW,CACoW,GADpW,CACyW,EADzW,CAC6W,EAD7W,CACiX,GADjX,CACsX,GADtX,CAC2X,EAD3X,CAC+X,CAD/X,CACkY,GADlY,CACuY,EADvY,CAC2Y,CAD3Y,CAC8Y,GAD9Y,CACmZ,EADnZ,CACuZ,EADvZ,CAC2Z,GAD3Z,CACga,GADha,CACqa,GADra,CAC0a,EAD1a,CAC8a,CAD9a,CACib,EADjb,CACqb,EADrb,CACyb,GADzb,CAC8b,GAD9b,CACmc,EADnc,CACuc,CADvc,CAC0c,EAD1c;AAC8c,CAD9c,CACid,GADjd,CACsd,EADtd,CAC0d,EAD1d,CAC8d,CAD9d,CACie,CADje,CACoe,GADpe,CACye,EADze,CAC6e,CAD7e,CACgf,GADhf,CACqf,EADrf,CACyf,CADzf,CAC4f,GAD5f,CACigB,EADjgB,CACqgB,EADrgB,CACygB,GADzgB,CAC8gB,GAD9gB,CACmhB,EADnhB,CACuhB,CADvhB,CAC0hB,GAD1hB,CAC+hB,EAD/hB,CACmiB,CADniB,CACsiB,GADtiB,CAC2iB,EAD3iB,CAC+iB,EAD/iB,CACmjB,GADnjB,CACwjB,GADxjB,CAC6jB,GAD7jB,CACkkB,EADlkB,CACskB,CADtkB,CACykB,EADzkB,CAC6kB,EAD7kB,CACilB,GADjlB,CACslB,GADtlB,CAC2lB,EAD3lB,CAC+lB,CAD/lB,CACkmB,EADlmB,CACsmB,CADtmB,CACymB,GADzmB,CAC8mB,EAD9mB,CACknB,EADlnB,CACsnB,CADtnB,CACynB,CADznB,CAC4nB,GAD5nB,CACioB,EADjoB,CACqoB,CADroB,CACwoB,GADxoB,CAC6oB,EAD7oB,CACipB,CADjpB,CACopB,GADppB,CACypB,EADzpB,CAC6pB,EAD7pB,CACiqB,GADjqB,CACsqB,GADtqB,CAC2qB,EAD3qB,CAC+qB,CAD/qB,CACkrB,GADlrB,CACurB,EADvrB,CAC2rB,CAD3rB,CAC8rB,GAD9rB,CACmsB,EADnsB,CACusB,EADvsB,CAC2sB,GAD3sB,CACgtB,GADhtB,CACqtB,GADrtB,CAC0tB,EAD1tB,CAC8tB,CAD9tB,CACiuB,EADjuB,CACquB,EADruB,CACyuB,GADzuB,CAC8uB,GAD9uB,CACmvB,EADnvB,CACuvB,CADvvB,CAC0vB,EAD1vB,CAC8vB,CAD9vB,CACiwB,GADjwB,CACswB,EADtwB,CAC0wB,EAD1wB,CAC8wB,CAD9wB,CACixB,CADjxB,CACoxB,GADpxB,CACyxB,EADzxB,CAC6xB,CAD7xB,CACgyB,GADhyB,CACqyB,EADryB,CACyyB,CADzyB,CAC4yB,GAD5yB,CACizB,EADjzB,CACqzB,EADrzB,CACyzB,GADzzB,CAC8zB,GAD9zB,CACm0B,EADn0B,CACu0B,CADv0B,CAC00B,GAD10B,CAC+0B,EAD/0B,CACm1B,CADn1B,CACs1B,GADt1B,CAC21B,EAD31B,CAC+1B,EAD/1B,CACm2B,GADn2B,CACw2B,GADx2B,CAC62B,GAD72B,CACk3B,EADl3B,CACs3B,CADt3B,CACy3B,EADz3B,CAC63B,EAD73B,CACi4B,GADj4B,CACs4B,GADt4B,CAC24B,EAD34B,CAC+4B,CAD/4B,CACk5B,EADl5B,CACs5B,CADt5B,CACy5B,GADz5B,CAC85B,EAD95B,CACk6B,EADl6B,CACs6B,CADt6B,CACy6B,CADz6B,CAC46B,GAD56B,CACi7B,EADj7B,CACq7B,CADr7B,CACw7B,GADx7B,CAC67B,EAD77B,CACi8B,CADj8B,CACo8B,GADp8B,CACy8B,EADz8B,CAC68B,EAD78B,CACi9B,GADj9B,CACs9B,GADt9B,CAC29B,EAD39B,CAC+9B,CAD/9B,CACk+B,GADl+B,CACu+B,EADv+B,CAC2+B,CAD3+B,CAC8+B,GAD9+B,CACm/B,EADn/B,CACu/B,EADv/B,CAC2/B,GAD3/B,CACggC,GADhgC,CACqgC,GADrgC,CAC0gC,EAD1gC,CAC8gC,CAD9gC,CA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",
"sources":["node_modules/long/src/long.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$long$src$long\"] = function(global,require,module,exports) {\nmodule.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n\n};"],
"names":["shadow$provide","global","require","module","exports","Long","low","high","unsigned","isLong","obj","fromInt","value","cache","cachedObj","UINT_CACHE","fromBits","INT_CACHE","fromNumber","isNaN","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","fromString","str","radix","length","Error","RangeError","p","indexOf","substring","radixToPower","pow_dbl","result","i","size","Math","min","parseInt","power","mul","add","fromValue","val","wasm","WebAssembly","Instance","Module","Uint8Array","e","Object","defineProperty","prototype","pow","TWO_PWR_24","TWO_PWR_24_DBL","ONE","UONE","NEG_ONE","LongPrototype","toInt","LongPrototype.toInt","toNumber","LongPrototype.toNumber","toString","LongPrototype.toString","isZero","isNegative","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","LongPrototype.getHighBits","getHighBitsUnsigned","LongPrototype.getHighBitsUnsigned","getLowBits","LongPrototype.getLowBits","getLowBitsUnsigned","LongPrototype.getLowBitsUnsigned","getNumBitsAbs","LongPrototype.getNumBitsAbs","bit","LongPrototype.isZero","eqz","LongPrototype.isNegative","isPositive","LongPrototype.isPositive","isOdd","LongPrototype.isOdd","isEven","LongPrototype.isEven","equals","LongPrototype.equals","other","notEquals","LongPrototype.notEquals","neq","ne","lessThan","LongPrototype.lessThan","comp","lt","lessThanOrEqual","LongPrototype.lessThanOrEqual","lte","le","greaterThan","LongPrototype.greaterThan","gt","greaterThanOrEqual","LongPrototype.greaterThanOrEqual","gte","ge","compare","LongPrototype.compare","thisNeg","otherNeg","negate","LongPrototype.negate","not","LongPrototype.add","addend","a48","a32","a16","b48","b32","b16","c00","c16","c32","c48","subtract","LongPrototype.subtract","subtrahend","multiply","LongPrototype.multiply","multiplier","get_high","a00","b00","divide","LongPrototype.divide","divisor","div_u","div_s","toUnsigned","shru","res","approx","shr","halfThis","shl","max","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","modulo","LongPrototype.modulo","rem_u","rem_s","mod","LongPrototype.not","and","LongPrototype.and","or","LongPrototype.or","xor","LongPrototype.xor","shiftLeft","LongPrototype.shiftLeft","numBits","shiftRight","LongPrototype.shiftRight","shiftRightUnsigned","LongPrototype.shiftRightUnsigned","shr_u","toSigned","LongPrototype.toSigned","LongPrototype.toUnsigned","toBytes","LongPrototype.toBytes","toBytesLE","toBytesBE","LongPrototype.toBytesLE","hi","lo","LongPrototype.toBytesBE","fromBytes","Long.fromBytes","bytes","fromBytesLE","fromBytesBE","Long.fromBytesLE","Long.fromBytesBE"]
}
