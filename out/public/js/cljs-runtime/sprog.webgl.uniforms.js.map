{"version":3,"sources":["sprog/webgl/uniforms.cljs"],"mappings":"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","names":["p__31287","map__31288","cljs.core/--destructure-map","cljs.core.get","sprog.webgl.uniforms/ensure-uniform-present!","gl","program","uniform-locations-atom","uniform-name","cljs.core/not","fexpr__31289","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/assoc","sprog.webgl.uniforms/set-uniform-int!","location","value","sprog.webgl.uniforms/set-uniform-int-array!","sprog.webgl.uniforms/set-uniform-ivec2!","sprog.webgl.uniforms/set-uniform-ivec3!","sprog.webgl.uniforms/set-uniform-ivec4!","sprog.webgl.uniforms/set-uniform-uint!","sprog.webgl.uniforms/set-uniform-uint-array!","sprog.webgl.uniforms/set-uniform-uvec2!","sprog.webgl.uniforms/set-uniform-uvec3!","sprog.webgl.uniforms/set-uniform-uvec4!","p1__31316#","sprog.webgl.uniforms/convert-bool","cljs.core/boolean?","cljs.core/long","sprog.webgl.uniforms/set-uniform-bool!","sprog.webgl.uniforms/set-uniform-bool-array!","cljs.core.mapv","sprog.webgl.uniforms/set-uniform-bvec2!","sprog.webgl.uniforms/set-uniform-bvec3!","sprog.webgl.uniforms/set-uniform-bvec4!","sprog.webgl.uniforms/set-uniform-float!","sprog.webgl.uniforms/set-uniform-float-array!","sprog.webgl.uniforms/set-uniform-vec2!","sprog.webgl.uniforms/set-uniform-vec3!","sprog.webgl.uniforms/set-uniform-vec4!","sprog.webgl.uniforms/set-uniform-mat2!","sprog.webgl.uniforms/set-uniform-mat3!","sprog.webgl.uniforms/set-uniform-mat4!","p__31446","map__31447","sprog.webgl.uniforms/set-sprog-uniforms!","uniform-type-map","sprog","uniforms","cljs.core.reduce","p__31449","vec__31450","cljs.core.nth","texture-index","uniform-glsl-name","sprog.iglu.glsl/clj-name->glsl-name","temp__5802__auto__","uniform-type","fexpr__31458","fexpr__31460","fexpr__31465","G__31575","G__31576","G__31577","fexpr__31574","cljs.core._EQ_","cljs.core/re-find","or__5043__auto__","fexpr__31578"],"sourcesContent":["(ns sprog.webgl.uniforms\n  (:require [sprog.util :as u]\n            [sprog.iglu.glsl :refer [clj-name->glsl-name]]))\n\n(defn ensure-uniform-present! [gl\n                               {:keys [program uniform-locations-atom]}\n                               uniform-name]\n  (when (not (@uniform-locations-atom uniform-name))\n    (swap! uniform-locations-atom\n           assoc\n           uniform-name\n           (.getUniformLocation gl\n                                program\n                                uniform-name))))\n\n(defn set-uniform-int! [gl location value]\n  (.uniform1i gl location value))\n\n(defn set-uniform-int-array! [gl location value]\n  (.uniform1iv gl location value))\n\n(defn set-uniform-ivec2! [gl location value]\n  (.uniform2iv gl location value))\n\n(defn set-uniform-ivec3! [gl location value]\n  (.uniform3iv gl location value))\n\n(defn set-uniform-ivec4! [gl location value]\n  (.uniform4iv gl location value))\n\n(defn set-uniform-uint! [gl location value]\n  (.uniform1ui gl location value))\n\n(defn set-uniform-uint-array! [gl location value]\n  (.uniform1uiv gl location value))\n\n(defn set-uniform-uvec2! [gl location value]\n  (.uniform2uiv gl location value))\n\n(defn set-uniform-uvec3! [gl location value]\n  (.uniform3uiv gl location value))\n\n(defn set-uniform-uvec4! [gl location value]\n  (.uniform4uiv gl location value))\n\n(def convert-bool #(if (boolean? %) \n                     (if %\n                       (long 1)\n                       (long 0))\n                     %))\n(defn set-uniform-bool! [gl location value]\n  (set-uniform-int! gl location (convert-bool value)))\n\n(defn set-uniform-bool-array! [gl location value]\n  (set-uniform-int-array! gl location (mapv convert-bool value)))\n\n(defn set-uniform-bvec2! [gl location value]\n  (set-uniform-ivec2! gl location (mapv convert-bool value)))\n\n(defn set-uniform-bvec3! [gl location value]\n  (set-uniform-ivec3! gl location (mapv convert-bool value)))\n\n(defn set-uniform-bvec4! [gl location value]\n  (set-uniform-ivec4! gl location (mapv convert-bool value)))\n\n(defn set-uniform-float! [gl location value]\n  (.uniform1f gl location value))\n\n(defn set-uniform-float-array! [gl location value]\n  (.uniform1fv gl location value))\n\n(defn set-uniform-vec2! [gl location value]\n  (.uniform2fv gl location value))\n\n(defn set-uniform-vec3! [gl location value]\n  (.uniform3fv gl location value))\n\n(defn set-uniform-vec4! [gl location value]\n  (.uniform4fv gl location value))\n\n(defn set-uniform-mat2! [gl location value]\n  (.uniformMatrix2fv gl location false value))\n\n(defn set-uniform-mat3! [gl location value]\n  (.uniformMatrix3fv gl location false value))\n\n(defn set-uniform-mat4! [gl location value]\n  (.uniformMatrix4fv gl location false value))\n\n(defn set-sprog-uniforms! [gl\n                           {:keys [uniform-type-map uniform-locations-atom]\n                            :as sprog}\n                           uniforms]\n  (reduce\n   (fn [texture-index [uniform-name value]]\n     (let [uniform-glsl-name (str (clj-name->glsl-name uniform-name))]\n       (if-let [uniform-type (uniform-type-map uniform-glsl-name)]\n         (do (ensure-uniform-present! gl\n                                      sprog\n                                      uniform-glsl-name)\n             (if (#{\"sampler2D\" \"usampler2D\" \"sampler3D\" \"usampler3D\"}\n                  uniform-type)\n               (do (.activeTexture gl (+ gl.TEXTURE0 texture-index))\n                   (.bindTexture gl\n                                 (if (#{\"sampler3D\" \"usampler3D\"}\n                                      uniform-type)\n                                   gl.TEXTURE_3D\n                                   gl.TEXTURE_2D)\n                                 value)\n                   (set-uniform-int! gl\n                                     (@uniform-locations-atom uniform-glsl-name)\n                                     texture-index)\n                   (inc texture-index))\n               (do ((cond\n                      (= \"float\" uniform-type)\n                      set-uniform-float!\n                      (re-find #\"float\\[[0-9]+\\]\" uniform-type)\n                      set-uniform-float-array!\n                      (or (= \"vec2\" uniform-type)\n                          (re-find #\"vec2\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-vec2!\n                      (or (= \"vec3\" uniform-type)\n                          (re-find #\"vec3\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-vec3!\n                      (or (= \"vec4\" uniform-type)\n                          (re-find #\"vec4\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-vec4!\n\n                      (= \"int\" uniform-type) set-uniform-int!\n                      (re-find #\"int\\[[0-9]+\\]\" uniform-type)\n                      set-uniform-int-array!\n                      (or (= \"ivec2\" uniform-type)\n                          (re-find #\"ivec2\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-ivec2!\n                      (or (= \"ivec3\" uniform-type)\n                          (re-find #\"ivec3\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-ivec3!\n                      (or (= \"ivec4\" uniform-type)\n                          (re-find #\"ivec4\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-ivec4!\n\n                      (= \"uint\" uniform-type) set-uniform-uint!\n                      (re-find #\"uint\\[[0-9]+\\]\" uniform-type)\n                      set-uniform-uint-array!\n                      (or (= \"uvec2\" uniform-type)\n                          (re-find #\"uvec2\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-uvec2!\n                      (or (= \"uvec3\" uniform-type)\n                          (re-find #\"uvec3\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-uvec3!\n                      (or (= \"uvec4\" uniform-type)\n                          (re-find #\"uvec4\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-uvec4!\n\n                      (= \"bool\" uniform-type) set-uniform-bool!\n                      (re-find #\"bool\\[[0-9]+\\]\" uniform-type)\n                      set-uniform-bool-array!\n                      (or (= \"bvec2\" uniform-type)\n                          (re-find #\"bvec2\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-bvec2!\n                      (or (= \"bvec3\" uniform-type)\n                          (re-find #\"bvec3\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-bvec3!\n                      (or (= \"bvec4\" uniform-type)\n                          (re-find #\"bvec4\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-bvec4!\n\n                      (or (= \"mat2\" uniform-type)\n                          (re-find #\"mat2\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-mat2!\n                      (or (= \"mat3\" uniform-type)\n                          (re-find #\"mat3\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-mat3!\n                      (or (= \"mat4\" uniform-type)\n                          (re-find #\"mat4\\[[0-9]+\\]\" uniform-type))\n                      set-uniform-mat4!\n\n                      :else (throw (str \"SPROG: Unrecognized uniform type \\\"\"\n                                        uniform-type\n                                        \"\\\" for uniform \\\"\"\n                                        uniform-name\n                                        \"\\\"\")))\n                    gl\n                    (@uniform-locations-atom uniform-glsl-name)\n                    value)\n                   texture-index)))\n         (throw\n          (str \"SPROG: No uniform \\\"\" uniform-glsl-name \"\\\" in shader\")))))\n   0\n   uniforms))\n"]}