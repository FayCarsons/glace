{"version":3,"sources":["pxlsrt/core.cljs"],"mappings":"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","names":["pxlsrt.core/sort-resolution","js/pxlsrt","js/pxlsrt.core","js/pxlsrt.core.gl-atom","pxlsrt.core/gl-atom","cljs.core.atom","js/pxlsrt.core.render-sprog-atom","pxlsrt.core/render-sprog-atom","js/pxlsrt.core.logic-sprog-atom","pxlsrt.core/logic-sprog-atom","js/pxlsrt.core.texs-atom","pxlsrt.core/texs-atom","js/pxlsrt.core.fb-atom","pxlsrt.core/fb-atom","js/pxlsrt.core.frame-atom","pxlsrt.core/frame-atom","js/pxlsrt.core.thresh-atom","pxlsrt.core/thresh-atom","js/pxlsrt.core.time-atom","pxlsrt.core/time-atom","js/pxlsrt.core.port-atom","pxlsrt.core/port-atom","js/pxlsrt.core.osc-atom","pxlsrt.core/osc-atom","pxlsrt.core/render-frag-source","pxlsrt.core/logic-frag-source","sprog.iglu.chunks/random-shortcut","sprog.iglu.chunks.merge_chunks","sprog.iglu.chunks/rand-chunk","pxlsrt.core/init-frag-source","pxlsrt.core/update-page!","cljs.core/deref","gl","resolution","sprog.webgl.framebuffers.target_textures_BANG_","cljs.core/second","sprog.webgl.shaders/run-purefrag-sprog","cljs.core/first","cljs.core.swap_BANG_","cljs.core/reverse","sprog.webgl.canvas/maximize-gl-canvas","sprog.webgl.framebuffers/target-screen!","cljs.core/inc","cljs.core/reset!","js/requestAnimationFrame","pxlsrt.core/init","sprog.webgl.canvas/create-gl-canvas","sprog.webgl.shaders/create-purefrag-sprog","sprog.iglu.core/iglu->glsl","sprog.webgl.textures/create-float-tex","js/module$node_modules$osc$src$platforms$osc_node.WebSocketPort","cljs.core/clj->js","oscMsg","texture","image","js/document","pxlsrt.core/restart!","js/document.body.removeChild","pxlsrt.core/pre-init","js/window.addEventListener","_"],"sourcesContent":["(ns pxlsrt.core\n  (:require [sprog.dev.startup]\n            [sprog.util :as u]\n            [sprog.webgl.canvas :refer [create-gl-canvas\n                                        maximize-gl-canvas]]\n            [sprog.webgl.shaders :refer [create-purefrag-sprog\n                                         run-purefrag-sprog]]\n            [sprog.webgl.framebuffers :refer [target-screen!\n                                              target-textures!]]\n            [sprog.webgl.textures :refer [create-float-tex]]\n            \n            [sprog.input.mouse :refer [mouse-pos]]\n            \n            [sprog.iglu.chunks :refer [merge-chunks\n                                       rand-chunk\n                                       random-shortcut]]\n            \n            [sprog.iglu.core :refer [iglu->glsl]]\n            [\"osc\" :as osc]))\n\n(def sort-resolution 1000)\n\n(defonce gl-atom (atom nil))\n(defonce render-sprog-atom (atom nil))\n(defonce logic-sprog-atom (atom nil))\n\n(defonce texs-atom (atom nil))\n\n(defonce fb-atom (atom nil))\n\n(defonce frame-atom (atom 0))\n(defonce thresh-atom (atom 0))\n(defonce time-atom (atom 0))\n\n(defonce port-atom (atom nil))\n(defonce osc-atom (atom nil))\n\n(def render-frag-source\n  '{:version \"300 es\"\n    :precision {float highp}\n    :uniforms {size vec2\n               tex sampler2D}\n    :outputs {fragColor vec4}\n    :signatures {main ([] void)}\n    :functions {main\n                ([]\n                 (=vec2 pos (/ gl_FragCoord.xy size)) \n                 (= fragColor (texture tex pos)))}})\n\n(def logic-frag-source\n  (random-shortcut\n   (merge-chunks\n    rand-chunk\n    '{:version \"300 es\"\n      :precision {float highp}\n      :uniforms {size vec2\n                 tex sampler2D\n                 frame int\n                 thresh float\n                 time float\n                 mouse vec2}\n      :outputs {fragColor vec4}\n      :signatures {main ([] void)\n                   gscale ([vec3] float)\n                   rand ([vec2] float)}\n      :functions {gscale ([c]\n                          (/ (+ c.r c.b c.g) \"3.0\"))\n                  rand ([p]\n                        (=vec3 p3 (fract (* p.xyx 0.1031)))\n                        (+= p3 (dot p3 (+ p3.yzx 33.33)))\n                        (fract (* (+ p3.x p3.y) p3.z)))\n                  main\n                  ([]\n                   (=vec2 pos (/ gl_FragCoord.xy size))\n                 ; frame # parity, -1 = odd 1 = even\n                   (=float fParity (- (* (mod (float frame) \"2.0\") \"2.0\") \"1.0\"))\n                 ; differentiate every 1/2 pixel on horiz axis, will be -1 or 1\n                   (=float vp (- (* (mod (floor (* pos.x size.x)) \"2.0\") \"2.0\") \"1.0\"))\n                   (=vec2 dir (if (== (% (int (* pos.y (float 4))) 2) 0)\n                                (vec2 -1 1)\n                                (vec2 1 1)))\n                   #_(=vec2 dir (vec2 (- (+ (/ (cos time) (float 2)) 0.5) pos.x) (- (+ (/ (sin time) (float 2)) 0.5) pos.y)))\n\n                   #_(=vec2 dir (- (* mouse (float 2)) (float 1)))\n                   #_(=vec2 dir (vec2 (+ (cos time) [:rand (vec2 pos.x time)]) (+ (sin time) [:rand (vec2 time pos.y)])))\n                   (*= dir (* fParity vp))\n                   (= dir (/ dir size))\n                 ; sorting time >:)\n                   (=vec4 curr (texture tex pos))\n                   (=vec4 comp (texture tex (+ pos dir)))\n                   (=float gCurr (gscale curr.rgb))\n                   (=float gComp (gscale comp.rgb))\n                 ; prevent sorting on borders\n                   #_(\"if\" (|| (< (+ pos.x dir.x) \"0.0\")\n                               (> (+ pos.x dir.x) \"1.0\"))\n                           (= fragColor curr) \"return\")\n\n                 ; direction of displacement defn order of comparison\n                   (= fragColor\n                      (if (< (* vp fParity) \"0.0\")\n                        (if (&& (> gCurr thresh)\n                                (> gComp gCurr))\n                          comp\n                          curr)\n                        (if (&& (> gComp thresh)\n                                (> gCurr gComp))\n                          comp\n                          curr))))}})))\n\n(def init-frag-source\n  '{:version \"300 es\"\n    :precision {float highp}\n    :uniforms {size vec2\n               tex sampler2D}\n    :outputs {fragColor vec4}\n    :signatures {main ([] void)}\n    :functions {main\n                ([]\n                 (=vec2 pos (/ gl_FragCoord.xy size))\n                 (= pos.y (-  \"1.0\" pos.y))\n                 (= fragColor (texture tex pos)))}})\n\n(defn update-page! [] \n  (let [gl @gl-atom\n        resolution [gl.canvas.width gl.canvas.height]]\n    (target-textures! gl @fb-atom (second @texs-atom))\n    (run-purefrag-sprog @logic-sprog-atom sort-resolution\n                        {:floats {\"size\" [sort-resolution sort-resolution]\n                                  \"thresh\" @thresh-atom\n                                  \"time\" @time-atom\n                                  \"osc\" @osc-atom}\n                         :textures {\"tex\" (first @texs-atom)}\n                         :ints {\"frame\" @frame-atom}})\n    (swap! texs-atom reverse)\n    \n\n    (maximize-gl-canvas gl)\n    (target-screen! gl)\n    (run-purefrag-sprog @render-sprog-atom\n                        resolution\n                        {:floats {\"size\" resolution}\n                         :textures {\"tex\" (first @texs-atom)}})\n    (swap! frame-atom inc)\n    (reset! time-atom (+ @time-atom 0.1))\n    (js/requestAnimationFrame update-page!)))\n\n(defn init []\n  (let [gl (create-gl-canvas)]\n    (reset! gl-atom gl)\n    \n    (reset! render-sprog-atom (create-purefrag-sprog\n                               gl\n                               (iglu->glsl render-frag-source)))\n    (reset! logic-sprog-atom (create-purefrag-sprog\n                              gl\n                               (iglu->glsl logic-frag-source)))\n    (reset! texs-atom [(create-float-tex gl sort-resolution)\n                       (create-float-tex gl sort-resolution)])\n    (reset! fb-atom (.createFramebuffer gl))\n    (reset! frame-atom 0)\n    (reset! time-atom 0)\n    \n    (reset! port-atom (osc/WebSocketPort. \n                       (clj->js {:url \"ws://localhost:8080\" \n                                                    :metadata true})))\n    (.on @port-atom \n         \"message\" \n         (fn [oscMsg] \n            (reset! osc-atom oscMsg)))\n\n    (target-textures! gl @fb-atom (first @texs-atom))\n    (run-purefrag-sprog (create-purefrag-sprog\n                         gl\n                         (iglu->glsl init-frag-source))\n                        sort-resolution\n                        {:floats {\"size\" [sort-resolution sort-resolution]}\n                         :textures {\"tex\" (let [texture (.createTexture gl)\n                                                image (.getElementById js/document \"img\")]\n                                            (.bindTexture gl gl.TEXTURE_2D texture)\n                                            (.texParameteri gl\n                                                            gl.TEXTURE_2D\n                                                            gl.TEXTURE_WRAP_S\n                                                            gl.CLAMP_TO_EDGE)\n                                            (.texParameteri gl\n                                                            gl.TEXTURE_2D\n                                                            gl.TEXTURE_WRAP_T\n                                                            gl.CLAMP_TO_EDGE)\n                                            (.texParameteri gl\n                                                            gl.TEXTURE_2D\n                                                            gl.TEXTURE_MIN_FILTER\n                                                            gl.NEAREST)\n                                            (.texParameteri gl\n                                                            gl.TEXTURE_2D\n                                                            gl.TEXTURE_MAG_FILTER\n                                                            gl.NEAREST)\n                                            (.texImage2D gl\n                                                         gl.TEXTURE_2D\n                                                         0\n                                                         gl.RGBA\n                                                         gl.RGBA\n                                                         gl.UNSIGNED_BYTE\n                                                         image)\n                                            texture)}})))\n\n(defn ^:dev/after-load restart! []\n  (js/document.body.removeChild (.-canvas @gl-atom))\n  (init))\n\n(defn pre-init []\n  (js/window.addEventListener \"load\" (fn [_] (init)\n                                       (update-page!))))\n"]}