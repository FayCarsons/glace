shadow$provide.module$node_modules$$serialport$parser_spacepacket$dist$index=function(global,require,module,exports){var Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";Object.defineProperty(exports,"__esModule",{value:!0});exports.SpacePacketParser=void 0;global=require("module$node_modules$stream_browserify$index");const utils_1=require("module$node_modules$$serialport$parser_spacepacket$dist$utils");class SpacePacketParser extends global.Transform{constructor(options={}){super({...options,
objectMode:!0});this.timeCodeFieldLength=options.timeCodeFieldLength||0;this.ancillaryDataFieldLength=options.ancillaryDataFieldLength||0;this.dataSlice=this.timeCodeFieldLength+this.ancillaryDataFieldLength;this.dataBuffer=Buffer.alloc(0);this.headerBuffer=Buffer.alloc(0);this.dataLength=0;this.expectingHeader=!0}pushCompletedPacket(){if(!this.header)throw Error("Missing header");var timeCode=Buffer.from(this.dataBuffer.slice(0,this.timeCodeFieldLength));const ancillaryData=Buffer.from(this.dataBuffer.slice(this.timeCodeFieldLength,
this.timeCodeFieldLength+this.ancillaryDataFieldLength));var data=Buffer.from(this.dataBuffer.slice(this.dataSlice,this.dataLength));data={header:{...this.header},data:data.toString()};if(0<timeCode.length||0<ancillaryData.length)data.secondaryHeader={},timeCode.length&&(data.secondaryHeader.timeCode=timeCode.toString()),ancillaryData.length&&(data.secondaryHeader.ancillaryData=ancillaryData.toString());this.push(data);timeCode=Buffer.from(this.dataBuffer.slice(this.dataLength));timeCode.length>=
utils_1.HEADER_LENGTH?this.extractHeader(timeCode):(this.headerBuffer=timeCode,this.dataBuffer=Buffer.alloc(0),this.expectingHeader=!0,this.dataLength=0,this.header=void 0)}extractHeader(chunk){chunk=Buffer.concat([this.headerBuffer,chunk]);const startOfDataBuffer=chunk.slice(utils_1.HEADER_LENGTH);chunk.length>=utils_1.HEADER_LENGTH?(this.header=(0,utils_1.convertHeaderBufferToObj)(chunk),this.dataLength=this.header.dataLength,this.headerBuffer=Buffer.alloc(0),this.expectingHeader=!1):this.headerBuffer=
chunk;0<startOfDataBuffer.length&&(this.dataBuffer=Buffer.from(startOfDataBuffer),this.dataBuffer.length>=this.dataLength&&this.pushCompletedPacket())}_transform(chunk,encoding,cb){this.expectingHeader?this.extractHeader(chunk):(this.dataBuffer=Buffer.concat([this.dataBuffer,chunk]),this.dataBuffer.length>=this.dataLength&&this.pushCompletedPacket());cb()}_flush(cb){var remaining=Buffer.concat([this.headerBuffer,this.dataBuffer]);remaining=Array.from(remaining);this.push(remaining);cb()}}exports.SpacePacketParser=
SpacePacketParser}
//# sourceMappingURL=module$node_modules$$serialport$parser_spacepacket$dist$index.js.map
