shadow$provide.module$node_modules$$serialport$bindings_cpp$dist$linux_list=function(global,require,module,exports){function decodeHexEscape(str){return str.replace(/\\x([a-fA-F0-9]{2})/g,(a,b)=>String.fromCharCode(parseInt(b,16)))}Object.defineProperty(exports,"__esModule",{value:!0});exports.linuxList=void 0;const child_process_1=require("shadow$empty"),parser_readline_1=require("module$node_modules$$serialport$parser_readline$dist$index");exports.linuxList=function(spawnCmd=child_process_1.spawn){const ports=
[],udevadm=spawnCmd("udevadm",["info","-e"]),lines=udevadm.stdout.pipe(new parser_readline_1.ReadlineParser);let skipPort=!1,port={path:"",manufacturer:void 0,serialNumber:void 0,pnpId:void 0,locationId:void 0,vendorId:void 0,productId:void 0};lines.on("data",line=>{var lineType=line.slice(0,1);line=line.slice(3);if("P"===lineType)port={path:"",manufacturer:void 0,serialNumber:void 0,pnpId:void 0,locationId:void 0,vendorId:void 0,productId:void 0},skipPort=!1;else if(!skipPort)if("N"===lineType)/(tty(S|WCH|ACM|USB|AMA|MFD|O|XRUSB)|rfcomm)/.test(line)&&
line?ports.push(port):skipPort=!0;else if("E"===lineType){var keyValue=line.match(/^(.+)=(.*)/);keyValue&&(lineType={DEVNAME:"path",ID_VENDOR_ENC:"manufacturer",ID_SERIAL_SHORT:"serialNumber",ID_VENDOR_ID:"vendorId",ID_MODEL_ID:"productId",DEVLINKS:"pnpId"}[keyValue[1].toUpperCase()])&&(line=port,keyValue=keyValue[2],"pnpId"===lineType?(keyValue=keyValue.match(/\/by-id\/([^\s]+)/),keyValue=(null===keyValue||void 0===keyValue?void 0:keyValue[1])||void 0):keyValue="manufacturer"===lineType?decodeHexEscape(keyValue):
/^0x/.test(keyValue)?keyValue.substr(2):keyValue,line[lineType]=keyValue)}});return new Promise((resolve,reject)=>{udevadm.on("close",code=>{code&&reject(Error(`Error listing ports udevadm exited with error code: ${code}`))});udevadm.on("error",reject);lines.on("error",reject);lines.on("finish",()=>resolve(ports))})}}
//# sourceMappingURL=module$node_modules$$serialport$bindings_cpp$dist$linux_list.js.map
