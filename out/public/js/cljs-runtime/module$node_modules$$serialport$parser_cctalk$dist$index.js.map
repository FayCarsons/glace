{
"version":3,
"file":"module$node_modules$$serialport$parser_cctalk$dist$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,wDAAA,CAA6E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACrH,IAAIC,OAASH,OAAA,CAAQ,kCAAR,CAAkBG,CAAAA,MAC/B,aACAC,OAAOC,CAAAA,cAAP,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAAEI,MAAO,CAAA,CAAT,CAA7C,CACAJ,QAAQK,CAAAA,YAAR,CAAuB,IAAK,EACtBC,OAAAA,CAAWR,OAAA,CAAQ,6CAAR,CAOjB,MAAMO,aAAN,QAA2BC,OAASC,CAAAA,SAApC,CACIC,WAAW,CAACC,sBAAA,CAAyB,EAA1B,CAA8B,CACrC,KAAA,EACA,KAAKC,CAAAA,KAAL,CAAa,EAEb,KAAKC,CAAAA,iBAAL,CADA,IAAKC,CAAAA,MACL,CADc,CAEd,KAAKH,CAAAA,sBAAL;AAA8BA,sBALO,CAOzCI,UAAU,CAACC,MAAD,CAASC,QAAT,CAAmBC,EAAnB,CAAuB,CACK,CAAlC,CAAI,IAAKP,CAAAA,sBAAT,GACUQ,QAKN,CALYC,IAAKD,CAAAA,GAAL,EAKZ,CAJIA,QAIJ,CAJU,IAAKN,CAAAA,iBAIf,CAJmC,IAAKF,CAAAA,sBAIxC,GAHI,IAAKC,CAAAA,KACL,CADa,EACb,CAAA,IAAKE,CAAAA,MAAL,CAAc,CAElB,EAAA,IAAKD,CAAAA,iBAAL,CAAyBM,QAN7B,CAQA,KAAKL,CAAAA,MAAL,EAAeE,MAAOK,CAAAA,MAKtB,KADAC,KAAMC,CAAAA,IAAN,CAAWP,MAAX,CAAmBQ,CAAAA,GAAnB,CAAuBC,IAAA,EAAQ,IAAKb,CAAAA,KAAMc,CAAAA,IAAX,CAAgBD,IAAhB,CAA/B,CACA,CAAqB,CAArB,CAAO,IAAKX,CAAAA,MAAZ,EAA0B,IAAKA,CAAAA,MAA/B,EAAyC,IAAKF,CAAAA,KAAL,CAAW,CAAX,CAAzC,CAAyD,CAAzD,CAAA,CAGUe,MAKN,CALsB,IAAKf,CAAAA,KAAL,CAAW,CAAX,CAKtB,CALsC,CAKtC,CAJMgB,QAIN,CAJczB,MAAOoB,CAAAA,IAAP,CAAY,IAAKX,CAAAA,KAAMiB,CAAAA,KAAX,CAAiB,CAAjB,CAAoBF,MAApB,CAAZ,CAId,CAFA,IAAKf,CAAAA,KAEL,CAFa,IAAKA,CAAAA,KAAMiB,CAAAA,KAAX,CAAiBD,QAAMP,CAAAA,MAAvB,CAA+B,IAAKT,CAAAA,KAAMS,CAAAA,MAA1C,CAEb,CADA,IAAKP,CAAAA,MACL;AADea,MACf,CAAA,IAAKD,CAAAA,IAAL,CAAUE,QAAV,CAEJV,GAAA,EAxB6B,CARrC,CAmCAhB,OAAQK,CAAAA,YAAR,CAAuBA,YA/C8F;",
"sources":["node_modules/@serialport/parser-cctalk/dist/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$serialport$parser_cctalk$dist$index\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CCTalkParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * Parse the CCTalk protocol\n * @extends Transform\n *\n * A transform stream that emits CCTalk packets as they are received.\n */\nclass CCTalkParser extends stream_1.Transform {\n    constructor(maxDelayBetweenBytesMs = 50) {\n        super();\n        this.array = [];\n        this.cursor = 0;\n        this.lastByteFetchTime = 0;\n        this.maxDelayBetweenBytesMs = maxDelayBetweenBytesMs;\n    }\n    _transform(buffer, encoding, cb) {\n        if (this.maxDelayBetweenBytesMs > 0) {\n            const now = Date.now();\n            if (now - this.lastByteFetchTime > this.maxDelayBetweenBytesMs) {\n                this.array = [];\n                this.cursor = 0;\n            }\n            this.lastByteFetchTime = now;\n        }\n        this.cursor += buffer.length;\n        // TODO: Better Faster es7 no supported by node 4\n        // ES7 allows directly push [...buffer]\n        // this.array = this.array.concat(Array.from(buffer)) //Slower ?!?\n        Array.from(buffer).map(byte => this.array.push(byte));\n        while (this.cursor > 1 && this.cursor >= this.array[1] + 5) {\n            // full frame accumulated\n            // copy command from the array\n            const FullMsgLength = this.array[1] + 5;\n            const frame = Buffer.from(this.array.slice(0, FullMsgLength));\n            // Preserve Extra Data\n            this.array = this.array.slice(frame.length, this.array.length);\n            this.cursor -= FullMsgLength;\n            this.push(frame);\n        }\n        cb();\n    }\n}\nexports.CCTalkParser = CCTalkParser;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","Object","defineProperty","value","CCTalkParser","stream_1","Transform","constructor","maxDelayBetweenBytesMs","array","lastByteFetchTime","cursor","_transform","buffer","encoding","cb","now","Date","length","Array","from","map","byte","push","FullMsgLength","frame","slice"]
}
