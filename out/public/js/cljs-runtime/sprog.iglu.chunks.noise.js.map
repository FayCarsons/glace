{"version":3,"sources":["sprog/iglu/chunks/noise.cljs"],"mappings":"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","names":["sprog.iglu.chunks.noise/rand-chunk","sprog.iglu.chunks.noise/rand-normal-chunk","sprog.iglu.core.combine_chunks","sprog.iglu.chunks.noise/rand-sphere-chunk","sprog.iglu.chunks.noise/pcg-hash-chunk","clojure.walk/prewalk-replace","sprog.iglu.chunks.noise/simplex-2d-chunk","clojure.walk/postwalk-replace","cljs.core.conj","cljs.core/List","Math/sqrt","sprog.iglu.chunks.noise/simplex-3d-chunk","sprog.iglu.chunks.noise/simplex-4d-chunk","sprog.iglu.chunks.noise/tileable-simplex-2d-chunk","Math/PI","sprog.iglu.chunks.noise/fbm-chunk","G__31278","fexpr__31277","noise-fn","noise-dimensions","x","octaves","hurst-exponent","noise-suffix-args","fbm-symbol","cljs.core.symbol","dimension-type","js/parseInt","cljs.core.concat","sprog.iglu.chunks.noise/voronoise-chunk","sprog.iglu.chunks.noise/voronoise-3d-chunk","sprog.iglu.chunks.noise/gabor-kernel-chunk","G__31301","fexpr__31300","dimensions","kernel-args","position-type","cljs.core/cons","sprog.iglu.chunks.noise/gabor-noise-chunk","G__31321","fexpr__31320","cljs.core.repeatedly","args","first-arg-rand-fn?","cljs.core/fn?","cljs.core/first","rand-fn","cljs.core/rand","frequencies","cljs.core/second","noise-args","cljs.core.drop","fn-name","cljs.core.gensym","cljs.core.map","frequency","phase","offset","cljs.core.partial","cljs.core/*","sprog.tools.math/rand-n-sphere-point","cljs.core/count","sprog.iglu.chunks.noise/wobbly-sine-chunk","or__5043__auto__","input","valid-arg?","multiple-amplitudes?","phase-mod-amplitude-1","phase-mod-amplitude-2","cljs.core/last","rand-tau","sprog.util/TAU","cljs.core.rand","rand-vec","Math/pow"],"sourcesContent":["(ns sprog.iglu.chunks.noise\n  (:require [sprog.util :as u]\n            [clojure.walk :refer [postwalk-replace]]\n            [sprog.iglu.core :refer [combine-chunks]]\n            [sprog.tools.math :refer [rand-n-sphere-point]]))\n\n(def rand-chunk\n  '{:functions {rand\n                {([vec2] float)\n                 ([p]\n                  (=vec3 p3 (fract (* (vec3 p.xyx) 0.1031)))\n                  (+= p3 (dot p3 (+ p3.yzx 33.33)))\n                  (fract (* (+ p3.x p3.y) p3.z)))}}})\n\n(def rand-normal-chunk\n  (combine-chunks rand-chunk\n                '{:functions\n                  {randNorm\n                   {([vec2] vec2)\n                    ([x]\n                     (=float angle (* 6.283185307179586 (rand x)))\n                     (=float radius\n                             (sqrt (* -2 (log (rand (+ x (vec2 100 -50)))))))\n                     (* radius (vec2 (cos angle) (sin angle))))}}}))\n\n(def rand-sphere-chunk\n  (combine-chunks rand-normal-chunk\n                '{:functions\n                  {randSphere\n                   {([vec3] vec3)\n                    ([x]\n                     (=vec2 norm1 (randNorm x.xy))\n                     (=vec2 norm2 (randNorm (+ x.yz (vec2 -153 0))))\n\n                     (* (vec3 norm1 norm2.x)\n                        (/ (pow (rand (+ x.zx (vec2 -101 60))) (/ 1 3))\n                           (sqrt (+ (* norm1.x norm1.x)\n                                    (* norm1.y norm1.y)\n                                    (* norm2.x norm2.x))))))}}}))\n\n;pcg hash based on https://github.com/riccardoscalco/glsl-pcg-prng\n(def pcg-hash-chunk\n  (u/unquotable\n   '{:functions {pcg\n                 {([uint] uint)\n                  ([x]\n                   (=uint state (+ (* x \"747796405u\")\n                                   \"2891336453u\"))\n                   (=uint word (* (\"^\" (>> state\n                                           (+ (>> state \"28u\")\n                                              \"4u\"))\n                                       state)\n                                  \"277803737u\"))\n                   (\"^\" (>> word \"22u\") word))\n\n                  ([uvec3] uvec3)\n                  ([x]\n                   (= x (+ (* x \"1664525u\")\n                           \"1013904223u\"))\n\n                   (+= x.x (* x.y x.z))\n                   (+= x.y (* x.z x.x))\n                   (+= x.z (* x.x x.y))\n                   \n                   (\"^=\" x (>> x \"16u\"))\n\n                   (+= x.x (* x.y x.z))\n                   (+= x.y (* x.z x.x))\n                   (+= x.z (* x.x x.y))\n\n                   x)}\n                 rand-pcg\n                 {([float] float)\n                  ([p]\n                   (/ (float (pcg (floatBitsToUint p)))\n                      (float \"0xffffffffu\")))\n                  ([vec2] float)\n                  ([p]\n                   (/ (float (pcg (+ (pcg (floatBitsToUint p.x))\n                                     (floatBitsToUint p.y))))\n                      (float \"0xffffffffu\")))\n                  ([vec3] vec3)\n                  ([p]\n                   (/ (vec3 (pcg (uvec3 (floatBitsToUint p.x)\n                                        (floatBitsToUint p.y)\n                                        (floatBitsToUint p.z))))\n                      (float \"0xffffffffu\")))}}}))\n\n; based on https://thebookofshaders.com/edit.php#11/2d-snoise-clear.frag\n(def simplex-2d-chunk\n  (postwalk-replace\n   {:c (conj (list (/ (- 3 (Math/sqrt 3)) 6)\n                   (/ (- (Math/sqrt 3) 1) 2)\n                   (- (/ (- 3 (Math/sqrt 3)) 3) 1)\n                   (/ 1 41))\n             'vec4)}\n   '{:functions\n     {mod289 {([vec2] vec2)\n              ([x] (- x (* (floor (/ x 289)) 289)))\n              ([vec3] vec3)\n              ([x] (- x (* (floor (/ x 289)) 289)))}\n      permute {([vec3] vec3)\n               ([x] (mod289 (* x (+ 1 (* x 34)))))}\n      snoise2D\n      {([vec2] float)\n       ([v]\n        (+= v (vec2 12.5 -3.6))\n        (=vec4 C :c)\n        (=vec2 i (floor (+ v (dot v C.yy))))\n        (=vec2 x0 (- (+ v (dot i C.xx))\n                     i))\n\n        (=vec2 c1 (if (> x0.x x0.y) (vec2 1 0) (vec2 0 1)))\n        (=vec2 x1 (- (+ x0.xy C.xx) c1))\n        (=vec2 x2 (+ x0.xy C.zz))\n\n        (= i (mod289 i))\n\n        (=vec3 p (permute\n                  (+ (permute (+ i.y (vec3 0 c1.y 1)))\n                     i.x\n                     (vec3 0 c1.x 1))))\n        (=vec3 m (max (vec3 0)\n                      (- 0.5\n                         (vec3 (dot x0 x0)\n                               (dot x1 x1)\n                               (dot x2 x2)))))\n\n        (= m (* m m))\n        (= m (* m m))\n\n        (=vec3 x (- (* 2 (fract (* p C.www))) 1))\n        (=vec3 h (- (abs x) 0.5))\n        (=vec3 ox (floor (+ x 0.5)))\n        (=vec3 a0 (- x ox))\n\n        (*= m (- 1.79284291400159\n                 (* 0.85373472095314\n                    (+ (* a0 a0)\n                       (* h h)))))\n\n        (=vec3 g (vec3 (+ (* a0.x x0.x) (* h.x x0.y))\n                       (+ (* a0.yz (vec2 x1.x x2.x))\n                          (* h.yz (vec2 x1.y x2.y)))))\n        (* 130 (dot m g)))}}}))\n\n; based on https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n(def simplex-3d-chunk\n  {:functions\n   '{permute {([vec4] vec4)\n              ([x] (mod (* x (+ 1 (* 34 x))) 289))}\n     taylorInvSqrt {([vec4] vec4)\n                    ([r] (- 1.79284291400159\n                            (* r 0.85373472095314)))}\n     snoise3D\n     {([vec3] float)\n      ([v]\n       (=vec2 C (vec2 (/ 1 6) (/ 1 3)))\n       (=vec4 D (vec4 0 0.5 1 2))\n\n      ; first corner\n       (=vec3 i (floor (+ v (dot v C.yyy))))\n       (=vec3 x0 (+ (- v i)\n                    (dot i C.xxx)))\n\n      ; other corners\n       (=vec3 g (step x0.yzx x0.xyz))\n       (=vec3 l (- 1 g))\n       (=vec3 c1 (min g.xyz l.zxy))\n       (=vec3 c2 (max g.xyz l.zxy))\n\n       (=vec3 x1 (+ (- x0 c1) C.xxx))\n       (=vec3 x2 (+ (- x0 c2) (* 2 C.xxx)))\n       (=vec3 x3 (+ (- x0 1) (* 3 C.xxx)))\n\n      ; permutations\n       (= i (mod i 289))\n       (=vec4 p (permute (+ (permute (+ (permute (+ i.z (vec4 0 c1.z c2.z 1)))\n                                        i.y\n                                        (vec4 0 c1.y c2.y 1)))\n                            i.x\n                            (vec4 0 c1.x c2.x 1))))\n\n      ; gradients\n       (=vec3 ns (- (* D.wyz (/ 1 7)) D.xzx))\n\n       (=vec4 j (- p (* 49 (floor (* p ns.z ns.z)))))\n\n       (=vec4 x_ (floor (* j ns.z)))\n       (=vec4 y_ (floor (- j (* 7 x_))))\n\n       (=vec4 x (+ ns.yyyy (* ns.x x_)))\n       (=vec4 y (+ ns.yyyy (* ns.x y_)))\n       (=vec4 h (- 1 (+ (abs x) (abs y))))\n\n       (=vec4 b0 (vec4 x.xy y.xy))\n       (=vec4 b1 (vec4 x.zw y.zw))\n\n       (=vec4 s0 (+ 1 (* 2 (floor b0))))\n       (=vec4 s1 (+ 1 (* 2 (floor b1))))\n       (=vec4 sh (- 0 (step h (vec4 0))))\n\n       (=vec4 a0 (+ b0.xzyw (* s0.xzyw sh.xxyy)))\n       (=vec4 a1 (+ b1.xzyw (* s1.xzyw sh.zzww)))\n\n       (=vec3 p0 (vec3 a0.xy h.x))\n       (=vec3 p1 (vec3 a0.zw h.y))\n       (=vec3 p2 (vec3 a1.xy h.z))\n       (=vec3 p3 (vec3 a1.zw h.w))\n\n      ; normalize gradients\n       (=vec4 norm (taylorInvSqrt (vec4 (dot p0 p0)\n                                        (dot p1 p1)\n                                        (dot p2 p2)\n                                        (dot p3 p3))))\n\n       (*= p0 norm.x)\n       (*= p1 norm.y)\n       (*= p2 norm.z)\n       (*= p3 norm.w)\n\n      ; mix final noise value\n       (=vec4 m (max (- 0.6\n                        (vec4 (dot x0 x0)\n                              (dot x1 x1)\n                              (dot x2 x2)\n                              (dot x3 x3)))\n                     0))\n       (*= m m)\n       (* 42 (dot (* m m)\n                  (vec4 (dot p0 x0)\n                        (dot p1 x1)\n                        (dot p2 x2)\n                        (dot p3 x3)))))}}})\n\n; based on https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n(def simplex-4d-chunk\n  '{:functions\n    {permute {([float] float)\n              ([x] (floor (mod (* x (+ 1 (* x 34))) 289)))\n              ([vec4] vec4)\n              ([x] (mod (* x (+ 1 (* x 34))) 289))}\n     taylorInvSqrt {([float] float)\n                    ([r] (- 1.79284291400159 (* 0.85373472095314 r)))\n                    ([vec4] vec4)\n                    ([r] (- 1.79284291400159 (* 0.85373472095314 r)))}\n     grad4\n     {([float vec4] vec4)\n      ([j ip]\n       (=vec4 p (vec4 (- (* (floor (* (fract (* j ip.xyz)) 7))\n                            ip.z)\n                         1)\n                      0))\n       (= p.w (- 1.5\n                 (+ (abs p.x)\n                    (abs p.y)\n                    (abs p.z))))\n       (=vec4 s (vec4 (lessThan p (vec4 0))))\n       (vec4 (+ p.xyz (* s.www (- (* s.xyz 2) 1)))\n             p.w))}\n     snoise4D\n     {([vec4] float)\n      ([v]\n       (=vec2 C (vec2 0.138196601125010504 0.309016994374947451))\n\n       (=vec4 i (floor (+ v (dot v C.yyyy))))\n       (=vec4 x0 (+ (dot i C.xxxx)\n                    (- v i)))\n       (=vec4 c0 (vec4 0))\n       (=vec3 isX (step x0.yzw x0.xxx))\n       (=vec3 isYZ (step x0.zww x0.yyz))\n\n       (= c0.x (+ isX.x isX.y isX.z))\n       (= c0.yzw (- 1 isX))\n\n       (+= c0.y (+ isYZ.x isYZ.y))\n       (+= c0.zw (- 1 isYZ.xy))\n\n       (+= c0.z isYZ.z)\n       (+= c0.w (- 1 isYZ.z))\n\n       (=vec4 c3 (clamp c0 0 1))\n       (=vec4 c2 (clamp (- c0 1) 0 1))\n       (=vec4 c1 (clamp (- c0 2) 0 1))\n\n       (=vec4 x1 (+ C.xxxx (- x0 c1)))\n       (=vec4 x2 (+ (* 2 C.xxxx) (- x0 c2)))\n       (=vec4 x3 (+ (* 3 C.xxxx) (- x0 c3)))\n       (=vec4 x4 (+ (* 4 C.xxxx) (- x0 1)))\n\n       (= i (mod i 289))\n\n       (=float j0 (permute (+ i.x\n                              (permute (+ i.y\n                                          (permute (+ i.z\n                                                      (permute i.w))))))))\n       (=vec4 j1\n              (permute\n               (+ i.x\n                  (vec4 c1.x c2.x c3.x 1)\n                  (permute (+ i.y\n                              (vec4 c1.y c2.y c3.y 1)\n                              (+ (permute (+ i.z\n                                             (vec4 c1.z c2.z c3.z 1)\n                                             (permute (+ i.w\n                                                         (vec4 c1.w\n                                                               c2.w\n                                                               c3.w\n                                                               1)))))))))))\n       (=vec4 ip (vec4 0.003401360544217687\n                       0.02040816326530612\n                       0.14285714285714285\n                       0))\n\n       (=vec4 p0 (grad4 j0 ip))\n       (=vec4 p1 (grad4 j1.x ip))\n       (=vec4 p2 (grad4 j1.y ip))\n       (=vec4 p3 (grad4 j1.z ip))\n       (=vec4 p4 (grad4 j1.w ip))\n\n       (=vec4 norm (taylorInvSqrt (vec4 (dot p0 p0)\n                                        (dot p1 p1)\n                                        (dot p2 p2)\n                                        (dot p3 p3))))\n       (*= p0 norm.x)\n       (*= p1 norm.y)\n       (*= p2 norm.z)\n       (*= p3 norm.w)\n       (*= p4 (taylorInvSqrt (dot p4 p4)))\n\n       (=vec3 m0 (max (- 0.6 (vec3 (dot x0 x0)\n                                   (dot x1 x1)\n                                   (dot x2 x2)))\n                      0))\n       (=vec2 m1 (max (- 0.6 (vec2 (dot x3 x3)\n                                   (dot x4 x4)))\n                      0))\n       (*= m0 m0)\n       (*= m1 m1)\n       (* 49\n          (+ (dot (* m0 m0)\n                  (vec3 (dot p0 x0)\n                        (dot p1 x1)\n                        (dot p2 x2)))\n             (dot (* m1 m1)\n                  (vec2 (dot p3 x3)\n                        (dot p4 x4))))))}}})\n\n; based on https://gamedev.stackexchange.com/a/23639\n\n(def tileable-simplex-2d-chunk\n  (combine-chunks\n   simplex-4d-chunk\n   (postwalk-replace\n    {:TAU (.toFixed (* Math/PI 2) 12)}\n    '{:functions\n      {snoiseTileable2D\n       {([vec2 vec2 vec2] float)\n        ([basePos scale pos]\n         (=vec2 angles (* pos :TAU))\n         (snoise4D\n          (+ basePos.xyxy\n             (* (vec4 (cos angles)\n                      (sin angles))\n                (.xyxy (/ scale :TAU))))))}}})))\n\n; fractional brownian motion\n(def fbm-chunk\n  (u/unquotable\n   {:macros\n    {'fbm (fn [noise-fn \n               noise-dimensions\n               x\n               octaves\n               hurst-exponent\n               & noise-suffix-args]\n            (let [fbm-symbol (symbol (str \"fbm_\" noise-fn))\n                  dimension-type ({1 'float\n                                   2 'vec2\n                                   3 'vec3\n                                   4 'vec4}\n                                  (if (number? noise-dimensions)\n                                    noise-dimensions\n                                    (js/parseInt noise-dimensions)))]\n              {:chunk\n               {:functions\n                {fbm-symbol\n                 '{([~dimension-type int float]\n                    float)\n                   ([x octaves hurstExponent]\n                    (=float g (exp2 (- 0 hurstExponent)))\n                    (=float f 1)\n                    (=float a 1)\n                    (=float t 0)\n                    (\"for(int i=0;i<octaves;i++)\"\n                     (+= t (* a ~(concat (list noise-fn\n                                               '(* f x))\n                                         noise-suffix-args)))\n                     (*= f 2)\n                     (*= a g))\n                    t)}}}\n               :expression (list fbm-symbol x octaves hurst-exponent)}))}}))\n\n;based on www.shadertoy.com/view/Xd23Dh\n(def voronoise-chunk\n  '{:functions {hash3 {([vec2] vec3)\n                       ([p]\n                        (=vec3 q (vec3 (dot p (vec2 127.1 311.7))\n                                       (dot p (vec2  269.5 183.3))\n                                       (dot p (vec2 419.2 371.9))))\n                        (fract (* (sin q) 43758.5453)))}\n                voronoise {([float float vec2] float)\n                           ([skew blur p]\n                            (=float k (+ 1 (* 63 (pow (- 1 blur) 6))))\n\n                            (=vec2 i (floor p))\n                            (=vec2 f (fract p))\n\n                            (=vec2 a (vec2 0))\n                            (\"for(int y=-2; y<=2; y++)\"\n                             (\"for(int x=-2; x<=2; x++)\"\n                              (=vec2 g (vec2 x y))\n                              (=vec3 o (* (hash3 (+ i g))\n                                          (vec3 skew skew 1)))\n                              (=vec2 d (- g (+ f o.xy)))\n                              (=float w (pow (- 1\n                                                (smoothstep 0\n                                                            1.414\n                                                            (length d)))\n                                             k))\n                              (+= a (vec2 (* o.z w) w))))\n                            (/ a.x a.y))}}})\n\n; based on https://www.shadertoy.com/view/ldl3Dl by Inigo Quilez\n(def voronoise-3d-chunk\n  '{:functions\n    {hash {([vec3] vec3)\n           ([x]\n            (= x (vec3 (dot x (vec3 127.1 311.7 74.7))\n                       (dot x (vec3 269.5 183.3 246.1))\n                       (dot x (vec3 113.5 271.9 124.6))))\n            (fract (* (sin x) 43758.5453123)))}\n     voronoise3D {([vec3] vec3)\n                  ([pos]\n                   (=vec3 p (floor pos))\n                   (=vec3 f (fract pos))\n\n                   (=float id 0)\n                   (=vec2 res (vec2 100))\n                   (\"for (int k = -1; k <= 1; k++)\"\n                    (\"for (int j = -1; j <= 1; j++)\"\n                     (\"for (int i = -1; i <= 1; i++)\"\n                      (=vec3 b (vec3 (float i)\n                                     (float j)\n                                     (float k)))\n                      (=vec3 r (- b (- f (hash (+ p b)))))\n                      (=float d (dot r r))\n\n                      (\"if\" (< d res.x)\n                            (= id (dot (+ p b) (vec3 1 57 113)))\n                            (= res (vec2 d res.x)))\n                      (\"else if\" (< d res.y)\n                                 (= res.y d)))))\n                   (vec3 (sqrt res) (abs id)))}}})\n\n; based on \"Gabor Noise by Example\" section 3.3\n; doi:10.1145/2185520.2185569\n(def gabor-kernel-chunk\n  (u/unquotable\n   {:macros\n    {'gaborKernel\n     (fn [dimensions & kernel-args]\n       (let [position-type ('[float vec2 vec3 vec4]\n                            (dec dimensions))]\n         {:chunk '{:functions\n                   {gKernel\n                    {([~position-type ~position-type float] float)\n                     ([x frequency phase]\n                      (cos (+ phase (* ~(* Math/PI 2) (dot x frequency)))))\n                     ([~position-type ~position-type float float] float)\n                     ([x frequency phase bandwidth]\n                      (* (exp (* ~(- Math/PI)\n                                 bandwidth\n                                 bandwidth\n                                 (dot x x)))\n                         (cos (+ phase (* ~(* Math/PI 2)\n                                          (dot x frequency))))))}}}\n          :expression (cons 'gKernel kernel-args)}))}}))\n\n; based on \"Gabor Noise by Example\" section 3.3\n; doi:10.1145/2185520.2185569\n(def gabor-noise-chunk\n  (combine-chunks\n   gabor-kernel-chunk\n   (u/unquotable\n    {:macros\n     {'gaborNoise\n      (fn gabor-macro [dimensions & args]\n        (let [position-type ('[float vec2 vec3 vec4]\n                             (dec dimensions))\n              first-arg-rand-fn? (fn? (first args))\n              rand-fn (if first-arg-rand-fn? (first args) rand)\n              frequencies (if first-arg-rand-fn? (second args) (first args))\n              noise-args (drop (if first-arg-rand-fn? 2 1)\n                               args)\n              fn-name (gensym 'gNoise)]\n          {:chunk\n           '{:functions\n             {~fn-name\n              {([~position-type] float)\n               ([x]\n                (* ~(cons\n                     '+\n                     (map (fn [frequency]\n                            (let [phase (* (rand-fn) Math/PI 2)\n                                  offset (cons position-type\n                                               (u/gen dimensions\n                                                      (- (* (rand-fn) 2) 1)))]\n                              '(gaborKernel ~dimensions\n                                            (- x ~offset)\n                                            ~(cons position-type\n                                                   (map (partial * frequency)\n                                                        (rand-n-sphere-point\n                                                         dimensions\n                                                         rand-fn)))\n                                            ~phase)))\n                          frequencies))\n                   ~(/ (Math/sqrt (count frequencies)))))\n               ([~position-type float] float)\n               ([x bandwidth]\n                (* ~(cons\n                     '+\n                     (map (fn [frequency]\n                            (let [phase (* (rand-fn) Math/PI 2)\n                                  offset (cons position-type\n                                               (u/gen dimensions\n                                                      (- (* (rand-fn) 2) 1)))]\n                              '(gaborKernel ~dimensions\n                                            (- x ~offset)\n                                            ~(cons position-type\n                                                   (map (partial * frequency)\n                                                        (rand-n-sphere-point\n                                                         dimensions\n                                                         rand-fn)))\n                                            ~phase\n                                            bandwidth)))\n                          frequencies))\n                   ~(/ (Math/sqrt (count frequencies)))))}}}\n           :expression (cons fn-name noise-args)}))}})))\n\n(def wobbly-sine-chunk\n  (u/unquotable\n   {:macros\n    {'wobble3D\n     (fn wobbly-sine [input rand-fn & args]\n       (let [valid-arg? (fn? rand-fn)\n             multiple-amplitudes? (> (count args) 1)\n             phase-mod-amplitude-1 (or (first args) 2)\n             phase-mod-amplitude-2 (if multiple-amplitudes?\n                                     (last args)\n                                     phase-mod-amplitude-1)\n             rand-tau #(cons 'vec3 (u/gen 3\n                                          (if valid-arg?\n                                            (rand-fn u/TAU)\n                                            (rand u/TAU))))\n             rand-vec #(cons 'vec3 (u/gen 3\n                                          (if valid-arg?\n                                            (Math/pow 2 (rand-fn -0.3 0.3))\n                                            (Math/pow 2 (- (rand 0.6) 0.3)))))\n             fn-name (gensym 'wsin)]\n         {:chunk\n          '{:functions\n            {~fn-name\n             {([vec3] float)\n              ([pos]\n               (dot (sin (+ (* pos ~(rand-vec))\n                            (* ~phase-mod-amplitude-1\n                               (sin (* pos.yzx\n                                       ~(rand-vec))))\n                            ~(rand-tau)\n                            ~(rand-tau)))\n                    (sin (+ (* pos.zyx ~(rand-vec))\n                            (* ~phase-mod-amplitude-2\n                               (sin (* pos.zxy\n                                       ~(rand-vec))))\n                            ~(rand-tau)\n                            ~(rand-tau)))))}}}\n          :expression (list fn-name input)}))}}))\n"]}